
SmartMic_G030K8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090a0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092c8  080092c8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080092c8  080092c8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080092c8  080092c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092c8  080092c8  000192c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080092cc  080092cc  000192cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080092d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000070  08009340  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08009340  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a686  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000302f  00000000  00000000  0003a71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001450  00000000  00000000  0003d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001340  00000000  00000000  0003eba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a18  00000000  00000000  0003fee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a378  00000000  00000000  000588f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009946d  00000000  00000000  00072c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010c0dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005200  00000000  00000000  0010c130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000070 	.word	0x20000070
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08009140 	.word	0x08009140

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000074 	.word	0x20000074
 80000fc:	08009140 	.word	0x08009140

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <Hal_LED_Driver_Initial>:
    if(delayTime >= uwTick) {
        goto LBL_Delay_Loop;
    }
}
/*----------------------------------------------------------------------------*/
void Hal_LED_Driver_Initial(void) {
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
    //Configure Global power
    if(1) {
        static const unsigned char LED_Driver_All_Power = 50;  //MIN:0, MAX:255

        //LED Driver 1
        I2C_WriteByte(AD_SEL1_LOW,  0x6E, LED_Driver_All_Power);    //GCC
 8000230:	4bfe      	ldr	r3, [pc, #1016]	; (800062c <Hal_LED_Driver_Initial+0x400>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	001a      	movs	r2, r3
 8000236:	216e      	movs	r1, #110	; 0x6e
 8000238:	2068      	movs	r0, #104	; 0x68
 800023a:	f000 ffff 	bl	800123c <I2C_WriteByte>

        //LED Driver 2
        I2C_WriteByte(AD_SEL1_HIGH, 0x6E, LED_Driver_All_Power);    //GCC
 800023e:	4bfb      	ldr	r3, [pc, #1004]	; (800062c <Hal_LED_Driver_Initial+0x400>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	001a      	movs	r2, r3
 8000244:	216e      	movs	r1, #110	; 0x6e
 8000246:	206e      	movs	r0, #110	; 0x6e
 8000248:	f000 fff8 	bl	800123c <I2C_WriteByte>

        static const unsigned char LED_Power_R           = 24;  //MIN:0, MAX:255
        static const unsigned char LED_Power_G           =  3;  //MIN:0, MAX:255
        static const unsigned char LED_Power_B           = 12;  //MIN:0, MAX:255

        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no1 , LED_array_Power_G);      //write all scaling
 800024c:	4bf8      	ldr	r3, [pc, #992]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 800024e:	781b      	ldrb	r3, [r3, #0]
 8000250:	001a      	movs	r2, r3
 8000252:	214a      	movs	r1, #74	; 0x4a
 8000254:	2068      	movs	r0, #104	; 0x68
 8000256:	f000 fff1 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no2 , LED_array_Power_G);      //write all scaling
 800025a:	4bf5      	ldr	r3, [pc, #980]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 800025c:	781b      	ldrb	r3, [r3, #0]
 800025e:	001a      	movs	r2, r3
 8000260:	214b      	movs	r1, #75	; 0x4b
 8000262:	2068      	movs	r0, #104	; 0x68
 8000264:	f000 ffea 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no3 , LED_array_Power_G);      //write all scaling
 8000268:	4bf1      	ldr	r3, [pc, #964]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	001a      	movs	r2, r3
 800026e:	214c      	movs	r1, #76	; 0x4c
 8000270:	2068      	movs	r0, #104	; 0x68
 8000272:	f000 ffe3 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no4 , LED_array_Power_G);      //write all scaling
 8000276:	4bee      	ldr	r3, [pc, #952]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 8000278:	781b      	ldrb	r3, [r3, #0]
 800027a:	001a      	movs	r2, r3
 800027c:	214d      	movs	r1, #77	; 0x4d
 800027e:	2068      	movs	r0, #104	; 0x68
 8000280:	f000 ffdc 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no5 , LED_array_Power_G);      //write all scaling
 8000284:	4bea      	ldr	r3, [pc, #936]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	001a      	movs	r2, r3
 800028a:	214e      	movs	r1, #78	; 0x4e
 800028c:	2068      	movs	r0, #104	; 0x68
 800028e:	f000 ffd5 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no6 , LED_Driver_Each_Power);  //write all scaling
 8000292:	4be8      	ldr	r3, [pc, #928]	; (8000634 <Hal_LED_Driver_Initial+0x408>)
 8000294:	781b      	ldrb	r3, [r3, #0]
 8000296:	001a      	movs	r2, r3
 8000298:	214f      	movs	r1, #79	; 0x4f
 800029a:	2068      	movs	r0, #104	; 0x68
 800029c:	f000 ffce 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no7 , LED_Driver_Each_Power);  //write all scaling
 80002a0:	4be4      	ldr	r3, [pc, #912]	; (8000634 <Hal_LED_Driver_Initial+0x408>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	001a      	movs	r2, r3
 80002a6:	2150      	movs	r1, #80	; 0x50
 80002a8:	2068      	movs	r0, #104	; 0x68
 80002aa:	f000 ffc7 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no8 , LED_array_Power_R);      //write all scaling
 80002ae:	4be2      	ldr	r3, [pc, #904]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	001a      	movs	r2, r3
 80002b4:	2151      	movs	r1, #81	; 0x51
 80002b6:	2068      	movs	r0, #104	; 0x68
 80002b8:	f000 ffc0 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no9 , LED_array_Power_R);      //write all scaling
 80002bc:	4bde      	ldr	r3, [pc, #888]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	001a      	movs	r2, r3
 80002c2:	2152      	movs	r1, #82	; 0x52
 80002c4:	2068      	movs	r0, #104	; 0x68
 80002c6:	f000 ffb9 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED2_no10, LED_array_Power_R);      //write all scaling
 80002ca:	4bdb      	ldr	r3, [pc, #876]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 80002cc:	781b      	ldrb	r3, [r3, #0]
 80002ce:	001a      	movs	r2, r3
 80002d0:	2153      	movs	r1, #83	; 0x53
 80002d2:	2068      	movs	r0, #104	; 0x68
 80002d4:	f000 ffb2 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no1 , LED_array_Power_G);      //write all scaling
 80002d8:	4bd5      	ldr	r3, [pc, #852]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	001a      	movs	r2, r3
 80002de:	2154      	movs	r1, #84	; 0x54
 80002e0:	2068      	movs	r0, #104	; 0x68
 80002e2:	f000 ffab 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no2 , LED_array_Power_G);      //write all scaling
 80002e6:	4bd2      	ldr	r3, [pc, #840]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 80002e8:	781b      	ldrb	r3, [r3, #0]
 80002ea:	001a      	movs	r2, r3
 80002ec:	2155      	movs	r1, #85	; 0x55
 80002ee:	2068      	movs	r0, #104	; 0x68
 80002f0:	f000 ffa4 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no3 , LED_array_Power_G);      //write all scaling
 80002f4:	4bce      	ldr	r3, [pc, #824]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	2156      	movs	r1, #86	; 0x56
 80002fc:	2068      	movs	r0, #104	; 0x68
 80002fe:	f000 ff9d 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no4 , LED_array_Power_G);      //write all scaling
 8000302:	4bcb      	ldr	r3, [pc, #812]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 8000304:	781b      	ldrb	r3, [r3, #0]
 8000306:	001a      	movs	r2, r3
 8000308:	2157      	movs	r1, #87	; 0x57
 800030a:	2068      	movs	r0, #104	; 0x68
 800030c:	f000 ff96 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no5 , LED_array_Power_G);      //write all scaling
 8000310:	4bc7      	ldr	r3, [pc, #796]	; (8000630 <Hal_LED_Driver_Initial+0x404>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	001a      	movs	r2, r3
 8000316:	2158      	movs	r1, #88	; 0x58
 8000318:	2068      	movs	r0, #104	; 0x68
 800031a:	f000 ff8f 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no6 , LED_Driver_Each_Power);  //write all scaling
 800031e:	4bc5      	ldr	r3, [pc, #788]	; (8000634 <Hal_LED_Driver_Initial+0x408>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	001a      	movs	r2, r3
 8000324:	2159      	movs	r1, #89	; 0x59
 8000326:	2068      	movs	r0, #104	; 0x68
 8000328:	f000 ff88 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no7 , LED_Driver_Each_Power);  //write all scaling
 800032c:	4bc1      	ldr	r3, [pc, #772]	; (8000634 <Hal_LED_Driver_Initial+0x408>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	001a      	movs	r2, r3
 8000332:	215a      	movs	r1, #90	; 0x5a
 8000334:	2068      	movs	r0, #104	; 0x68
 8000336:	f000 ff81 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no8 , LED_array_Power_R);      //write all scaling
 800033a:	4bbf      	ldr	r3, [pc, #764]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 800033c:	781b      	ldrb	r3, [r3, #0]
 800033e:	001a      	movs	r2, r3
 8000340:	215b      	movs	r1, #91	; 0x5b
 8000342:	2068      	movs	r0, #104	; 0x68
 8000344:	f000 ff7a 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no9 , LED_array_Power_R);      //write all scaling
 8000348:	4bbb      	ldr	r3, [pc, #748]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001a      	movs	r2, r3
 800034e:	215c      	movs	r1, #92	; 0x5c
 8000350:	2068      	movs	r0, #104	; 0x68
 8000352:	f000 ff73 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_array_LED1_no10, LED_array_Power_R);      //write all scaling
 8000356:	4bb8      	ldr	r3, [pc, #736]	; (8000638 <Hal_LED_Driver_Initial+0x40c>)
 8000358:	781b      	ldrb	r3, [r3, #0]
 800035a:	001a      	movs	r2, r3
 800035c:	215d      	movs	r1, #93	; 0x5d
 800035e:	2068      	movs	r0, #104	; 0x68
 8000360:	f000 ff6c 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  Power_LED9_R         , LED_Power_R);  //write all scaling
 8000364:	4bb5      	ldr	r3, [pc, #724]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 8000366:	781b      	ldrb	r3, [r3, #0]
 8000368:	001a      	movs	r2, r3
 800036a:	2167      	movs	r1, #103	; 0x67
 800036c:	2068      	movs	r0, #104	; 0x68
 800036e:	f000 ff65 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED9_G         , LED_Power_G);  //write all scaling
 8000372:	4bb3      	ldr	r3, [pc, #716]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 8000374:	781b      	ldrb	r3, [r3, #0]
 8000376:	001a      	movs	r2, r3
 8000378:	2168      	movs	r1, #104	; 0x68
 800037a:	2068      	movs	r0, #104	; 0x68
 800037c:	f000 ff5e 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED9_B         , LED_Power_B);  //write all scaling
 8000380:	4bb0      	ldr	r3, [pc, #704]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000382:	781b      	ldrb	r3, [r3, #0]
 8000384:	001a      	movs	r2, r3
 8000386:	2169      	movs	r1, #105	; 0x69
 8000388:	2068      	movs	r0, #104	; 0x68
 800038a:	f000 ff57 	bl	800123c <I2C_WriteByte>

        //SW6
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED10_R        , LED_Power_R);  //write all scaling
 800038e:	4bab      	ldr	r3, [pc, #684]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	001a      	movs	r2, r3
 8000394:	215e      	movs	r1, #94	; 0x5e
 8000396:	2068      	movs	r0, #104	; 0x68
 8000398:	f000 ff50 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED10_G        , LED_Power_G);  //write all scaling
 800039c:	4ba8      	ldr	r3, [pc, #672]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	001a      	movs	r2, r3
 80003a2:	215f      	movs	r1, #95	; 0x5f
 80003a4:	2068      	movs	r0, #104	; 0x68
 80003a6:	f000 ff49 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED10_B        , LED_Power_B);  //write all scaling
 80003aa:	4ba6      	ldr	r3, [pc, #664]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 80003ac:	781b      	ldrb	r3, [r3, #0]
 80003ae:	001a      	movs	r2, r3
 80003b0:	2160      	movs	r1, #96	; 0x60
 80003b2:	2068      	movs	r0, #104	; 0x68
 80003b4:	f000 ff42 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  Power_LED11_R        , LED_Power_R);  //write all scaling
 80003b8:	4ba0      	ldr	r3, [pc, #640]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	001a      	movs	r2, r3
 80003be:	2161      	movs	r1, #97	; 0x61
 80003c0:	2068      	movs	r0, #104	; 0x68
 80003c2:	f000 ff3b 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED11_G        , LED_Power_G);  //write all scaling
 80003c6:	4b9e      	ldr	r3, [pc, #632]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 80003c8:	781b      	ldrb	r3, [r3, #0]
 80003ca:	001a      	movs	r2, r3
 80003cc:	2162      	movs	r1, #98	; 0x62
 80003ce:	2068      	movs	r0, #104	; 0x68
 80003d0:	f000 ff34 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED11_B        , LED_Power_B);  //write all scaling
 80003d4:	4b9b      	ldr	r3, [pc, #620]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	001a      	movs	r2, r3
 80003da:	2163      	movs	r1, #99	; 0x63
 80003dc:	2068      	movs	r0, #104	; 0x68
 80003de:	f000 ff2d 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  Power_LED12_R        , LED_Power_R);  //write all scaling
 80003e2:	4b96      	ldr	r3, [pc, #600]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	001a      	movs	r2, r3
 80003e8:	2164      	movs	r1, #100	; 0x64
 80003ea:	2068      	movs	r0, #104	; 0x68
 80003ec:	f000 ff26 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED12_G        , LED_Power_G);  //write all scaling
 80003f0:	4b93      	ldr	r3, [pc, #588]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	001a      	movs	r2, r3
 80003f6:	2165      	movs	r1, #101	; 0x65
 80003f8:	2068      	movs	r0, #104	; 0x68
 80003fa:	f000 ff1f 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  Power_LED12_B        , LED_Power_B);  //write all scaling
 80003fe:	4b91      	ldr	r3, [pc, #580]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	001a      	movs	r2, r3
 8000404:	2166      	movs	r1, #102	; 0x66
 8000406:	2068      	movs	r0, #104	; 0x68
 8000408:	f000 ff18 	bl	800123c <I2C_WriteByte>

        //SW5
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED13_R        , LED_Power_R);  //write all scaling
 800040c:	4b8b      	ldr	r3, [pc, #556]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	001a      	movs	r2, r3
 8000412:	214a      	movs	r1, #74	; 0x4a
 8000414:	206e      	movs	r0, #110	; 0x6e
 8000416:	f000 ff11 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED13_B        , LED_Power_B);  //write all scaling
 800041a:	4b8a      	ldr	r3, [pc, #552]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	001a      	movs	r2, r3
 8000420:	214b      	movs	r1, #75	; 0x4b
 8000422:	206e      	movs	r0, #110	; 0x6e
 8000424:	f000 ff0a 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED13_G        , LED_Power_G);  //write all scaling
 8000428:	4b85      	ldr	r3, [pc, #532]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	001a      	movs	r2, r3
 800042e:	214c      	movs	r1, #76	; 0x4c
 8000430:	206e      	movs	r0, #110	; 0x6e
 8000432:	f000 ff03 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED14_R        , LED_Power_R);  //write all scaling
 8000436:	4b81      	ldr	r3, [pc, #516]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	001a      	movs	r2, r3
 800043c:	214d      	movs	r1, #77	; 0x4d
 800043e:	206e      	movs	r0, #110	; 0x6e
 8000440:	f000 fefc 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED14_B        , LED_Power_B);  //write all scaling
 8000444:	4b7f      	ldr	r3, [pc, #508]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	001a      	movs	r2, r3
 800044a:	214e      	movs	r1, #78	; 0x4e
 800044c:	206e      	movs	r0, #110	; 0x6e
 800044e:	f000 fef5 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED14_G        , LED_Power_G);  //write all scaling
 8000452:	4b7b      	ldr	r3, [pc, #492]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	001a      	movs	r2, r3
 8000458:	214f      	movs	r1, #79	; 0x4f
 800045a:	206e      	movs	r0, #110	; 0x6e
 800045c:	f000 feee 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED17_R        , LED_Power_R);  //write all scaling
 8000460:	4b76      	ldr	r3, [pc, #472]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	001a      	movs	r2, r3
 8000466:	2150      	movs	r1, #80	; 0x50
 8000468:	206e      	movs	r0, #110	; 0x6e
 800046a:	f000 fee7 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED17_B        , LED_Power_B);  //write all scaling
 800046e:	4b75      	ldr	r3, [pc, #468]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	001a      	movs	r2, r3
 8000474:	2151      	movs	r1, #81	; 0x51
 8000476:	206e      	movs	r0, #110	; 0x6e
 8000478:	f000 fee0 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED17_G        , LED_Power_G);  //write all scaling
 800047c:	4b70      	ldr	r3, [pc, #448]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	001a      	movs	r2, r3
 8000482:	2152      	movs	r1, #82	; 0x52
 8000484:	206e      	movs	r0, #110	; 0x6e
 8000486:	f000 fed9 	bl	800123c <I2C_WriteByte>

        //SW4
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED15_R        , LED_Power_R);  //write all scaling
 800048a:	4b6c      	ldr	r3, [pc, #432]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	001a      	movs	r2, r3
 8000490:	2153      	movs	r1, #83	; 0x53
 8000492:	206e      	movs	r0, #110	; 0x6e
 8000494:	f000 fed2 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED15_B        , LED_Power_B);  //write all scaling
 8000498:	4b6a      	ldr	r3, [pc, #424]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	001a      	movs	r2, r3
 800049e:	2154      	movs	r1, #84	; 0x54
 80004a0:	206e      	movs	r0, #110	; 0x6e
 80004a2:	f000 fecb 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED15_G        , LED_Power_G);  //write all scaling
 80004a6:	4b66      	ldr	r3, [pc, #408]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	001a      	movs	r2, r3
 80004ac:	2155      	movs	r1, #85	; 0x55
 80004ae:	206e      	movs	r0, #110	; 0x6e
 80004b0:	f000 fec4 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED16_R        , LED_Power_R);  //write all scaling
 80004b4:	4b61      	ldr	r3, [pc, #388]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	001a      	movs	r2, r3
 80004ba:	2156      	movs	r1, #86	; 0x56
 80004bc:	206e      	movs	r0, #110	; 0x6e
 80004be:	f000 febd 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED16_B        , LED_Power_B);  //write all scaling
 80004c2:	4b60      	ldr	r3, [pc, #384]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	001a      	movs	r2, r3
 80004c8:	2157      	movs	r1, #87	; 0x57
 80004ca:	206e      	movs	r0, #110	; 0x6e
 80004cc:	f000 feb6 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED16_G        , LED_Power_G);  //write all scaling
 80004d0:	4b5b      	ldr	r3, [pc, #364]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	001a      	movs	r2, r3
 80004d6:	2158      	movs	r1, #88	; 0x58
 80004d8:	206e      	movs	r0, #110	; 0x6e
 80004da:	f000 feaf 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED18_R        , LED_Power_R);  //write all scaling
 80004de:	4b57      	ldr	r3, [pc, #348]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	001a      	movs	r2, r3
 80004e4:	2159      	movs	r1, #89	; 0x59
 80004e6:	206e      	movs	r0, #110	; 0x6e
 80004e8:	f000 fea8 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED18_B        , LED_Power_B);  //write all scaling
 80004ec:	4b55      	ldr	r3, [pc, #340]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	001a      	movs	r2, r3
 80004f2:	215a      	movs	r1, #90	; 0x5a
 80004f4:	206e      	movs	r0, #110	; 0x6e
 80004f6:	f000 fea1 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED18_G        , LED_Power_G);  //write all scaling
 80004fa:	4b51      	ldr	r3, [pc, #324]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	001a      	movs	r2, r3
 8000500:	215b      	movs	r1, #91	; 0x5b
 8000502:	206e      	movs	r0, #110	; 0x6e
 8000504:	f000 fe9a 	bl	800123c <I2C_WriteByte>

        //SW3
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED19_R        , LED_Power_R);  //write all scaling
 8000508:	4b4c      	ldr	r3, [pc, #304]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	001a      	movs	r2, r3
 800050e:	215c      	movs	r1, #92	; 0x5c
 8000510:	206e      	movs	r0, #110	; 0x6e
 8000512:	f000 fe93 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED19_B        , LED_Power_B);  //write all scaling
 8000516:	4b4b      	ldr	r3, [pc, #300]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	001a      	movs	r2, r3
 800051c:	215d      	movs	r1, #93	; 0x5d
 800051e:	206e      	movs	r0, #110	; 0x6e
 8000520:	f000 fe8c 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED19_G        , LED_Power_G);  //write all scaling
 8000524:	4b46      	ldr	r3, [pc, #280]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	001a      	movs	r2, r3
 800052a:	215e      	movs	r1, #94	; 0x5e
 800052c:	206e      	movs	r0, #110	; 0x6e
 800052e:	f000 fe85 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED20_R        , LED_Power_R);  //write all scaling
 8000532:	4b42      	ldr	r3, [pc, #264]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	001a      	movs	r2, r3
 8000538:	215f      	movs	r1, #95	; 0x5f
 800053a:	206e      	movs	r0, #110	; 0x6e
 800053c:	f000 fe7e 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED20_B        , LED_Power_B);  //write all scaling
 8000540:	4b40      	ldr	r3, [pc, #256]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	2160      	movs	r1, #96	; 0x60
 8000548:	206e      	movs	r0, #110	; 0x6e
 800054a:	f000 fe77 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED20_G        , LED_Power_G);  //write all scaling
 800054e:	4b3c      	ldr	r3, [pc, #240]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	001a      	movs	r2, r3
 8000554:	2161      	movs	r1, #97	; 0x61
 8000556:	206e      	movs	r0, #110	; 0x6e
 8000558:	f000 fe70 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, Power_LED21_R        , LED_Power_R);  //write all scaling
 800055c:	4b37      	ldr	r3, [pc, #220]	; (800063c <Hal_LED_Driver_Initial+0x410>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	001a      	movs	r2, r3
 8000562:	2162      	movs	r1, #98	; 0x62
 8000564:	206e      	movs	r0, #110	; 0x6e
 8000566:	f000 fe69 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED21_B        , LED_Power_B);  //write all scaling
 800056a:	4b36      	ldr	r3, [pc, #216]	; (8000644 <Hal_LED_Driver_Initial+0x418>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	001a      	movs	r2, r3
 8000570:	2163      	movs	r1, #99	; 0x63
 8000572:	206e      	movs	r0, #110	; 0x6e
 8000574:	f000 fe62 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, Power_LED21_G        , LED_Power_G);  //write all scaling
 8000578:	4b31      	ldr	r3, [pc, #196]	; (8000640 <Hal_LED_Driver_Initial+0x414>)
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	001a      	movs	r2, r3
 800057e:	2164      	movs	r1, #100	; 0x64
 8000580:	206e      	movs	r0, #110	; 0x6e
 8000582:	f000 fe5b 	bl	800123c <I2C_WriteByte>

    //Clear all PWM H/L value
    if(1) {
        static const unsigned char LED_Driver_PWM_Value = 0;  //MIN:0, MAX:255

        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no1 , LED_Driver_PWM_Value);  //write all scaling
 8000586:	4b30      	ldr	r3, [pc, #192]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	001a      	movs	r2, r3
 800058c:	2101      	movs	r1, #1
 800058e:	2068      	movs	r0, #104	; 0x68
 8000590:	f000 fe54 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no2 , LED_Driver_PWM_Value);  //write all scaling
 8000594:	4b2c      	ldr	r3, [pc, #176]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	001a      	movs	r2, r3
 800059a:	2103      	movs	r1, #3
 800059c:	2068      	movs	r0, #104	; 0x68
 800059e:	f000 fe4d 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no3 , LED_Driver_PWM_Value);  //write all scaling
 80005a2:	4b29      	ldr	r3, [pc, #164]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	001a      	movs	r2, r3
 80005a8:	2105      	movs	r1, #5
 80005aa:	2068      	movs	r0, #104	; 0x68
 80005ac:	f000 fe46 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no4 , LED_Driver_PWM_Value);  //write all scaling
 80005b0:	4b25      	ldr	r3, [pc, #148]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	001a      	movs	r2, r3
 80005b6:	2107      	movs	r1, #7
 80005b8:	2068      	movs	r0, #104	; 0x68
 80005ba:	f000 fe3f 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no5 , LED_Driver_PWM_Value);  //write all scaling
 80005be:	4b22      	ldr	r3, [pc, #136]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	001a      	movs	r2, r3
 80005c4:	2109      	movs	r1, #9
 80005c6:	2068      	movs	r0, #104	; 0x68
 80005c8:	f000 fe38 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no6 , LED_Driver_PWM_Value);  //write all scaling
 80005cc:	4b1e      	ldr	r3, [pc, #120]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	001a      	movs	r2, r3
 80005d2:	210b      	movs	r1, #11
 80005d4:	2068      	movs	r0, #104	; 0x68
 80005d6:	f000 fe31 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no7 , LED_Driver_PWM_Value);  //write all scaling
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	001a      	movs	r2, r3
 80005e0:	210d      	movs	r1, #13
 80005e2:	2068      	movs	r0, #104	; 0x68
 80005e4:	f000 fe2a 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no8 , LED_Driver_PWM_Value);  //write all scaling
 80005e8:	4b17      	ldr	r3, [pc, #92]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	001a      	movs	r2, r3
 80005ee:	210f      	movs	r1, #15
 80005f0:	2068      	movs	r0, #104	; 0x68
 80005f2:	f000 fe23 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no9 , LED_Driver_PWM_Value);  //write all scaling
 80005f6:	4b14      	ldr	r3, [pc, #80]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 80005f8:	781b      	ldrb	r3, [r3, #0]
 80005fa:	001a      	movs	r2, r3
 80005fc:	2111      	movs	r1, #17
 80005fe:	2068      	movs	r0, #104	; 0x68
 8000600:	f000 fe1c 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no10, LED_Driver_PWM_Value);  //write all scaling
 8000604:	4b10      	ldr	r3, [pc, #64]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	001a      	movs	r2, r3
 800060a:	2113      	movs	r1, #19
 800060c:	2068      	movs	r0, #104	; 0x68
 800060e:	f000 fe15 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no1 , LED_Driver_PWM_Value);  //write all scaling
 8000612:	4b0d      	ldr	r3, [pc, #52]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	001a      	movs	r2, r3
 8000618:	2115      	movs	r1, #21
 800061a:	2068      	movs	r0, #104	; 0x68
 800061c:	f000 fe0e 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no2 , LED_Driver_PWM_Value);  //write all scaling
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <Hal_LED_Driver_Initial+0x41c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	001a      	movs	r2, r3
 8000626:	2117      	movs	r1, #23
 8000628:	e010      	b.n	800064c <Hal_LED_Driver_Initial+0x420>
 800062a:	46c0      	nop			; (mov r8, r8)
 800062c:	0800917e 	.word	0x0800917e
 8000630:	0800917f 	.word	0x0800917f
 8000634:	08009180 	.word	0x08009180
 8000638:	08009181 	.word	0x08009181
 800063c:	08009182 	.word	0x08009182
 8000640:	08009183 	.word	0x08009183
 8000644:	08009184 	.word	0x08009184
 8000648:	08009185 	.word	0x08009185
 800064c:	2068      	movs	r0, #104	; 0x68
 800064e:	f000 fdf5 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no3 , LED_Driver_PWM_Value);  //write all scaling
 8000652:	4bb0      	ldr	r3, [pc, #704]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	001a      	movs	r2, r3
 8000658:	2119      	movs	r1, #25
 800065a:	2068      	movs	r0, #104	; 0x68
 800065c:	f000 fdee 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no4 , LED_Driver_PWM_Value);  //write all scaling
 8000660:	4bac      	ldr	r3, [pc, #688]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	001a      	movs	r2, r3
 8000666:	211b      	movs	r1, #27
 8000668:	2068      	movs	r0, #104	; 0x68
 800066a:	f000 fde7 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no5 , LED_Driver_PWM_Value);  //write all scaling
 800066e:	4ba9      	ldr	r3, [pc, #676]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	001a      	movs	r2, r3
 8000674:	211d      	movs	r1, #29
 8000676:	2068      	movs	r0, #104	; 0x68
 8000678:	f000 fde0 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no6 , LED_Driver_PWM_Value);  //write all scaling
 800067c:	4ba5      	ldr	r3, [pc, #660]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	001a      	movs	r2, r3
 8000682:	211f      	movs	r1, #31
 8000684:	2068      	movs	r0, #104	; 0x68
 8000686:	f000 fdd9 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no7 , LED_Driver_PWM_Value);  //write all scaling
 800068a:	4ba2      	ldr	r3, [pc, #648]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	001a      	movs	r2, r3
 8000690:	2121      	movs	r1, #33	; 0x21
 8000692:	2068      	movs	r0, #104	; 0x68
 8000694:	f000 fdd2 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no8 , LED_Driver_PWM_Value);  //write all scaling
 8000698:	4b9e      	ldr	r3, [pc, #632]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	001a      	movs	r2, r3
 800069e:	2123      	movs	r1, #35	; 0x23
 80006a0:	2068      	movs	r0, #104	; 0x68
 80006a2:	f000 fdcb 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no9 , LED_Driver_PWM_Value);  //write all scaling
 80006a6:	4b9b      	ldr	r3, [pc, #620]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	001a      	movs	r2, r3
 80006ac:	2125      	movs	r1, #37	; 0x25
 80006ae:	2068      	movs	r0, #104	; 0x68
 80006b0:	f000 fdc4 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no10, LED_Driver_PWM_Value);  //write all scaling
 80006b4:	4b97      	ldr	r3, [pc, #604]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	001a      	movs	r2, r3
 80006ba:	2127      	movs	r1, #39	; 0x27
 80006bc:	2068      	movs	r0, #104	; 0x68
 80006be:	f000 fdbd 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED9_R         , LED_Driver_PWM_Value);  //write all scaling
 80006c2:	4b94      	ldr	r3, [pc, #592]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	001a      	movs	r2, r3
 80006c8:	213b      	movs	r1, #59	; 0x3b
 80006ca:	2068      	movs	r0, #104	; 0x68
 80006cc:	f000 fdb6 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED9_G         , LED_Driver_PWM_Value);  //write all scaling
 80006d0:	4b90      	ldr	r3, [pc, #576]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	001a      	movs	r2, r3
 80006d6:	213d      	movs	r1, #61	; 0x3d
 80006d8:	2068      	movs	r0, #104	; 0x68
 80006da:	f000 fdaf 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED9_B         , LED_Driver_PWM_Value);  //write all scaling
 80006de:	4b8d      	ldr	r3, [pc, #564]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	001a      	movs	r2, r3
 80006e4:	213f      	movs	r1, #63	; 0x3f
 80006e6:	2068      	movs	r0, #104	; 0x68
 80006e8:	f000 fda8 	bl	800123c <I2C_WriteByte>

        //SW6
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_R        , LED_Driver_PWM_Value);  //write all scaling
 80006ec:	4b89      	ldr	r3, [pc, #548]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	001a      	movs	r2, r3
 80006f2:	2129      	movs	r1, #41	; 0x29
 80006f4:	2068      	movs	r0, #104	; 0x68
 80006f6:	f000 fda1 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_G        , LED_Driver_PWM_Value);  //write all scaling
 80006fa:	4b86      	ldr	r3, [pc, #536]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	001a      	movs	r2, r3
 8000700:	212b      	movs	r1, #43	; 0x2b
 8000702:	2068      	movs	r0, #104	; 0x68
 8000704:	f000 fd9a 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_B        , LED_Driver_PWM_Value);  //write all scaling
 8000708:	4b82      	ldr	r3, [pc, #520]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	001a      	movs	r2, r3
 800070e:	212d      	movs	r1, #45	; 0x2d
 8000710:	2068      	movs	r0, #104	; 0x68
 8000712:	f000 fd93 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_R        , LED_Driver_PWM_Value);  //write all scaling
 8000716:	4b7f      	ldr	r3, [pc, #508]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	001a      	movs	r2, r3
 800071c:	212f      	movs	r1, #47	; 0x2f
 800071e:	2068      	movs	r0, #104	; 0x68
 8000720:	f000 fd8c 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_G        , LED_Driver_PWM_Value);  //write all scaling
 8000724:	4b7b      	ldr	r3, [pc, #492]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	001a      	movs	r2, r3
 800072a:	2131      	movs	r1, #49	; 0x31
 800072c:	2068      	movs	r0, #104	; 0x68
 800072e:	f000 fd85 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_B        , LED_Driver_PWM_Value);  //write all scaling
 8000732:	4b78      	ldr	r3, [pc, #480]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000734:	781b      	ldrb	r3, [r3, #0]
 8000736:	001a      	movs	r2, r3
 8000738:	2133      	movs	r1, #51	; 0x33
 800073a:	2068      	movs	r0, #104	; 0x68
 800073c:	f000 fd7e 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_R        , LED_Driver_PWM_Value);  //write all scaling
 8000740:	4b74      	ldr	r3, [pc, #464]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	001a      	movs	r2, r3
 8000746:	2135      	movs	r1, #53	; 0x35
 8000748:	2068      	movs	r0, #104	; 0x68
 800074a:	f000 fd77 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_G        , LED_Driver_PWM_Value);  //write all scaling
 800074e:	4b71      	ldr	r3, [pc, #452]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	001a      	movs	r2, r3
 8000754:	2137      	movs	r1, #55	; 0x37
 8000756:	2068      	movs	r0, #104	; 0x68
 8000758:	f000 fd70 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_B        , LED_Driver_PWM_Value);  //write all scaling
 800075c:	4b6d      	ldr	r3, [pc, #436]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	001a      	movs	r2, r3
 8000762:	2139      	movs	r1, #57	; 0x39
 8000764:	2068      	movs	r0, #104	; 0x68
 8000766:	f000 fd69 	bl	800123c <I2C_WriteByte>

        //SW5
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_R        , LED_Driver_PWM_Value);  //write all scaling
 800076a:	4b6a      	ldr	r3, [pc, #424]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	001a      	movs	r2, r3
 8000770:	2101      	movs	r1, #1
 8000772:	206e      	movs	r0, #110	; 0x6e
 8000774:	f000 fd62 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_B        , LED_Driver_PWM_Value);  //write all scaling
 8000778:	4b66      	ldr	r3, [pc, #408]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	001a      	movs	r2, r3
 800077e:	2103      	movs	r1, #3
 8000780:	206e      	movs	r0, #110	; 0x6e
 8000782:	f000 fd5b 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_G        , LED_Driver_PWM_Value);  //write all scaling
 8000786:	4b63      	ldr	r3, [pc, #396]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	001a      	movs	r2, r3
 800078c:	2105      	movs	r1, #5
 800078e:	206e      	movs	r0, #110	; 0x6e
 8000790:	f000 fd54 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_R        , LED_Driver_PWM_Value);  //write all scaling
 8000794:	4b5f      	ldr	r3, [pc, #380]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000796:	781b      	ldrb	r3, [r3, #0]
 8000798:	001a      	movs	r2, r3
 800079a:	2107      	movs	r1, #7
 800079c:	206e      	movs	r0, #110	; 0x6e
 800079e:	f000 fd4d 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_B        , LED_Driver_PWM_Value);  //write all scaling
 80007a2:	4b5c      	ldr	r3, [pc, #368]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	001a      	movs	r2, r3
 80007a8:	2109      	movs	r1, #9
 80007aa:	206e      	movs	r0, #110	; 0x6e
 80007ac:	f000 fd46 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_G        , LED_Driver_PWM_Value);  //write all scaling
 80007b0:	4b58      	ldr	r3, [pc, #352]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	001a      	movs	r2, r3
 80007b6:	210b      	movs	r1, #11
 80007b8:	206e      	movs	r0, #110	; 0x6e
 80007ba:	f000 fd3f 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_R        , LED_Driver_PWM_Value);  //write all scaling
 80007be:	4b55      	ldr	r3, [pc, #340]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	001a      	movs	r2, r3
 80007c4:	210d      	movs	r1, #13
 80007c6:	206e      	movs	r0, #110	; 0x6e
 80007c8:	f000 fd38 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_B        , LED_Driver_PWM_Value);  //write all scaling
 80007cc:	4b51      	ldr	r3, [pc, #324]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	001a      	movs	r2, r3
 80007d2:	210f      	movs	r1, #15
 80007d4:	206e      	movs	r0, #110	; 0x6e
 80007d6:	f000 fd31 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_G        , LED_Driver_PWM_Value);  //write all scaling
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	001a      	movs	r2, r3
 80007e0:	2111      	movs	r1, #17
 80007e2:	206e      	movs	r0, #110	; 0x6e
 80007e4:	f000 fd2a 	bl	800123c <I2C_WriteByte>

        //SW4
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_R        , LED_Driver_PWM_Value);  //write all scaling
 80007e8:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	001a      	movs	r2, r3
 80007ee:	2113      	movs	r1, #19
 80007f0:	206e      	movs	r0, #110	; 0x6e
 80007f2:	f000 fd23 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_B        , LED_Driver_PWM_Value);  //write all scaling
 80007f6:	4b47      	ldr	r3, [pc, #284]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	001a      	movs	r2, r3
 80007fc:	2115      	movs	r1, #21
 80007fe:	206e      	movs	r0, #110	; 0x6e
 8000800:	f000 fd1c 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_G        , LED_Driver_PWM_Value);  //write all scaling
 8000804:	4b43      	ldr	r3, [pc, #268]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	001a      	movs	r2, r3
 800080a:	2117      	movs	r1, #23
 800080c:	206e      	movs	r0, #110	; 0x6e
 800080e:	f000 fd15 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_R        , LED_Driver_PWM_Value);  //write all scaling
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	001a      	movs	r2, r3
 8000818:	2119      	movs	r1, #25
 800081a:	206e      	movs	r0, #110	; 0x6e
 800081c:	f000 fd0e 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_B        , LED_Driver_PWM_Value);  //write all scaling
 8000820:	4b3c      	ldr	r3, [pc, #240]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	001a      	movs	r2, r3
 8000826:	211b      	movs	r1, #27
 8000828:	206e      	movs	r0, #110	; 0x6e
 800082a:	f000 fd07 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_G        , LED_Driver_PWM_Value);  //write all scaling
 800082e:	4b39      	ldr	r3, [pc, #228]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	001a      	movs	r2, r3
 8000834:	211d      	movs	r1, #29
 8000836:	206e      	movs	r0, #110	; 0x6e
 8000838:	f000 fd00 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_R        , LED_Driver_PWM_Value);  //write all scaling
 800083c:	4b35      	ldr	r3, [pc, #212]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	001a      	movs	r2, r3
 8000842:	211f      	movs	r1, #31
 8000844:	206e      	movs	r0, #110	; 0x6e
 8000846:	f000 fcf9 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_B        , LED_Driver_PWM_Value);  //write all scaling
 800084a:	4b32      	ldr	r3, [pc, #200]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	001a      	movs	r2, r3
 8000850:	2121      	movs	r1, #33	; 0x21
 8000852:	206e      	movs	r0, #110	; 0x6e
 8000854:	f000 fcf2 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_G        , LED_Driver_PWM_Value);  //write all scaling
 8000858:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	001a      	movs	r2, r3
 800085e:	2123      	movs	r1, #35	; 0x23
 8000860:	206e      	movs	r0, #110	; 0x6e
 8000862:	f000 fceb 	bl	800123c <I2C_WriteByte>

        //SW3
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_R        , LED_Driver_PWM_Value);  //write all scaling
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	001a      	movs	r2, r3
 800086c:	2125      	movs	r1, #37	; 0x25
 800086e:	206e      	movs	r0, #110	; 0x6e
 8000870:	f000 fce4 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_B        , LED_Driver_PWM_Value);  //write all scaling
 8000874:	4b27      	ldr	r3, [pc, #156]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	001a      	movs	r2, r3
 800087a:	2127      	movs	r1, #39	; 0x27
 800087c:	206e      	movs	r0, #110	; 0x6e
 800087e:	f000 fcdd 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_G        , LED_Driver_PWM_Value);  //write all scaling
 8000882:	4b24      	ldr	r3, [pc, #144]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	001a      	movs	r2, r3
 8000888:	2129      	movs	r1, #41	; 0x29
 800088a:	206e      	movs	r0, #110	; 0x6e
 800088c:	f000 fcd6 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_R        , LED_Driver_PWM_Value);  //write all scaling
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	001a      	movs	r2, r3
 8000896:	212b      	movs	r1, #43	; 0x2b
 8000898:	206e      	movs	r0, #110	; 0x6e
 800089a:	f000 fccf 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_B        , LED_Driver_PWM_Value);  //write all scaling
 800089e:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	001a      	movs	r2, r3
 80008a4:	212d      	movs	r1, #45	; 0x2d
 80008a6:	206e      	movs	r0, #110	; 0x6e
 80008a8:	f000 fcc8 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_G        , LED_Driver_PWM_Value);  //write all scaling
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	001a      	movs	r2, r3
 80008b2:	212f      	movs	r1, #47	; 0x2f
 80008b4:	206e      	movs	r0, #110	; 0x6e
 80008b6:	f000 fcc1 	bl	800123c <I2C_WriteByte>

        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_R        , LED_Driver_PWM_Value);  //write all scaling
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	001a      	movs	r2, r3
 80008c0:	2131      	movs	r1, #49	; 0x31
 80008c2:	206e      	movs	r0, #110	; 0x6e
 80008c4:	f000 fcba 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_B        , LED_Driver_PWM_Value);  //write all scaling
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	001a      	movs	r2, r3
 80008ce:	2133      	movs	r1, #51	; 0x33
 80008d0:	206e      	movs	r0, #110	; 0x6e
 80008d2:	f000 fcb3 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_G        , LED_Driver_PWM_Value);  //write all scaling
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <Hal_LED_Driver_Initial+0x6e8>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	001a      	movs	r2, r3
 80008dc:	2135      	movs	r1, #53	; 0x35
 80008de:	206e      	movs	r0, #110	; 0x6e
 80008e0:	f000 fcac 	bl	800123c <I2C_WriteByte>
    }

    //Set Power and PWM value and Save
    I2C_WriteByte(AD_SEL1_LOW,  0x49, 0x00);   //update PWM & congtrol register
 80008e4:	2200      	movs	r2, #0
 80008e6:	2149      	movs	r1, #73	; 0x49
 80008e8:	2068      	movs	r0, #104	; 0x68
 80008ea:	f000 fca7 	bl	800123c <I2C_WriteByte>
    I2C_WriteByte(AD_SEL1_HIGH, 0x49, 0x00);   //update PWM & congtrol register
 80008ee:	2200      	movs	r2, #0
 80008f0:	2149      	movs	r1, #73	; 0x49
 80008f2:	206e      	movs	r0, #110	; 0x6e
 80008f4:	f000 fca2 	bl	800123c <I2C_WriteByte>

    //Configure 16MHz, 8bits PWM, Normal power on mode
    I2C_WriteByte(AD_SEL1_LOW,  0x00, 0x01);   //normal operation
 80008f8:	2201      	movs	r2, #1
 80008fa:	2100      	movs	r1, #0
 80008fc:	2068      	movs	r0, #104	; 0x68
 80008fe:	f000 fc9d 	bl	800123c <I2C_WriteByte>
    I2C_WriteByte(AD_SEL1_HIGH, 0x00, 0x01);   //normal operation
 8000902:	2201      	movs	r2, #1
 8000904:	2100      	movs	r1, #0
 8000906:	206e      	movs	r0, #110	; 0x6e
 8000908:	f000 fc98 	bl	800123c <I2C_WriteByte>
}
 800090c:	46c0      	nop			; (mov r8, r8)
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	08009185 	.word	0x08009185

08000918 <Task_LED_Driver>:
/*----------------------------------------------------------------------------*/
void Task_LED_Driver(void) {
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
    char isUpdate = 0;
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]

    if(1) {  //array LED
        static xu_arrayLED arrayLED_Save[2] = {0};

        if(arrayLED_Save[0].u16Byte != arrayLED[0]) {
 8000924:	4bcb      	ldr	r3, [pc, #812]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000926:	881a      	ldrh	r2, [r3, #0]
 8000928:	4bcb      	ldr	r3, [pc, #812]	; (8000c58 <Task_LED_Driver+0x340>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	429a      	cmp	r2, r3
 800092e:	d100      	bne.n	8000932 <Task_LED_Driver+0x1a>
 8000930:	e09c      	b.n	8000a6c <Task_LED_Driver+0x154>
            arrayLED_Save[0].u16Byte = arrayLED[0];
 8000932:	4bc9      	ldr	r3, [pc, #804]	; (8000c58 <Task_LED_Driver+0x340>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	4bc7      	ldr	r3, [pc, #796]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000938:	801a      	strh	r2, [r3, #0]

            isUpdate = 1;
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	2201      	movs	r2, #1
 800093e:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no1 , (arrayLED_Save[0].sb.bit0)? 100:0 );  //write all scaling
 8000940:	4bc4      	ldr	r3, [pc, #784]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2201      	movs	r2, #1
 8000946:	4013      	ands	r3, r2
 8000948:	b2db      	uxtb	r3, r3
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <Task_LED_Driver+0x3a>
 800094e:	2364      	movs	r3, #100	; 0x64
 8000950:	e000      	b.n	8000954 <Task_LED_Driver+0x3c>
 8000952:	2300      	movs	r3, #0
 8000954:	001a      	movs	r2, r3
 8000956:	2115      	movs	r1, #21
 8000958:	2068      	movs	r0, #104	; 0x68
 800095a:	f000 fc6f 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no2 , (arrayLED_Save[0].sb.bit1)? 100:0 );  //write all scaling
 800095e:	4bbd      	ldr	r3, [pc, #756]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2202      	movs	r2, #2
 8000964:	4013      	ands	r3, r2
 8000966:	b2db      	uxtb	r3, r3
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <Task_LED_Driver+0x58>
 800096c:	2364      	movs	r3, #100	; 0x64
 800096e:	e000      	b.n	8000972 <Task_LED_Driver+0x5a>
 8000970:	2300      	movs	r3, #0
 8000972:	001a      	movs	r2, r3
 8000974:	2117      	movs	r1, #23
 8000976:	2068      	movs	r0, #104	; 0x68
 8000978:	f000 fc60 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no3 , (arrayLED_Save[0].sb.bit2)? 100:0 );  //write all scaling
 800097c:	4bb5      	ldr	r3, [pc, #724]	; (8000c54 <Task_LED_Driver+0x33c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2204      	movs	r2, #4
 8000982:	4013      	ands	r3, r2
 8000984:	b2db      	uxtb	r3, r3
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <Task_LED_Driver+0x76>
 800098a:	2364      	movs	r3, #100	; 0x64
 800098c:	e000      	b.n	8000990 <Task_LED_Driver+0x78>
 800098e:	2300      	movs	r3, #0
 8000990:	001a      	movs	r2, r3
 8000992:	2119      	movs	r1, #25
 8000994:	2068      	movs	r0, #104	; 0x68
 8000996:	f000 fc51 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no4 , (arrayLED_Save[0].sb.bit3)? 100:0 );  //write all scaling
 800099a:	4bae      	ldr	r3, [pc, #696]	; (8000c54 <Task_LED_Driver+0x33c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2208      	movs	r2, #8
 80009a0:	4013      	ands	r3, r2
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <Task_LED_Driver+0x94>
 80009a8:	2364      	movs	r3, #100	; 0x64
 80009aa:	e000      	b.n	80009ae <Task_LED_Driver+0x96>
 80009ac:	2300      	movs	r3, #0
 80009ae:	001a      	movs	r2, r3
 80009b0:	211b      	movs	r1, #27
 80009b2:	2068      	movs	r0, #104	; 0x68
 80009b4:	f000 fc42 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no5 , (arrayLED_Save[0].sb.bit4)? 100:0 );  //write all scaling
 80009b8:	4ba6      	ldr	r3, [pc, #664]	; (8000c54 <Task_LED_Driver+0x33c>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2210      	movs	r2, #16
 80009be:	4013      	ands	r3, r2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <Task_LED_Driver+0xb2>
 80009c6:	2364      	movs	r3, #100	; 0x64
 80009c8:	e000      	b.n	80009cc <Task_LED_Driver+0xb4>
 80009ca:	2300      	movs	r3, #0
 80009cc:	001a      	movs	r2, r3
 80009ce:	211d      	movs	r1, #29
 80009d0:	2068      	movs	r0, #104	; 0x68
 80009d2:	f000 fc33 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no6 , (arrayLED_Save[0].sb.bit5)? 100:0 );  //write all scaling
 80009d6:	4b9f      	ldr	r3, [pc, #636]	; (8000c54 <Task_LED_Driver+0x33c>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	2220      	movs	r2, #32
 80009dc:	4013      	ands	r3, r2
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <Task_LED_Driver+0xd0>
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	e000      	b.n	80009ea <Task_LED_Driver+0xd2>
 80009e8:	2300      	movs	r3, #0
 80009ea:	001a      	movs	r2, r3
 80009ec:	211f      	movs	r1, #31
 80009ee:	2068      	movs	r0, #104	; 0x68
 80009f0:	f000 fc24 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no7 , (arrayLED_Save[0].sb.bit6)? 100:0 );  //write all scaling
 80009f4:	4b97      	ldr	r3, [pc, #604]	; (8000c54 <Task_LED_Driver+0x33c>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2240      	movs	r2, #64	; 0x40
 80009fa:	4013      	ands	r3, r2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <Task_LED_Driver+0xee>
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	e000      	b.n	8000a08 <Task_LED_Driver+0xf0>
 8000a06:	2300      	movs	r3, #0
 8000a08:	001a      	movs	r2, r3
 8000a0a:	2121      	movs	r1, #33	; 0x21
 8000a0c:	2068      	movs	r0, #104	; 0x68
 8000a0e:	f000 fc15 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no8 , (arrayLED_Save[0].sb.bit7)? 100:0 );  //write all scaling
 8000a12:	4b90      	ldr	r3, [pc, #576]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	227f      	movs	r2, #127	; 0x7f
 8000a18:	4393      	bics	r3, r2
 8000a1a:	b2db      	uxtb	r3, r3
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <Task_LED_Driver+0x10c>
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	e000      	b.n	8000a26 <Task_LED_Driver+0x10e>
 8000a24:	2300      	movs	r3, #0
 8000a26:	001a      	movs	r2, r3
 8000a28:	2123      	movs	r1, #35	; 0x23
 8000a2a:	2068      	movs	r0, #104	; 0x68
 8000a2c:	f000 fc06 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no9 , (arrayLED_Save[0].sb.bit8)? 100:0 );  //write all scaling
 8000a30:	4b88      	ldr	r3, [pc, #544]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a32:	785b      	ldrb	r3, [r3, #1]
 8000a34:	2201      	movs	r2, #1
 8000a36:	4013      	ands	r3, r2
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <Task_LED_Driver+0x12a>
 8000a3e:	2364      	movs	r3, #100	; 0x64
 8000a40:	e000      	b.n	8000a44 <Task_LED_Driver+0x12c>
 8000a42:	2300      	movs	r3, #0
 8000a44:	001a      	movs	r2, r3
 8000a46:	2125      	movs	r1, #37	; 0x25
 8000a48:	2068      	movs	r0, #104	; 0x68
 8000a4a:	f000 fbf7 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED1_no10, (arrayLED_Save[0].sb.bit9)? 100:0 );  //write all scaling
 8000a4e:	4b81      	ldr	r3, [pc, #516]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	2202      	movs	r2, #2
 8000a54:	4013      	ands	r3, r2
 8000a56:	b2db      	uxtb	r3, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <Task_LED_Driver+0x148>
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	e000      	b.n	8000a62 <Task_LED_Driver+0x14a>
 8000a60:	2300      	movs	r3, #0
 8000a62:	001a      	movs	r2, r3
 8000a64:	2127      	movs	r1, #39	; 0x27
 8000a66:	2068      	movs	r0, #104	; 0x68
 8000a68:	f000 fbe8 	bl	800123c <I2C_WriteByte>
        }

        if(arrayLED_Save[1].u16Byte != arrayLED[1]) {
 8000a6c:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a6e:	889a      	ldrh	r2, [r3, #4]
 8000a70:	4b79      	ldr	r3, [pc, #484]	; (8000c58 <Task_LED_Driver+0x340>)
 8000a72:	885b      	ldrh	r3, [r3, #2]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d100      	bne.n	8000a7a <Task_LED_Driver+0x162>
 8000a78:	e09c      	b.n	8000bb4 <Task_LED_Driver+0x29c>
            arrayLED_Save[1].u16Byte = arrayLED[1];
 8000a7a:	4b77      	ldr	r3, [pc, #476]	; (8000c58 <Task_LED_Driver+0x340>)
 8000a7c:	885a      	ldrh	r2, [r3, #2]
 8000a7e:	4b75      	ldr	r3, [pc, #468]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a80:	809a      	strh	r2, [r3, #4]

            isUpdate = 1;
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	2201      	movs	r2, #1
 8000a86:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no1 , (arrayLED_Save[1].sb.bit0)? 100:0 );  //write all scaling
 8000a88:	4b72      	ldr	r3, [pc, #456]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000a8a:	791b      	ldrb	r3, [r3, #4]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	4013      	ands	r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <Task_LED_Driver+0x182>
 8000a96:	2364      	movs	r3, #100	; 0x64
 8000a98:	e000      	b.n	8000a9c <Task_LED_Driver+0x184>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	001a      	movs	r2, r3
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	2068      	movs	r0, #104	; 0x68
 8000aa2:	f000 fbcb 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no2 , (arrayLED_Save[1].sb.bit1)? 100:0 );  //write all scaling
 8000aa6:	4b6b      	ldr	r3, [pc, #428]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000aa8:	791b      	ldrb	r3, [r3, #4]
 8000aaa:	2202      	movs	r2, #2
 8000aac:	4013      	ands	r3, r2
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <Task_LED_Driver+0x1a0>
 8000ab4:	2364      	movs	r3, #100	; 0x64
 8000ab6:	e000      	b.n	8000aba <Task_LED_Driver+0x1a2>
 8000ab8:	2300      	movs	r3, #0
 8000aba:	001a      	movs	r2, r3
 8000abc:	2103      	movs	r1, #3
 8000abe:	2068      	movs	r0, #104	; 0x68
 8000ac0:	f000 fbbc 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no3 , (arrayLED_Save[1].sb.bit2)? 100:0 );  //write all scaling
 8000ac4:	4b63      	ldr	r3, [pc, #396]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	2204      	movs	r2, #4
 8000aca:	4013      	ands	r3, r2
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <Task_LED_Driver+0x1be>
 8000ad2:	2364      	movs	r3, #100	; 0x64
 8000ad4:	e000      	b.n	8000ad8 <Task_LED_Driver+0x1c0>
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	001a      	movs	r2, r3
 8000ada:	2105      	movs	r1, #5
 8000adc:	2068      	movs	r0, #104	; 0x68
 8000ade:	f000 fbad 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no4 , (arrayLED_Save[1].sb.bit3)? 100:0 );  //write all scaling
 8000ae2:	4b5c      	ldr	r3, [pc, #368]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	2208      	movs	r2, #8
 8000ae8:	4013      	ands	r3, r2
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <Task_LED_Driver+0x1dc>
 8000af0:	2364      	movs	r3, #100	; 0x64
 8000af2:	e000      	b.n	8000af6 <Task_LED_Driver+0x1de>
 8000af4:	2300      	movs	r3, #0
 8000af6:	001a      	movs	r2, r3
 8000af8:	2107      	movs	r1, #7
 8000afa:	2068      	movs	r0, #104	; 0x68
 8000afc:	f000 fb9e 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no5 , (arrayLED_Save[1].sb.bit4)? 100:0 );  //write all scaling
 8000b00:	4b54      	ldr	r3, [pc, #336]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b02:	791b      	ldrb	r3, [r3, #4]
 8000b04:	2210      	movs	r2, #16
 8000b06:	4013      	ands	r3, r2
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <Task_LED_Driver+0x1fa>
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	e000      	b.n	8000b14 <Task_LED_Driver+0x1fc>
 8000b12:	2300      	movs	r3, #0
 8000b14:	001a      	movs	r2, r3
 8000b16:	2109      	movs	r1, #9
 8000b18:	2068      	movs	r0, #104	; 0x68
 8000b1a:	f000 fb8f 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no6 , (arrayLED_Save[1].sb.bit5)? 100:0 );  //write all scaling
 8000b1e:	4b4d      	ldr	r3, [pc, #308]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b20:	791b      	ldrb	r3, [r3, #4]
 8000b22:	2220      	movs	r2, #32
 8000b24:	4013      	ands	r3, r2
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <Task_LED_Driver+0x218>
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	e000      	b.n	8000b32 <Task_LED_Driver+0x21a>
 8000b30:	2300      	movs	r3, #0
 8000b32:	001a      	movs	r2, r3
 8000b34:	210b      	movs	r1, #11
 8000b36:	2068      	movs	r0, #104	; 0x68
 8000b38:	f000 fb80 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no7 , (arrayLED_Save[1].sb.bit6)? 100:0 );  //write all scaling
 8000b3c:	4b45      	ldr	r3, [pc, #276]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b3e:	791b      	ldrb	r3, [r3, #4]
 8000b40:	2240      	movs	r2, #64	; 0x40
 8000b42:	4013      	ands	r3, r2
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <Task_LED_Driver+0x236>
 8000b4a:	2364      	movs	r3, #100	; 0x64
 8000b4c:	e000      	b.n	8000b50 <Task_LED_Driver+0x238>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	001a      	movs	r2, r3
 8000b52:	210d      	movs	r1, #13
 8000b54:	2068      	movs	r0, #104	; 0x68
 8000b56:	f000 fb71 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no8 , (arrayLED_Save[1].sb.bit7)? 100:0 );  //write all scaling
 8000b5a:	4b3e      	ldr	r3, [pc, #248]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b5c:	791b      	ldrb	r3, [r3, #4]
 8000b5e:	227f      	movs	r2, #127	; 0x7f
 8000b60:	4393      	bics	r3, r2
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <Task_LED_Driver+0x254>
 8000b68:	2364      	movs	r3, #100	; 0x64
 8000b6a:	e000      	b.n	8000b6e <Task_LED_Driver+0x256>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	001a      	movs	r2, r3
 8000b70:	210f      	movs	r1, #15
 8000b72:	2068      	movs	r0, #104	; 0x68
 8000b74:	f000 fb62 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no9 , (arrayLED_Save[1].sb.bit8)? 100:0 );  //write all scaling
 8000b78:	4b36      	ldr	r3, [pc, #216]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b7a:	795b      	ldrb	r3, [r3, #5]
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	4013      	ands	r3, r2
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <Task_LED_Driver+0x272>
 8000b86:	2364      	movs	r3, #100	; 0x64
 8000b88:	e000      	b.n	8000b8c <Task_LED_Driver+0x274>
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2111      	movs	r1, #17
 8000b90:	2068      	movs	r0, #104	; 0x68
 8000b92:	f000 fb53 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_array_LED2_no10, (arrayLED_Save[1].sb.bit9)? 100:0 );  //write all scaling
 8000b96:	4b2f      	ldr	r3, [pc, #188]	; (8000c54 <Task_LED_Driver+0x33c>)
 8000b98:	795b      	ldrb	r3, [r3, #5]
 8000b9a:	2202      	movs	r2, #2
 8000b9c:	4013      	ands	r3, r2
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <Task_LED_Driver+0x290>
 8000ba4:	2364      	movs	r3, #100	; 0x64
 8000ba6:	e000      	b.n	8000baa <Task_LED_Driver+0x292>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	001a      	movs	r2, r3
 8000bac:	2113      	movs	r1, #19
 8000bae:	2068      	movs	r0, #104	; 0x68
 8000bb0:	f000 fb44 	bl	800123c <I2C_WriteByte>
    }

    if(1) {
        static xu_flag LED9_Save = {0};

        if(LED9_Save.u8Byte != LED9) {
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <Task_LED_Driver+0x344>)
 8000bb6:	781a      	ldrb	r2, [r3, #0]
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <Task_LED_Driver+0x348>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	d033      	beq.n	8000c28 <Task_LED_Driver+0x310>
            LED9_Save.u8Byte = LED9;
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <Task_LED_Driver+0x348>)
 8000bc2:	781a      	ldrb	r2, [r3, #0]
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <Task_LED_Driver+0x344>)
 8000bc6:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000bc8:	1dfb      	adds	r3, r7, #7
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW, PWM_LED9_R          , (LED9_Save.sb.bit0)? 100:0 );  //write all scaling
 8000bce:	4b23      	ldr	r3, [pc, #140]	; (8000c5c <Task_LED_Driver+0x344>)
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	b2db      	uxtb	r3, r3
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <Task_LED_Driver+0x2c8>
 8000bdc:	2364      	movs	r3, #100	; 0x64
 8000bde:	e000      	b.n	8000be2 <Task_LED_Driver+0x2ca>
 8000be0:	2300      	movs	r3, #0
 8000be2:	001a      	movs	r2, r3
 8000be4:	213b      	movs	r1, #59	; 0x3b
 8000be6:	2068      	movs	r0, #104	; 0x68
 8000be8:	f000 fb28 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW, PWM_LED9_G          , (LED9_Save.sb.bit1)? 100:0 );  //write all scaling
 8000bec:	4b1b      	ldr	r3, [pc, #108]	; (8000c5c <Task_LED_Driver+0x344>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <Task_LED_Driver+0x2e6>
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	e000      	b.n	8000c00 <Task_LED_Driver+0x2e8>
 8000bfe:	2300      	movs	r3, #0
 8000c00:	001a      	movs	r2, r3
 8000c02:	213d      	movs	r1, #61	; 0x3d
 8000c04:	2068      	movs	r0, #104	; 0x68
 8000c06:	f000 fb19 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW, PWM_LED9_B          , (LED9_Save.sb.bit2)? 100:0 );  //write all scaling
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <Task_LED_Driver+0x344>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2204      	movs	r2, #4
 8000c10:	4013      	ands	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <Task_LED_Driver+0x304>
 8000c18:	2364      	movs	r3, #100	; 0x64
 8000c1a:	e000      	b.n	8000c1e <Task_LED_Driver+0x306>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	001a      	movs	r2, r3
 8000c20:	213f      	movs	r1, #63	; 0x3f
 8000c22:	2068      	movs	r0, #104	; 0x68
 8000c24:	f000 fb0a 	bl	800123c <I2C_WriteByte>
    if(1) {
        static xu_flag SW3_LED19_Save = {0};
        static xu_flag SW3_LED20_Save = {0};
        static xu_flag SW3_LED21_Save = {0};

        if(SW3_LED19_Save.u8Byte != SW3_LED19) {
 8000c28:	4b0e      	ldr	r3, [pc, #56]	; (8000c64 <Task_LED_Driver+0x34c>)
 8000c2a:	781a      	ldrb	r2, [r3, #0]
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <Task_LED_Driver+0x350>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d03f      	beq.n	8000cb4 <Task_LED_Driver+0x39c>
            SW3_LED19_Save.u8Byte = SW3_LED19;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <Task_LED_Driver+0x350>)
 8000c36:	781a      	ldrb	r2, [r3, #0]
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <Task_LED_Driver+0x34c>)
 8000c3a:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000c3c:	1dfb      	adds	r3, r7, #7
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_R        , (SW3_LED19_Save.sb.bit0)? 100:0 );  //write all scaling
 8000c42:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <Task_LED_Driver+0x34c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2201      	movs	r2, #1
 8000c48:	4013      	ands	r3, r2
 8000c4a:	b2db      	uxtb	r3, r3
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d00d      	beq.n	8000c6c <Task_LED_Driver+0x354>
 8000c50:	2364      	movs	r3, #100	; 0x64
 8000c52:	e00c      	b.n	8000c6e <Task_LED_Driver+0x356>
 8000c54:	200000a0 	.word	0x200000a0
 8000c58:	2000008c 	.word	0x2000008c
 8000c5c:	200000a8 	.word	0x200000a8
 8000c60:	20000090 	.word	0x20000090
 8000c64:	200000ac 	.word	0x200000ac
 8000c68:	20000091 	.word	0x20000091
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	001a      	movs	r2, r3
 8000c70:	2125      	movs	r1, #37	; 0x25
 8000c72:	206e      	movs	r0, #110	; 0x6e
 8000c74:	f000 fae2 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_G        , (SW3_LED19_Save.sb.bit1)? 100:0 );  //write all scaling
 8000c78:	4bcf      	ldr	r3, [pc, #828]	; (8000fb8 <Task_LED_Driver+0x6a0>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2202      	movs	r2, #2
 8000c7e:	4013      	ands	r3, r2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <Task_LED_Driver+0x372>
 8000c86:	2364      	movs	r3, #100	; 0x64
 8000c88:	e000      	b.n	8000c8c <Task_LED_Driver+0x374>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2129      	movs	r1, #41	; 0x29
 8000c90:	206e      	movs	r0, #110	; 0x6e
 8000c92:	f000 fad3 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED19_B        , (SW3_LED19_Save.sb.bit2)? 100:0 );  //write all scaling
 8000c96:	4bc8      	ldr	r3, [pc, #800]	; (8000fb8 <Task_LED_Driver+0x6a0>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2204      	movs	r2, #4
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	b2db      	uxtb	r3, r3
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <Task_LED_Driver+0x390>
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	e000      	b.n	8000caa <Task_LED_Driver+0x392>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	001a      	movs	r2, r3
 8000cac:	2127      	movs	r1, #39	; 0x27
 8000cae:	206e      	movs	r0, #110	; 0x6e
 8000cb0:	f000 fac4 	bl	800123c <I2C_WriteByte>
        }

        if(SW3_LED20_Save.u8Byte != SW3_LED20) {
 8000cb4:	4bc1      	ldr	r3, [pc, #772]	; (8000fbc <Task_LED_Driver+0x6a4>)
 8000cb6:	781a      	ldrb	r2, [r3, #0]
 8000cb8:	4bc1      	ldr	r3, [pc, #772]	; (8000fc0 <Task_LED_Driver+0x6a8>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	429a      	cmp	r2, r3
 8000cbe:	d033      	beq.n	8000d28 <Task_LED_Driver+0x410>
            SW3_LED20_Save.u8Byte = SW3_LED20;
 8000cc0:	4bbf      	ldr	r3, [pc, #764]	; (8000fc0 <Task_LED_Driver+0x6a8>)
 8000cc2:	781a      	ldrb	r2, [r3, #0]
 8000cc4:	4bbd      	ldr	r3, [pc, #756]	; (8000fbc <Task_LED_Driver+0x6a4>)
 8000cc6:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_R        , (SW3_LED20_Save.sb.bit0)? 100:0 );  //write all scaling
 8000cce:	4bbb      	ldr	r3, [pc, #748]	; (8000fbc <Task_LED_Driver+0x6a4>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <Task_LED_Driver+0x3c8>
 8000cdc:	2364      	movs	r3, #100	; 0x64
 8000cde:	e000      	b.n	8000ce2 <Task_LED_Driver+0x3ca>
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	212b      	movs	r1, #43	; 0x2b
 8000ce6:	206e      	movs	r0, #110	; 0x6e
 8000ce8:	f000 faa8 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_G        , (SW3_LED20_Save.sb.bit1)? 100:0 );  //write all scaling
 8000cec:	4bb3      	ldr	r3, [pc, #716]	; (8000fbc <Task_LED_Driver+0x6a4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2202      	movs	r2, #2
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <Task_LED_Driver+0x3e6>
 8000cfa:	2364      	movs	r3, #100	; 0x64
 8000cfc:	e000      	b.n	8000d00 <Task_LED_Driver+0x3e8>
 8000cfe:	2300      	movs	r3, #0
 8000d00:	001a      	movs	r2, r3
 8000d02:	212f      	movs	r1, #47	; 0x2f
 8000d04:	206e      	movs	r0, #110	; 0x6e
 8000d06:	f000 fa99 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED20_B        , (SW3_LED20_Save.sb.bit2)? 100:0 );  //write all scaling
 8000d0a:	4bac      	ldr	r3, [pc, #688]	; (8000fbc <Task_LED_Driver+0x6a4>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2204      	movs	r2, #4
 8000d10:	4013      	ands	r3, r2
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <Task_LED_Driver+0x404>
 8000d18:	2364      	movs	r3, #100	; 0x64
 8000d1a:	e000      	b.n	8000d1e <Task_LED_Driver+0x406>
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	001a      	movs	r2, r3
 8000d20:	212d      	movs	r1, #45	; 0x2d
 8000d22:	206e      	movs	r0, #110	; 0x6e
 8000d24:	f000 fa8a 	bl	800123c <I2C_WriteByte>
        }

        if(SW3_LED21_Save.u8Byte != SW3_LED21) {
 8000d28:	4ba6      	ldr	r3, [pc, #664]	; (8000fc4 <Task_LED_Driver+0x6ac>)
 8000d2a:	781a      	ldrb	r2, [r3, #0]
 8000d2c:	4ba6      	ldr	r3, [pc, #664]	; (8000fc8 <Task_LED_Driver+0x6b0>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d033      	beq.n	8000d9c <Task_LED_Driver+0x484>
            SW3_LED21_Save.u8Byte = SW3_LED21;
 8000d34:	4ba4      	ldr	r3, [pc, #656]	; (8000fc8 <Task_LED_Driver+0x6b0>)
 8000d36:	781a      	ldrb	r2, [r3, #0]
 8000d38:	4ba2      	ldr	r3, [pc, #648]	; (8000fc4 <Task_LED_Driver+0x6ac>)
 8000d3a:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000d3c:	1dfb      	adds	r3, r7, #7
 8000d3e:	2201      	movs	r2, #1
 8000d40:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_R        , (SW3_LED21_Save.sb.bit0)? 100:0 );  //write all scaling
 8000d42:	4ba0      	ldr	r3, [pc, #640]	; (8000fc4 <Task_LED_Driver+0x6ac>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2201      	movs	r2, #1
 8000d48:	4013      	ands	r3, r2
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <Task_LED_Driver+0x43c>
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	e000      	b.n	8000d56 <Task_LED_Driver+0x43e>
 8000d54:	2300      	movs	r3, #0
 8000d56:	001a      	movs	r2, r3
 8000d58:	2131      	movs	r1, #49	; 0x31
 8000d5a:	206e      	movs	r0, #110	; 0x6e
 8000d5c:	f000 fa6e 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_G        , (SW3_LED21_Save.sb.bit1)? 100:0 );  //write all scaling
 8000d60:	4b98      	ldr	r3, [pc, #608]	; (8000fc4 <Task_LED_Driver+0x6ac>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2202      	movs	r2, #2
 8000d66:	4013      	ands	r3, r2
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <Task_LED_Driver+0x45a>
 8000d6e:	2364      	movs	r3, #100	; 0x64
 8000d70:	e000      	b.n	8000d74 <Task_LED_Driver+0x45c>
 8000d72:	2300      	movs	r3, #0
 8000d74:	001a      	movs	r2, r3
 8000d76:	2135      	movs	r1, #53	; 0x35
 8000d78:	206e      	movs	r0, #110	; 0x6e
 8000d7a:	f000 fa5f 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED21_B        , (SW3_LED21_Save.sb.bit2)? 100:0 );  //write all scaling
 8000d7e:	4b91      	ldr	r3, [pc, #580]	; (8000fc4 <Task_LED_Driver+0x6ac>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2204      	movs	r2, #4
 8000d84:	4013      	ands	r3, r2
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <Task_LED_Driver+0x478>
 8000d8c:	2364      	movs	r3, #100	; 0x64
 8000d8e:	e000      	b.n	8000d92 <Task_LED_Driver+0x47a>
 8000d90:	2300      	movs	r3, #0
 8000d92:	001a      	movs	r2, r3
 8000d94:	2133      	movs	r1, #51	; 0x33
 8000d96:	206e      	movs	r0, #110	; 0x6e
 8000d98:	f000 fa50 	bl	800123c <I2C_WriteByte>
    if(1) {
        static xu_flag SW4_LED15_Save = {0};
        static xu_flag SW4_LED16_Save = {0};
        static xu_flag SW4_LED18_Save = {0};

        if(SW4_LED15_Save.u8Byte != SW4_LED15) {
 8000d9c:	4b8b      	ldr	r3, [pc, #556]	; (8000fcc <Task_LED_Driver+0x6b4>)
 8000d9e:	781a      	ldrb	r2, [r3, #0]
 8000da0:	4b8b      	ldr	r3, [pc, #556]	; (8000fd0 <Task_LED_Driver+0x6b8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d033      	beq.n	8000e10 <Task_LED_Driver+0x4f8>
            SW4_LED15_Save.u8Byte = SW4_LED15;
 8000da8:	4b89      	ldr	r3, [pc, #548]	; (8000fd0 <Task_LED_Driver+0x6b8>)
 8000daa:	781a      	ldrb	r2, [r3, #0]
 8000dac:	4b87      	ldr	r3, [pc, #540]	; (8000fcc <Task_LED_Driver+0x6b4>)
 8000dae:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000db0:	1dfb      	adds	r3, r7, #7
 8000db2:	2201      	movs	r2, #1
 8000db4:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_R        , (SW4_LED15_Save.sb.bit0)? 100:0 );  //write all scaling
 8000db6:	4b85      	ldr	r3, [pc, #532]	; (8000fcc <Task_LED_Driver+0x6b4>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <Task_LED_Driver+0x4b0>
 8000dc4:	2364      	movs	r3, #100	; 0x64
 8000dc6:	e000      	b.n	8000dca <Task_LED_Driver+0x4b2>
 8000dc8:	2300      	movs	r3, #0
 8000dca:	001a      	movs	r2, r3
 8000dcc:	2113      	movs	r1, #19
 8000dce:	206e      	movs	r0, #110	; 0x6e
 8000dd0:	f000 fa34 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_G        , (SW4_LED15_Save.sb.bit1)? 100:0 );  //write all scaling
 8000dd4:	4b7d      	ldr	r3, [pc, #500]	; (8000fcc <Task_LED_Driver+0x6b4>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2202      	movs	r2, #2
 8000dda:	4013      	ands	r3, r2
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <Task_LED_Driver+0x4ce>
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	e000      	b.n	8000de8 <Task_LED_Driver+0x4d0>
 8000de6:	2300      	movs	r3, #0
 8000de8:	001a      	movs	r2, r3
 8000dea:	2117      	movs	r1, #23
 8000dec:	206e      	movs	r0, #110	; 0x6e
 8000dee:	f000 fa25 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED15_B        , (SW4_LED15_Save.sb.bit2)? 100:0 );  //write all scaling
 8000df2:	4b76      	ldr	r3, [pc, #472]	; (8000fcc <Task_LED_Driver+0x6b4>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2204      	movs	r2, #4
 8000df8:	4013      	ands	r3, r2
 8000dfa:	b2db      	uxtb	r3, r3
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <Task_LED_Driver+0x4ec>
 8000e00:	2364      	movs	r3, #100	; 0x64
 8000e02:	e000      	b.n	8000e06 <Task_LED_Driver+0x4ee>
 8000e04:	2300      	movs	r3, #0
 8000e06:	001a      	movs	r2, r3
 8000e08:	2115      	movs	r1, #21
 8000e0a:	206e      	movs	r0, #110	; 0x6e
 8000e0c:	f000 fa16 	bl	800123c <I2C_WriteByte>
        }

        if(SW4_LED16_Save.u8Byte != SW4_LED16) {
 8000e10:	4b70      	ldr	r3, [pc, #448]	; (8000fd4 <Task_LED_Driver+0x6bc>)
 8000e12:	781a      	ldrb	r2, [r3, #0]
 8000e14:	4b70      	ldr	r3, [pc, #448]	; (8000fd8 <Task_LED_Driver+0x6c0>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d033      	beq.n	8000e84 <Task_LED_Driver+0x56c>
            SW4_LED16_Save.u8Byte = SW4_LED16;
 8000e1c:	4b6e      	ldr	r3, [pc, #440]	; (8000fd8 <Task_LED_Driver+0x6c0>)
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	4b6c      	ldr	r3, [pc, #432]	; (8000fd4 <Task_LED_Driver+0x6bc>)
 8000e22:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_R        , (SW4_LED16_Save.sb.bit0)? 100:0 );  //write all scaling
 8000e2a:	4b6a      	ldr	r3, [pc, #424]	; (8000fd4 <Task_LED_Driver+0x6bc>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	4013      	ands	r3, r2
 8000e32:	b2db      	uxtb	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <Task_LED_Driver+0x524>
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	e000      	b.n	8000e3e <Task_LED_Driver+0x526>
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	001a      	movs	r2, r3
 8000e40:	2119      	movs	r1, #25
 8000e42:	206e      	movs	r0, #110	; 0x6e
 8000e44:	f000 f9fa 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_G        , (SW4_LED16_Save.sb.bit1)? 100:0 );  //write all scaling
 8000e48:	4b62      	ldr	r3, [pc, #392]	; (8000fd4 <Task_LED_Driver+0x6bc>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	4013      	ands	r3, r2
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <Task_LED_Driver+0x542>
 8000e56:	2364      	movs	r3, #100	; 0x64
 8000e58:	e000      	b.n	8000e5c <Task_LED_Driver+0x544>
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	211d      	movs	r1, #29
 8000e60:	206e      	movs	r0, #110	; 0x6e
 8000e62:	f000 f9eb 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED16_B        , (SW4_LED16_Save.sb.bit2)? 100:0 );  //write all scaling
 8000e66:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <Task_LED_Driver+0x6bc>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2204      	movs	r2, #4
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <Task_LED_Driver+0x560>
 8000e74:	2364      	movs	r3, #100	; 0x64
 8000e76:	e000      	b.n	8000e7a <Task_LED_Driver+0x562>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	001a      	movs	r2, r3
 8000e7c:	211b      	movs	r1, #27
 8000e7e:	206e      	movs	r0, #110	; 0x6e
 8000e80:	f000 f9dc 	bl	800123c <I2C_WriteByte>
        }

        if(SW4_LED18_Save.u8Byte != SW4_LED18) {
 8000e84:	4b55      	ldr	r3, [pc, #340]	; (8000fdc <Task_LED_Driver+0x6c4>)
 8000e86:	781a      	ldrb	r2, [r3, #0]
 8000e88:	4b55      	ldr	r3, [pc, #340]	; (8000fe0 <Task_LED_Driver+0x6c8>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	d033      	beq.n	8000ef8 <Task_LED_Driver+0x5e0>
            SW4_LED18_Save.u8Byte = SW4_LED18;
 8000e90:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <Task_LED_Driver+0x6c8>)
 8000e92:	781a      	ldrb	r2, [r3, #0]
 8000e94:	4b51      	ldr	r3, [pc, #324]	; (8000fdc <Task_LED_Driver+0x6c4>)
 8000e96:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_R        , (SW4_LED18_Save.sb.bit0)? 100:0 );  //write all scaling
 8000e9e:	4b4f      	ldr	r3, [pc, #316]	; (8000fdc <Task_LED_Driver+0x6c4>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <Task_LED_Driver+0x598>
 8000eac:	2364      	movs	r3, #100	; 0x64
 8000eae:	e000      	b.n	8000eb2 <Task_LED_Driver+0x59a>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	001a      	movs	r2, r3
 8000eb4:	211f      	movs	r1, #31
 8000eb6:	206e      	movs	r0, #110	; 0x6e
 8000eb8:	f000 f9c0 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_G        , (SW4_LED18_Save.sb.bit1)? 100:0 );  //write all scaling
 8000ebc:	4b47      	ldr	r3, [pc, #284]	; (8000fdc <Task_LED_Driver+0x6c4>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2202      	movs	r2, #2
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <Task_LED_Driver+0x5b6>
 8000eca:	2364      	movs	r3, #100	; 0x64
 8000ecc:	e000      	b.n	8000ed0 <Task_LED_Driver+0x5b8>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2123      	movs	r1, #35	; 0x23
 8000ed4:	206e      	movs	r0, #110	; 0x6e
 8000ed6:	f000 f9b1 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED18_B        , (SW4_LED18_Save.sb.bit2)? 100:0 );  //write all scaling
 8000eda:	4b40      	ldr	r3, [pc, #256]	; (8000fdc <Task_LED_Driver+0x6c4>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <Task_LED_Driver+0x5d4>
 8000ee8:	2364      	movs	r3, #100	; 0x64
 8000eea:	e000      	b.n	8000eee <Task_LED_Driver+0x5d6>
 8000eec:	2300      	movs	r3, #0
 8000eee:	001a      	movs	r2, r3
 8000ef0:	2121      	movs	r1, #33	; 0x21
 8000ef2:	206e      	movs	r0, #110	; 0x6e
 8000ef4:	f000 f9a2 	bl	800123c <I2C_WriteByte>
    if(1) {
        static xu_flag SW5_LED13_Save = {0};
        static xu_flag SW5_LED14_Save = {0};
        static xu_flag SW5_LED17_Save = {0};

        if(SW5_LED13_Save.u8Byte != SW5_LED13) {
 8000ef8:	4b3a      	ldr	r3, [pc, #232]	; (8000fe4 <Task_LED_Driver+0x6cc>)
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <Task_LED_Driver+0x6d0>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d033      	beq.n	8000f6c <Task_LED_Driver+0x654>
            SW5_LED13_Save.u8Byte = SW5_LED13;
 8000f04:	4b38      	ldr	r3, [pc, #224]	; (8000fe8 <Task_LED_Driver+0x6d0>)
 8000f06:	781a      	ldrb	r2, [r3, #0]
 8000f08:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <Task_LED_Driver+0x6cc>)
 8000f0a:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000f0c:	1dfb      	adds	r3, r7, #7
 8000f0e:	2201      	movs	r2, #1
 8000f10:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_R        , (SW5_LED13_Save.sb.bit0)? 100:0 );  //write all scaling
 8000f12:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <Task_LED_Driver+0x6cc>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2201      	movs	r2, #1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	b2db      	uxtb	r3, r3
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <Task_LED_Driver+0x60c>
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	e000      	b.n	8000f26 <Task_LED_Driver+0x60e>
 8000f24:	2300      	movs	r3, #0
 8000f26:	001a      	movs	r2, r3
 8000f28:	2101      	movs	r1, #1
 8000f2a:	206e      	movs	r0, #110	; 0x6e
 8000f2c:	f000 f986 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_G        , (SW5_LED13_Save.sb.bit1)? 100:0 );  //write all scaling
 8000f30:	4b2c      	ldr	r3, [pc, #176]	; (8000fe4 <Task_LED_Driver+0x6cc>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2202      	movs	r2, #2
 8000f36:	4013      	ands	r3, r2
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <Task_LED_Driver+0x62a>
 8000f3e:	2364      	movs	r3, #100	; 0x64
 8000f40:	e000      	b.n	8000f44 <Task_LED_Driver+0x62c>
 8000f42:	2300      	movs	r3, #0
 8000f44:	001a      	movs	r2, r3
 8000f46:	2105      	movs	r1, #5
 8000f48:	206e      	movs	r0, #110	; 0x6e
 8000f4a:	f000 f977 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED13_B        , (SW5_LED13_Save.sb.bit2)? 100:0 );  //write all scaling
 8000f4e:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <Task_LED_Driver+0x6cc>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	2204      	movs	r2, #4
 8000f54:	4013      	ands	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <Task_LED_Driver+0x648>
 8000f5c:	2364      	movs	r3, #100	; 0x64
 8000f5e:	e000      	b.n	8000f62 <Task_LED_Driver+0x64a>
 8000f60:	2300      	movs	r3, #0
 8000f62:	001a      	movs	r2, r3
 8000f64:	2103      	movs	r1, #3
 8000f66:	206e      	movs	r0, #110	; 0x6e
 8000f68:	f000 f968 	bl	800123c <I2C_WriteByte>
        }

        if(SW5_LED14_Save.u8Byte != SW5_LED14) {
 8000f6c:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <Task_LED_Driver+0x6d4>)
 8000f6e:	781a      	ldrb	r2, [r3, #0]
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <Task_LED_Driver+0x6d8>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d052      	beq.n	800101e <Task_LED_Driver+0x706>
            SW5_LED14_Save.u8Byte = SW5_LED14;
 8000f78:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <Task_LED_Driver+0x6d8>)
 8000f7a:	781a      	ldrb	r2, [r3, #0]
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <Task_LED_Driver+0x6d4>)
 8000f7e:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8000f80:	1dfb      	adds	r3, r7, #7
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_R        , (SW5_LED14_Save.sb.bit0)? 100:0 );  //write all scaling
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <Task_LED_Driver+0x6d4>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	b2db      	uxtb	r3, r3
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <Task_LED_Driver+0x680>
 8000f94:	2364      	movs	r3, #100	; 0x64
 8000f96:	e000      	b.n	8000f9a <Task_LED_Driver+0x682>
 8000f98:	2300      	movs	r3, #0
 8000f9a:	001a      	movs	r2, r3
 8000f9c:	2107      	movs	r1, #7
 8000f9e:	206e      	movs	r0, #110	; 0x6e
 8000fa0:	f000 f94c 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_G        , (SW5_LED14_Save.sb.bit1)? 100:0 );  //write all scaling
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <Task_LED_Driver+0x6d4>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	4013      	ands	r3, r2
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d020      	beq.n	8000ff4 <Task_LED_Driver+0x6dc>
 8000fb2:	2364      	movs	r3, #100	; 0x64
 8000fb4:	e01f      	b.n	8000ff6 <Task_LED_Driver+0x6de>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	200000ac 	.word	0x200000ac
 8000fbc:	200000b0 	.word	0x200000b0
 8000fc0:	20000092 	.word	0x20000092
 8000fc4:	200000b4 	.word	0x200000b4
 8000fc8:	20000093 	.word	0x20000093
 8000fcc:	200000b8 	.word	0x200000b8
 8000fd0:	20000094 	.word	0x20000094
 8000fd4:	200000bc 	.word	0x200000bc
 8000fd8:	20000095 	.word	0x20000095
 8000fdc:	200000c0 	.word	0x200000c0
 8000fe0:	20000096 	.word	0x20000096
 8000fe4:	200000c4 	.word	0x200000c4
 8000fe8:	20000097 	.word	0x20000097
 8000fec:	200000c8 	.word	0x200000c8
 8000ff0:	20000098 	.word	0x20000098
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	001a      	movs	r2, r3
 8000ff8:	210b      	movs	r1, #11
 8000ffa:	206e      	movs	r0, #110	; 0x6e
 8000ffc:	f000 f91e 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED14_B        , (SW5_LED14_Save.sb.bit2)? 100:0 );  //write all scaling
 8001000:	4b85      	ldr	r3, [pc, #532]	; (8001218 <Task_LED_Driver+0x900>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2204      	movs	r2, #4
 8001006:	4013      	ands	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <Task_LED_Driver+0x6fa>
 800100e:	2364      	movs	r3, #100	; 0x64
 8001010:	e000      	b.n	8001014 <Task_LED_Driver+0x6fc>
 8001012:	2300      	movs	r3, #0
 8001014:	001a      	movs	r2, r3
 8001016:	2109      	movs	r1, #9
 8001018:	206e      	movs	r0, #110	; 0x6e
 800101a:	f000 f90f 	bl	800123c <I2C_WriteByte>
        }

        if(SW5_LED17_Save.u8Byte != SW5_LED17) {
 800101e:	4b7f      	ldr	r3, [pc, #508]	; (800121c <Task_LED_Driver+0x904>)
 8001020:	781a      	ldrb	r2, [r3, #0]
 8001022:	4b7f      	ldr	r3, [pc, #508]	; (8001220 <Task_LED_Driver+0x908>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	429a      	cmp	r2, r3
 8001028:	d033      	beq.n	8001092 <Task_LED_Driver+0x77a>
            SW5_LED17_Save.u8Byte = SW5_LED17;
 800102a:	4b7d      	ldr	r3, [pc, #500]	; (8001220 <Task_LED_Driver+0x908>)
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	4b7b      	ldr	r3, [pc, #492]	; (800121c <Task_LED_Driver+0x904>)
 8001030:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	2201      	movs	r2, #1
 8001036:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_R        , (SW5_LED17_Save.sb.bit0)? 100:0 );  //write all scaling
 8001038:	4b78      	ldr	r3, [pc, #480]	; (800121c <Task_LED_Driver+0x904>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2201      	movs	r2, #1
 800103e:	4013      	ands	r3, r2
 8001040:	b2db      	uxtb	r3, r3
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <Task_LED_Driver+0x732>
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	e000      	b.n	800104c <Task_LED_Driver+0x734>
 800104a:	2300      	movs	r3, #0
 800104c:	001a      	movs	r2, r3
 800104e:	210d      	movs	r1, #13
 8001050:	206e      	movs	r0, #110	; 0x6e
 8001052:	f000 f8f3 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_G        , (SW5_LED17_Save.sb.bit1)? 100:0 );  //write all scaling
 8001056:	4b71      	ldr	r3, [pc, #452]	; (800121c <Task_LED_Driver+0x904>)
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2202      	movs	r2, #2
 800105c:	4013      	ands	r3, r2
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <Task_LED_Driver+0x750>
 8001064:	2364      	movs	r3, #100	; 0x64
 8001066:	e000      	b.n	800106a <Task_LED_Driver+0x752>
 8001068:	2300      	movs	r3, #0
 800106a:	001a      	movs	r2, r3
 800106c:	2111      	movs	r1, #17
 800106e:	206e      	movs	r0, #110	; 0x6e
 8001070:	f000 f8e4 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_HIGH, PWM_LED17_B        , (SW5_LED17_Save.sb.bit2)? 100:0 );  //write all scaling
 8001074:	4b69      	ldr	r3, [pc, #420]	; (800121c <Task_LED_Driver+0x904>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2204      	movs	r2, #4
 800107a:	4013      	ands	r3, r2
 800107c:	b2db      	uxtb	r3, r3
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <Task_LED_Driver+0x76e>
 8001082:	2364      	movs	r3, #100	; 0x64
 8001084:	e000      	b.n	8001088 <Task_LED_Driver+0x770>
 8001086:	2300      	movs	r3, #0
 8001088:	001a      	movs	r2, r3
 800108a:	210f      	movs	r1, #15
 800108c:	206e      	movs	r0, #110	; 0x6e
 800108e:	f000 f8d5 	bl	800123c <I2C_WriteByte>
    if(1) {
        static xu_flag SW6_LED10_Save = {0};
        static xu_flag SW6_LED11_Save = {0};
        static xu_flag SW6_LED12_Save = {0};

        if(SW6_LED10_Save.u8Byte != SW6_LED10) {
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <Task_LED_Driver+0x90c>)
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	4b64      	ldr	r3, [pc, #400]	; (8001228 <Task_LED_Driver+0x910>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	429a      	cmp	r2, r3
 800109c:	d033      	beq.n	8001106 <Task_LED_Driver+0x7ee>
            SW6_LED10_Save.u8Byte = SW6_LED10;
 800109e:	4b62      	ldr	r3, [pc, #392]	; (8001228 <Task_LED_Driver+0x910>)
 80010a0:	781a      	ldrb	r2, [r3, #0]
 80010a2:	4b60      	ldr	r3, [pc, #384]	; (8001224 <Task_LED_Driver+0x90c>)
 80010a4:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 80010a6:	1dfb      	adds	r3, r7, #7
 80010a8:	2201      	movs	r2, #1
 80010aa:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_R        , (SW6_LED10_Save.sb.bit0)? 100:0 );  //write all scaling
 80010ac:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <Task_LED_Driver+0x90c>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2201      	movs	r2, #1
 80010b2:	4013      	ands	r3, r2
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <Task_LED_Driver+0x7a6>
 80010ba:	2364      	movs	r3, #100	; 0x64
 80010bc:	e000      	b.n	80010c0 <Task_LED_Driver+0x7a8>
 80010be:	2300      	movs	r3, #0
 80010c0:	001a      	movs	r2, r3
 80010c2:	2129      	movs	r1, #41	; 0x29
 80010c4:	2068      	movs	r0, #104	; 0x68
 80010c6:	f000 f8b9 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_G        , (SW6_LED10_Save.sb.bit1)? 100:0 );  //write all scaling
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <Task_LED_Driver+0x90c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <Task_LED_Driver+0x7c4>
 80010d8:	2364      	movs	r3, #100	; 0x64
 80010da:	e000      	b.n	80010de <Task_LED_Driver+0x7c6>
 80010dc:	2300      	movs	r3, #0
 80010de:	001a      	movs	r2, r3
 80010e0:	212b      	movs	r1, #43	; 0x2b
 80010e2:	2068      	movs	r0, #104	; 0x68
 80010e4:	f000 f8aa 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED10_B        , (SW6_LED10_Save.sb.bit2)? 100:0 );  //write all scaling
 80010e8:	4b4e      	ldr	r3, [pc, #312]	; (8001224 <Task_LED_Driver+0x90c>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2204      	movs	r2, #4
 80010ee:	4013      	ands	r3, r2
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <Task_LED_Driver+0x7e2>
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	e000      	b.n	80010fc <Task_LED_Driver+0x7e4>
 80010fa:	2300      	movs	r3, #0
 80010fc:	001a      	movs	r2, r3
 80010fe:	212d      	movs	r1, #45	; 0x2d
 8001100:	2068      	movs	r0, #104	; 0x68
 8001102:	f000 f89b 	bl	800123c <I2C_WriteByte>
        }

        if(SW6_LED11_Save.u8Byte != SW6_LED11) {
 8001106:	4b49      	ldr	r3, [pc, #292]	; (800122c <Task_LED_Driver+0x914>)
 8001108:	781a      	ldrb	r2, [r3, #0]
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <Task_LED_Driver+0x918>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	429a      	cmp	r2, r3
 8001110:	d033      	beq.n	800117a <Task_LED_Driver+0x862>
            SW6_LED11_Save.u8Byte = SW6_LED11;
 8001112:	4b47      	ldr	r3, [pc, #284]	; (8001230 <Task_LED_Driver+0x918>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b45      	ldr	r3, [pc, #276]	; (800122c <Task_LED_Driver+0x914>)
 8001118:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	2201      	movs	r2, #1
 800111e:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_R        , (SW6_LED11_Save.sb.bit0)? 100:0 );  //write all scaling
 8001120:	4b42      	ldr	r3, [pc, #264]	; (800122c <Task_LED_Driver+0x914>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2201      	movs	r2, #1
 8001126:	4013      	ands	r3, r2
 8001128:	b2db      	uxtb	r3, r3
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <Task_LED_Driver+0x81a>
 800112e:	2364      	movs	r3, #100	; 0x64
 8001130:	e000      	b.n	8001134 <Task_LED_Driver+0x81c>
 8001132:	2300      	movs	r3, #0
 8001134:	001a      	movs	r2, r3
 8001136:	212f      	movs	r1, #47	; 0x2f
 8001138:	2068      	movs	r0, #104	; 0x68
 800113a:	f000 f87f 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_G        , (SW6_LED11_Save.sb.bit1)? 100:0 );  //write all scaling
 800113e:	4b3b      	ldr	r3, [pc, #236]	; (800122c <Task_LED_Driver+0x914>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2202      	movs	r2, #2
 8001144:	4013      	ands	r3, r2
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <Task_LED_Driver+0x838>
 800114c:	2364      	movs	r3, #100	; 0x64
 800114e:	e000      	b.n	8001152 <Task_LED_Driver+0x83a>
 8001150:	2300      	movs	r3, #0
 8001152:	001a      	movs	r2, r3
 8001154:	2131      	movs	r1, #49	; 0x31
 8001156:	2068      	movs	r0, #104	; 0x68
 8001158:	f000 f870 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED11_B        , (SW6_LED11_Save.sb.bit2)? 100:0 );  //write all scaling
 800115c:	4b33      	ldr	r3, [pc, #204]	; (800122c <Task_LED_Driver+0x914>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2204      	movs	r2, #4
 8001162:	4013      	ands	r3, r2
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <Task_LED_Driver+0x856>
 800116a:	2364      	movs	r3, #100	; 0x64
 800116c:	e000      	b.n	8001170 <Task_LED_Driver+0x858>
 800116e:	2300      	movs	r3, #0
 8001170:	001a      	movs	r2, r3
 8001172:	2133      	movs	r1, #51	; 0x33
 8001174:	2068      	movs	r0, #104	; 0x68
 8001176:	f000 f861 	bl	800123c <I2C_WriteByte>
        }

        if(SW6_LED12_Save.u8Byte != SW6_LED12) {
 800117a:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <Task_LED_Driver+0x91c>)
 800117c:	781a      	ldrb	r2, [r3, #0]
 800117e:	4b2e      	ldr	r3, [pc, #184]	; (8001238 <Task_LED_Driver+0x920>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	429a      	cmp	r2, r3
 8001184:	d033      	beq.n	80011ee <Task_LED_Driver+0x8d6>
            SW6_LED12_Save.u8Byte = SW6_LED12;
 8001186:	4b2c      	ldr	r3, [pc, #176]	; (8001238 <Task_LED_Driver+0x920>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <Task_LED_Driver+0x91c>)
 800118c:	701a      	strb	r2, [r3, #0]

            isUpdate = 1;
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	2201      	movs	r2, #1
 8001192:	701a      	strb	r2, [r3, #0]

            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_R        , (SW6_LED12_Save.sb.bit0)? 100:0 );  //write all scaling
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <Task_LED_Driver+0x91c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2201      	movs	r2, #1
 800119a:	4013      	ands	r3, r2
 800119c:	b2db      	uxtb	r3, r3
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <Task_LED_Driver+0x88e>
 80011a2:	2364      	movs	r3, #100	; 0x64
 80011a4:	e000      	b.n	80011a8 <Task_LED_Driver+0x890>
 80011a6:	2300      	movs	r3, #0
 80011a8:	001a      	movs	r2, r3
 80011aa:	2135      	movs	r1, #53	; 0x35
 80011ac:	2068      	movs	r0, #104	; 0x68
 80011ae:	f000 f845 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_G        , (SW6_LED12_Save.sb.bit1)? 100:0 );  //write all scaling
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <Task_LED_Driver+0x91c>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2202      	movs	r2, #2
 80011b8:	4013      	ands	r3, r2
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <Task_LED_Driver+0x8ac>
 80011c0:	2364      	movs	r3, #100	; 0x64
 80011c2:	e000      	b.n	80011c6 <Task_LED_Driver+0x8ae>
 80011c4:	2300      	movs	r3, #0
 80011c6:	001a      	movs	r2, r3
 80011c8:	2137      	movs	r1, #55	; 0x37
 80011ca:	2068      	movs	r0, #104	; 0x68
 80011cc:	f000 f836 	bl	800123c <I2C_WriteByte>
            I2C_WriteByte(AD_SEL1_LOW,  PWM_LED12_B        , (SW6_LED12_Save.sb.bit2)? 100:0 );  //write all scaling
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <Task_LED_Driver+0x91c>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	2204      	movs	r2, #4
 80011d6:	4013      	ands	r3, r2
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <Task_LED_Driver+0x8ca>
 80011de:	2364      	movs	r3, #100	; 0x64
 80011e0:	e000      	b.n	80011e4 <Task_LED_Driver+0x8cc>
 80011e2:	2300      	movs	r3, #0
 80011e4:	001a      	movs	r2, r3
 80011e6:	2139      	movs	r1, #57	; 0x39
 80011e8:	2068      	movs	r0, #104	; 0x68
 80011ea:	f000 f827 	bl	800123c <I2C_WriteByte>
        }
    }

    if(isUpdate) {
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d00c      	beq.n	8001210 <Task_LED_Driver+0x8f8>
        isUpdate = 0;
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

        //Set PWM and Power value
        I2C_WriteByte(AD_SEL1_LOW,  0x49, 0x00);  //update PWM & congtrol registers
 80011fc:	2200      	movs	r2, #0
 80011fe:	2149      	movs	r1, #73	; 0x49
 8001200:	2068      	movs	r0, #104	; 0x68
 8001202:	f000 f81b 	bl	800123c <I2C_WriteByte>
        I2C_WriteByte(AD_SEL1_HIGH, 0x49, 0x00);  //update PWM & congtrol registers
 8001206:	2200      	movs	r2, #0
 8001208:	2149      	movs	r1, #73	; 0x49
 800120a:	206e      	movs	r0, #110	; 0x6e
 800120c:	f000 f816 	bl	800123c <I2C_WriteByte>

        //delay_ms(10);  //polling this api per 10ms
    }
}
 8001210:	46c0      	nop			; (mov r8, r8)
 8001212:	46bd      	mov	sp, r7
 8001214:	b002      	add	sp, #8
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200000c8 	.word	0x200000c8
 800121c:	200000cc 	.word	0x200000cc
 8001220:	20000099 	.word	0x20000099
 8001224:	200000d0 	.word	0x200000d0
 8001228:	2000009a 	.word	0x2000009a
 800122c:	200000d4 	.word	0x200000d4
 8001230:	2000009b 	.word	0x2000009b
 8001234:	200000d8 	.word	0x200000d8
 8001238:	2000009c 	.word	0x2000009c

0800123c <I2C_WriteByte>:

        delay_ms(10);
    }
}
/*----------------------------------------------------------------------------*/
unsigned char I2C_WriteByte(int DevAddr, unsigned char RegAddr, unsigned char u8Byte) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af02      	add	r7, sp, #8
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	0008      	movs	r0, r1
 8001246:	0011      	movs	r1, r2
 8001248:	1cfb      	adds	r3, r7, #3
 800124a:	1c02      	adds	r2, r0, #0
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	1cbb      	adds	r3, r7, #2
 8001250:	1c0a      	adds	r2, r1, #0
 8001252:	701a      	strb	r2, [r3, #0]
    I2C_SendByte(SendByte);
    I2C_WaitAck();

    I2C_Stop();
#else
    unsigned char u8Data[2] = {0};
 8001254:	200c      	movs	r0, #12
 8001256:	183b      	adds	r3, r7, r0
 8001258:	2200      	movs	r2, #0
 800125a:	801a      	strh	r2, [r3, #0]
    u8Data[0] = RegAddr;
 800125c:	183b      	adds	r3, r7, r0
 800125e:	1cfa      	adds	r2, r7, #3
 8001260:	7812      	ldrb	r2, [r2, #0]
 8001262:	701a      	strb	r2, [r3, #0]
    u8Data[1] = u8Byte;
 8001264:	183b      	adds	r3, r7, r0
 8001266:	1cba      	adds	r2, r7, #2
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	705a      	strb	r2, [r3, #1]

    HAL_I2C_Master_Transmit(&hi2c1, DevAddr, u8Data, 2, 0xFFFFFFFF);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	b299      	uxth	r1, r3
 8001270:	183a      	adds	r2, r7, r0
 8001272:	4806      	ldr	r0, [pc, #24]	; (800128c <I2C_WriteByte+0x50>)
 8001274:	2301      	movs	r3, #1
 8001276:	425b      	negs	r3, r3
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2302      	movs	r3, #2
 800127c:	f003 fb88 	bl	8004990 <HAL_I2C_Master_Transmit>
#endif

    return TRUE;
 8001280:	2301      	movs	r3, #1
}
 8001282:	0018      	movs	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	b004      	add	sp, #16
 8001288:	bd80      	pop	{r7, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	2000022c 	.word	0x2000022c

08001290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001294:	f001 fe26 	bl	8002ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001298:	f000 f89a 	bl	80013d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800129c:	f000 faaa 	bl	80017f4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012a0:	f000 fa8a 	bl	80017b8 <MX_DMA_Init>
  MX_ADC1_Init();
 80012a4:	f000 f90a 	bl	80014bc <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80012a8:	f000 fa4a 	bl	8001740 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012ac:	f000 f9aa 	bl	8001604 <MX_I2C1_Init>
  MX_TIM1_Init();
 80012b0:	f000 f9e8 	bl	8001684 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, ADC_ConvertedValue, 4);
 80012b4:	4936      	ldr	r1, [pc, #216]	; (8001390 <main+0x100>)
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <main+0x104>)
 80012b8:	2204      	movs	r2, #4
 80012ba:	0018      	movs	r0, r3
 80012bc:	f002 f9a6 	bl	800360c <HAL_ADC_Start_DMA>
  Hal_LED_Driver_Initial();
 80012c0:	f7fe ffb4 	bl	800022c <Hal_LED_Driver_Initial>

  //Init SW3/SW4 LED and LED9
  if(1) {
      LED9      = signle_LED_rgb_G;
 80012c4:	4b34      	ldr	r3, [pc, #208]	; (8001398 <main+0x108>)
 80012c6:	2202      	movs	r2, #2
 80012c8:	701a      	strb	r2, [r3, #0]

      SW3_LED21 = signle_LED_rgb_G;
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <main+0x10c>)
 80012cc:	2202      	movs	r2, #2
 80012ce:	701a      	strb	r2, [r3, #0]
      SW3_LED19 = signle_LED_rgb_G;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <main+0x110>)
 80012d2:	2202      	movs	r2, #2
 80012d4:	701a      	strb	r2, [r3, #0]
      SW3_LED20 = signle_LED_rgb_G;
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <main+0x114>)
 80012d8:	2202      	movs	r2, #2
 80012da:	701a      	strb	r2, [r3, #0]

      SW4_LED18 = signle_LED_rgb_G;
 80012dc:	4b32      	ldr	r3, [pc, #200]	; (80013a8 <main+0x118>)
 80012de:	2202      	movs	r2, #2
 80012e0:	701a      	strb	r2, [r3, #0]
      SW4_LED16 = signle_LED_rgb_G;
 80012e2:	4b32      	ldr	r3, [pc, #200]	; (80013ac <main+0x11c>)
 80012e4:	2202      	movs	r2, #2
 80012e6:	701a      	strb	r2, [r3, #0]
      SW4_LED15 = signle_LED_rgb_G;
 80012e8:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <main+0x120>)
 80012ea:	2202      	movs	r2, #2
 80012ec:	701a      	strb	r2, [r3, #0]
  }

  printf("Init Done\r\n");
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <main+0x124>)
 80012f0:	0018      	movs	r0, r3
 80012f2:	f006 ff97 	bl	8008224 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    //Follow systick 1ms
    if(uwTick_Private != uwTick) {
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <main+0x128>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4b30      	ldr	r3, [pc, #192]	; (80013bc <main+0x12c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d0f9      	beq.n	80012f6 <main+0x66>
        uwTick_Private++;
 8001302:	4b2d      	ldr	r3, [pc, #180]	; (80013b8 <main+0x128>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	4b2b      	ldr	r3, [pc, #172]	; (80013b8 <main+0x128>)
 800130a:	601a      	str	r2, [r3, #0]

        Polling_Task_1ms();
 800130c:	f000 fbfe 	bl	8001b0c <Polling_Task_1ms>

        uwTick_10ms++;
 8001310:	4b2b      	ldr	r3, [pc, #172]	; (80013c0 <main+0x130>)
 8001312:	881b      	ldrh	r3, [r3, #0]
 8001314:	3301      	adds	r3, #1
 8001316:	b29a      	uxth	r2, r3
 8001318:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <main+0x130>)
 800131a:	801a      	strh	r2, [r3, #0]
        if(uwTick_10ms>=10) {
 800131c:	4b28      	ldr	r3, [pc, #160]	; (80013c0 <main+0x130>)
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	2b09      	cmp	r3, #9
 8001322:	d904      	bls.n	800132e <main+0x9e>
            uwTick_10ms = 0;
 8001324:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <main+0x130>)
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]

            Polling_Task_10ms();
 800132a:	f000 fc39 	bl	8001ba0 <Polling_Task_10ms>
        }

        uwTick_50ms++;
 800132e:	4b25      	ldr	r3, [pc, #148]	; (80013c4 <main+0x134>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	b29a      	uxth	r2, r3
 8001336:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <main+0x134>)
 8001338:	801a      	strh	r2, [r3, #0]
        if(uwTick_50ms>=50) {
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <main+0x134>)
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	2b31      	cmp	r3, #49	; 0x31
 8001340:	d904      	bls.n	800134c <main+0xbc>
            uwTick_50ms = 0;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <main+0x134>)
 8001344:	2200      	movs	r2, #0
 8001346:	801a      	strh	r2, [r3, #0]

            Polling_Task_50ms();
 8001348:	f000 fc35 	bl	8001bb6 <Polling_Task_50ms>
        }

        uwTick_100ms++;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <main+0x138>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	3301      	adds	r3, #1
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b1c      	ldr	r3, [pc, #112]	; (80013c8 <main+0x138>)
 8001356:	801a      	strh	r2, [r3, #0]
        if(uwTick_100ms>=100) {
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <main+0x138>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b63      	cmp	r3, #99	; 0x63
 800135e:	d904      	bls.n	800136a <main+0xda>
            uwTick_100ms = 0;
 8001360:	4b19      	ldr	r3, [pc, #100]	; (80013c8 <main+0x138>)
 8001362:	2200      	movs	r2, #0
 8001364:	801a      	strh	r2, [r3, #0]

            Polling_Task_100ms();
 8001366:	f000 fc2b 	bl	8001bc0 <Polling_Task_100ms>
        }

        uwTick_1s++;
 800136a:	4b18      	ldr	r3, [pc, #96]	; (80013cc <main+0x13c>)
 800136c:	881b      	ldrh	r3, [r3, #0]
 800136e:	3301      	adds	r3, #1
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <main+0x13c>)
 8001374:	801a      	strh	r2, [r3, #0]
        if(uwTick_1s>=1000) {
 8001376:	4b15      	ldr	r3, [pc, #84]	; (80013cc <main+0x13c>)
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	23fa      	movs	r3, #250	; 0xfa
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	429a      	cmp	r2, r3
 8001380:	d3b9      	bcc.n	80012f6 <main+0x66>
            uwTick_1s = 0;
 8001382:	4b12      	ldr	r3, [pc, #72]	; (80013cc <main+0x13c>)
 8001384:	2200      	movs	r2, #0
 8001386:	801a      	strh	r2, [r3, #0]

            Polling_Task_1s();
 8001388:	f000 fc34 	bl	8001bf4 <Polling_Task_1s>
    if(uwTick_Private != uwTick) {
 800138c:	e7b3      	b.n	80012f6 <main+0x66>
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	200001f0 	.word	0x200001f0
 8001394:	20000278 	.word	0x20000278
 8001398:	20000090 	.word	0x20000090
 800139c:	20000093 	.word	0x20000093
 80013a0:	20000091 	.word	0x20000091
 80013a4:	20000092 	.word	0x20000092
 80013a8:	20000096 	.word	0x20000096
 80013ac:	20000095 	.word	0x20000095
 80013b0:	20000094 	.word	0x20000094
 80013b4:	08009158 	.word	0x08009158
 80013b8:	20000414 	.word	0x20000414
 80013bc:	20000418 	.word	0x20000418
 80013c0:	200001e6 	.word	0x200001e6
 80013c4:	200001e8 	.word	0x200001e8
 80013c8:	200001ea 	.word	0x200001ea
 80013cc:	200001ec 	.word	0x200001ec

080013d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b099      	sub	sp, #100	; 0x64
 80013d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013d6:	242c      	movs	r4, #44	; 0x2c
 80013d8:	193b      	adds	r3, r7, r4
 80013da:	0018      	movs	r0, r3
 80013dc:	2334      	movs	r3, #52	; 0x34
 80013de:	001a      	movs	r2, r3
 80013e0:	2100      	movs	r1, #0
 80013e2:	f006 fe8b 	bl	80080fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013e6:	231c      	movs	r3, #28
 80013e8:	18fb      	adds	r3, r7, r3
 80013ea:	0018      	movs	r0, r3
 80013ec:	2310      	movs	r3, #16
 80013ee:	001a      	movs	r2, r3
 80013f0:	2100      	movs	r1, #0
 80013f2:	f006 fe83 	bl	80080fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	0018      	movs	r0, r3
 80013fa:	2318      	movs	r3, #24
 80013fc:	001a      	movs	r2, r3
 80013fe:	2100      	movs	r1, #0
 8001400:	f006 fe7c 	bl	80080fc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	0018      	movs	r0, r3
 800140a:	f003 fded 	bl	8004fe8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800140e:	193b      	adds	r3, r7, r4
 8001410:	2202      	movs	r2, #2
 8001412:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001414:	193b      	adds	r3, r7, r4
 8001416:	2280      	movs	r2, #128	; 0x80
 8001418:	0052      	lsls	r2, r2, #1
 800141a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800141c:	0021      	movs	r1, r4
 800141e:	187b      	adds	r3, r7, r1
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001424:	187b      	adds	r3, r7, r1
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142a:	187b      	adds	r3, r7, r1
 800142c:	2202      	movs	r2, #2
 800142e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2202      	movs	r2, #2
 8001434:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2208      	movs	r2, #8
 8001440:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2280      	movs	r2, #128	; 0x80
 8001446:	0292      	lsls	r2, r2, #10
 8001448:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800144a:	187b      	adds	r3, r7, r1
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	0592      	lsls	r2, r2, #22
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001452:	187b      	adds	r3, r7, r1
 8001454:	0018      	movs	r0, r3
 8001456:	f003 fe13 	bl	8005080 <HAL_RCC_OscConfig>
 800145a:	1e03      	subs	r3, r0, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x92>
  {
    Error_Handler();
 800145e:	f001 faad 	bl	80029bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001462:	211c      	movs	r1, #28
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2207      	movs	r2, #7
 8001468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2202      	movs	r2, #2
 800146e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2200      	movs	r2, #0
 800147a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800147c:	187b      	adds	r3, r7, r1
 800147e:	2102      	movs	r1, #2
 8001480:	0018      	movs	r0, r3
 8001482:	f004 f913 	bl	80056ac <HAL_RCC_ClockConfig>
 8001486:	1e03      	subs	r3, r0, #0
 8001488:	d001      	beq.n	800148e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800148a:	f001 fa97 	bl	80029bc <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC;
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4a09      	ldr	r2, [pc, #36]	; (80014b8 <SystemClock_Config+0xe8>)
 8001492:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	0018      	movs	r0, r3
 80014a4:	f004 faac 	bl	8005a00 <HAL_RCCEx_PeriphCLKConfig>
 80014a8:	1e03      	subs	r3, r0, #0
 80014aa:	d001      	beq.n	80014b0 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80014ac:	f001 fa86 	bl	80029bc <Error_Handler>
  }
}
 80014b0:	46c0      	nop			; (mov r8, r8)
 80014b2:	46bd      	mov	sp, r7
 80014b4:	b019      	add	sp, #100	; 0x64
 80014b6:	bd90      	pop	{r4, r7, pc}
 80014b8:	00004020 	.word	0x00004020

080014bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	0018      	movs	r0, r3
 80014c6:	230c      	movs	r3, #12
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f006 fe16 	bl	80080fc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80014d0:	4b46      	ldr	r3, [pc, #280]	; (80015ec <MX_ADC1_Init+0x130>)
 80014d2:	4a47      	ldr	r2, [pc, #284]	; (80015f0 <MX_ADC1_Init+0x134>)
 80014d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV10;
 80014d6:	4b45      	ldr	r3, [pc, #276]	; (80015ec <MX_ADC1_Init+0x130>)
 80014d8:	22a0      	movs	r2, #160	; 0xa0
 80014da:	0352      	lsls	r2, r2, #13
 80014dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014de:	4b43      	ldr	r3, [pc, #268]	; (80015ec <MX_ADC1_Init+0x130>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014e4:	4b41      	ldr	r3, [pc, #260]	; (80015ec <MX_ADC1_Init+0x130>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80014ea:	4b40      	ldr	r3, [pc, #256]	; (80015ec <MX_ADC1_Init+0x130>)
 80014ec:	2280      	movs	r2, #128	; 0x80
 80014ee:	0392      	lsls	r2, r2, #14
 80014f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014f2:	4b3e      	ldr	r3, [pc, #248]	; (80015ec <MX_ADC1_Init+0x130>)
 80014f4:	2204      	movs	r2, #4
 80014f6:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80014f8:	4b3c      	ldr	r3, [pc, #240]	; (80015ec <MX_ADC1_Init+0x130>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80014fe:	4b3b      	ldr	r3, [pc, #236]	; (80015ec <MX_ADC1_Init+0x130>)
 8001500:	2200      	movs	r2, #0
 8001502:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001504:	4b39      	ldr	r3, [pc, #228]	; (80015ec <MX_ADC1_Init+0x130>)
 8001506:	2201      	movs	r2, #1
 8001508:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 4;
 800150a:	4b38      	ldr	r3, [pc, #224]	; (80015ec <MX_ADC1_Init+0x130>)
 800150c:	2204      	movs	r2, #4
 800150e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001510:	4b36      	ldr	r3, [pc, #216]	; (80015ec <MX_ADC1_Init+0x130>)
 8001512:	2220      	movs	r2, #32
 8001514:	2100      	movs	r1, #0
 8001516:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001518:	4b34      	ldr	r3, [pc, #208]	; (80015ec <MX_ADC1_Init+0x130>)
 800151a:	2200      	movs	r2, #0
 800151c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800151e:	4b33      	ldr	r3, [pc, #204]	; (80015ec <MX_ADC1_Init+0x130>)
 8001520:	2200      	movs	r2, #0
 8001522:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001524:	4b31      	ldr	r3, [pc, #196]	; (80015ec <MX_ADC1_Init+0x130>)
 8001526:	222c      	movs	r2, #44	; 0x2c
 8001528:	2101      	movs	r1, #1
 800152a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800152c:	4b2f      	ldr	r3, [pc, #188]	; (80015ec <MX_ADC1_Init+0x130>)
 800152e:	2200      	movs	r2, #0
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <MX_ADC1_Init+0x130>)
 8001534:	2200      	movs	r2, #0
 8001536:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8001538:	4b2c      	ldr	r3, [pc, #176]	; (80015ec <MX_ADC1_Init+0x130>)
 800153a:	2200      	movs	r2, #0
 800153c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <MX_ADC1_Init+0x130>)
 8001540:	223c      	movs	r2, #60	; 0x3c
 8001542:	2100      	movs	r1, #0
 8001544:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8001546:	4b29      	ldr	r3, [pc, #164]	; (80015ec <MX_ADC1_Init+0x130>)
 8001548:	2200      	movs	r2, #0
 800154a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800154c:	4b27      	ldr	r3, [pc, #156]	; (80015ec <MX_ADC1_Init+0x130>)
 800154e:	0018      	movs	r0, r3
 8001550:	f001 fe7e 	bl	8003250 <HAL_ADC_Init>
 8001554:	1e03      	subs	r3, r0, #0
 8001556:	d001      	beq.n	800155c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8001558:	f001 fa30 	bl	80029bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4a25      	ldr	r2, [pc, #148]	; (80015f4 <MX_ADC1_Init+0x138>)
 8001560:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800156e:	1d3a      	adds	r2, r7, #4
 8001570:	4b1e      	ldr	r3, [pc, #120]	; (80015ec <MX_ADC1_Init+0x130>)
 8001572:	0011      	movs	r1, r2
 8001574:	0018      	movs	r0, r3
 8001576:	f002 f8ef 	bl	8003758 <HAL_ADC_ConfigChannel>
 800157a:	1e03      	subs	r3, r0, #0
 800157c:	d001      	beq.n	8001582 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800157e:	f001 fa1d 	bl	80029bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <MX_ADC1_Init+0x13c>)
 8001586:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001588:	1d3b      	adds	r3, r7, #4
 800158a:	2204      	movs	r2, #4
 800158c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800158e:	1d3a      	adds	r2, r7, #4
 8001590:	4b16      	ldr	r3, [pc, #88]	; (80015ec <MX_ADC1_Init+0x130>)
 8001592:	0011      	movs	r1, r2
 8001594:	0018      	movs	r0, r3
 8001596:	f002 f8df 	bl	8003758 <HAL_ADC_ConfigChannel>
 800159a:	1e03      	subs	r3, r0, #0
 800159c:	d001      	beq.n	80015a2 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 800159e:	f001 fa0d 	bl	80029bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	4a15      	ldr	r2, [pc, #84]	; (80015fc <MX_ADC1_Init+0x140>)
 80015a6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	2208      	movs	r2, #8
 80015ac:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ae:	1d3a      	adds	r2, r7, #4
 80015b0:	4b0e      	ldr	r3, [pc, #56]	; (80015ec <MX_ADC1_Init+0x130>)
 80015b2:	0011      	movs	r1, r2
 80015b4:	0018      	movs	r0, r3
 80015b6:	f002 f8cf 	bl	8003758 <HAL_ADC_ConfigChannel>
 80015ba:	1e03      	subs	r3, r0, #0
 80015bc:	d001      	beq.n	80015c2 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 80015be:	f001 f9fd 	bl	80029bc <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80015c2:	1d3b      	adds	r3, r7, #4
 80015c4:	4a0e      	ldr	r2, [pc, #56]	; (8001600 <MX_ADC1_Init+0x144>)
 80015c6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	220c      	movs	r2, #12
 80015cc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ce:	1d3a      	adds	r2, r7, #4
 80015d0:	4b06      	ldr	r3, [pc, #24]	; (80015ec <MX_ADC1_Init+0x130>)
 80015d2:	0011      	movs	r1, r2
 80015d4:	0018      	movs	r0, r3
 80015d6:	f002 f8bf 	bl	8003758 <HAL_ADC_ConfigChannel>
 80015da:	1e03      	subs	r3, r0, #0
 80015dc:	d001      	beq.n	80015e2 <MX_ADC1_Init+0x126>
  {
    Error_Handler();
 80015de:	f001 f9ed 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	20000278 	.word	0x20000278
 80015f0:	40012400 	.word	0x40012400
 80015f4:	04000002 	.word	0x04000002
 80015f8:	18000040 	.word	0x18000040
 80015fc:	1c000080 	.word	0x1c000080
 8001600:	24000200 	.word	0x24000200

08001604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001608:	4b1b      	ldr	r3, [pc, #108]	; (8001678 <MX_I2C1_Init+0x74>)
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <MX_I2C1_Init+0x78>)
 800160c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <MX_I2C1_Init+0x74>)
 8001610:	4a1b      	ldr	r2, [pc, #108]	; (8001680 <MX_I2C1_Init+0x7c>)
 8001612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <MX_I2C1_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <MX_I2C1_Init+0x74>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001626:	4b14      	ldr	r3, [pc, #80]	; (8001678 <MX_I2C1_Init+0x74>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <MX_I2C1_Init+0x74>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <MX_I2C1_Init+0x74>)
 8001634:	2200      	movs	r2, #0
 8001636:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001638:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <MX_I2C1_Init+0x74>)
 800163a:	2200      	movs	r2, #0
 800163c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800163e:	4b0e      	ldr	r3, [pc, #56]	; (8001678 <MX_I2C1_Init+0x74>)
 8001640:	0018      	movs	r0, r3
 8001642:	f003 f90f 	bl	8004864 <HAL_I2C_Init>
 8001646:	1e03      	subs	r3, r0, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164a:	f001 f9b7 	bl	80029bc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <MX_I2C1_Init+0x74>)
 8001650:	2100      	movs	r1, #0
 8001652:	0018      	movs	r0, r3
 8001654:	f003 fc30 	bl	8004eb8 <HAL_I2CEx_ConfigAnalogFilter>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d001      	beq.n	8001660 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800165c:	f001 f9ae 	bl	80029bc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <MX_I2C1_Init+0x74>)
 8001662:	2100      	movs	r1, #0
 8001664:	0018      	movs	r0, r3
 8001666:	f003 fc73 	bl	8004f50 <HAL_I2CEx_ConfigDigitalFilter>
 800166a:	1e03      	subs	r3, r0, #0
 800166c:	d001      	beq.n	8001672 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800166e:	f001 f9a5 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	2000022c 	.word	0x2000022c
 800167c:	40005400 	.word	0x40005400
 8001680:	00602173 	.word	0x00602173

08001684 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b088      	sub	sp, #32
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	2310      	movs	r3, #16
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	0018      	movs	r0, r3
 8001690:	2310      	movs	r3, #16
 8001692:	001a      	movs	r2, r3
 8001694:	2100      	movs	r1, #0
 8001696:	f006 fd31 	bl	80080fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	0018      	movs	r0, r3
 800169e:	230c      	movs	r3, #12
 80016a0:	001a      	movs	r2, r3
 80016a2:	2100      	movs	r1, #0
 80016a4:	f006 fd2a 	bl	80080fc <memset>
   * Target to : 64MHz / (64x50) = 20,000 Hz
   * Actually : 64MHz / ( (64+1) x (50+1) ) = 19,306.2 Hz
   */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016aa:	4a24      	ldr	r2, [pc, #144]	; (800173c <MX_TIM1_Init+0xb8>)
 80016ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64;
 80016ae:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016b0:	2240      	movs	r2, #64	; 0x40
 80016b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b4:	4b20      	ldr	r3, [pc, #128]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50;
 80016ba:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016bc:	2232      	movs	r2, #50	; 0x32
 80016be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b1d      	ldr	r3, [pc, #116]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016d2:	4b19      	ldr	r3, [pc, #100]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016d4:	0018      	movs	r0, r3
 80016d6:	f004 fab9 	bl	8005c4c <HAL_TIM_Base_Init>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 80016de:	f001 f96d 	bl	80029bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e2:	2110      	movs	r1, #16
 80016e4:	187b      	adds	r3, r7, r1
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	0152      	lsls	r2, r2, #5
 80016ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016ec:	187a      	adds	r2, r7, r1
 80016ee:	4b12      	ldr	r3, [pc, #72]	; (8001738 <MX_TIM1_Init+0xb4>)
 80016f0:	0011      	movs	r1, r2
 80016f2:	0018      	movs	r0, r3
 80016f4:	f004 fc82 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 80016f8:	1e03      	subs	r3, r0, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80016fc:	f001 f95e 	bl	80029bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001700:	1d3b      	adds	r3, r7, #4
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001706:	1d3b      	adds	r3, r7, #4
 8001708:	2200      	movs	r2, #0
 800170a:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170c:	1d3b      	adds	r3, r7, #4
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001712:	1d3a      	adds	r2, r7, #4
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <MX_TIM1_Init+0xb4>)
 8001716:	0011      	movs	r1, r2
 8001718:	0018      	movs	r0, r3
 800171a:	f004 fe63 	bl	80063e4 <HAL_TIMEx_MasterConfigSynchronization>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001722:	f001 f94b 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8001726:	4b04      	ldr	r3, [pc, #16]	; (8001738 <MX_TIM1_Init+0xb4>)
 8001728:	0018      	movs	r0, r3
 800172a:	f004 fae7 	bl	8005cfc <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM1_Init 2 */

}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b008      	add	sp, #32
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	20000338 	.word	0x20000338
 800173c:	40012c00 	.word	0x40012c00

08001740 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001744:	4b19      	ldr	r3, [pc, #100]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001746:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <MX_USART2_UART_Init+0x70>)
 8001748:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800174a:	4b18      	ldr	r3, [pc, #96]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800174c:	22e1      	movs	r2, #225	; 0xe1
 800174e:	0252      	lsls	r2, r2, #9
 8001750:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001754:	2200      	movs	r2, #0
 8001756:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001758:	4b14      	ldr	r3, [pc, #80]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800175a:	2200      	movs	r2, #0
 800175c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175e:	4b13      	ldr	r3, [pc, #76]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001760:	2200      	movs	r2, #0
 8001762:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001766:	220c      	movs	r2, #12
 8001768:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001770:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001776:	4b0d      	ldr	r3, [pc, #52]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800177e:	2200      	movs	r2, #0
 8001780:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001782:	4b0a      	ldr	r3, [pc, #40]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 8001784:	2200      	movs	r2, #0
 8001786:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001788:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800178a:	0018      	movs	r0, r3
 800178c:	f004 fea4 	bl	80064d8 <HAL_UART_Init>
 8001790:	1e03      	subs	r3, r0, #0
 8001792:	d001      	beq.n	8001798 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001794:	f001 f912 	bl	80029bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, Getchar, 1);
 8001798:	4906      	ldr	r1, [pc, #24]	; (80017b4 <MX_USART2_UART_Init+0x74>)
 800179a:	4b04      	ldr	r3, [pc, #16]	; (80017ac <MX_USART2_UART_Init+0x6c>)
 800179c:	2201      	movs	r2, #1
 800179e:	0018      	movs	r0, r3
 80017a0:	f004 ff9b 	bl	80066da <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 80017a4:	46c0      	nop			; (mov r8, r8)
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	20000384 	.word	0x20000384
 80017b0:	40004400 	.word	0x40004400
 80017b4:	200001e0 	.word	0x200001e0

080017b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_DMA_Init+0x38>)
 80017c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_DMA_Init+0x38>)
 80017c4:	2101      	movs	r1, #1
 80017c6:	430a      	orrs	r2, r1
 80017c8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_DMA_Init+0x38>)
 80017cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2009      	movs	r0, #9
 80017dc:	f002 fb54 	bl	8003e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80017e0:	2009      	movs	r0, #9
 80017e2:	f002 fb66 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

}
 80017e6:	46c0      	nop			; (mov r8, r8)
 80017e8:	46bd      	mov	sp, r7
 80017ea:	b002      	add	sp, #8
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	40021000 	.word	0x40021000

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b08d      	sub	sp, #52	; 0x34
 80017f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	241c      	movs	r4, #28
 80017fc:	193b      	adds	r3, r7, r4
 80017fe:	0018      	movs	r0, r3
 8001800:	2314      	movs	r3, #20
 8001802:	001a      	movs	r2, r3
 8001804:	2100      	movs	r1, #0
 8001806:	f006 fc79 	bl	80080fc <memset>
        #define IS31FL3237_EN      GPIOA,GPIO_PIN_10
        #define IS31FL3237_EN_port GPIOA
        #define IS31FL3237_EN_pin  GPIO_PIN_10

        /* GPIO Ports Clock Enable */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 800180a:	4bbd      	ldr	r3, [pc, #756]	; (8001b00 <MX_GPIO_Init+0x30c>)
 800180c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180e:	4bbc      	ldr	r3, [pc, #752]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001810:	2101      	movs	r1, #1
 8001812:	430a      	orrs	r2, r1
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
 8001816:	4bba      	ldr	r3, [pc, #744]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181a:	2201      	movs	r2, #1
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
 8001820:	69bb      	ldr	r3, [r7, #24]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 8001822:	4bb7      	ldr	r3, [pc, #732]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001826:	4bb6      	ldr	r3, [pc, #728]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001828:	2102      	movs	r1, #2
 800182a:	430a      	orrs	r2, r1
 800182c:	635a      	str	r2, [r3, #52]	; 0x34
 800182e:	4bb4      	ldr	r3, [pc, #720]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	617b      	str	r3, [r7, #20]
 8001838:	697b      	ldr	r3, [r7, #20]

        /* Configure GPIO pin */
        GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800183a:	193b      	adds	r3, r7, r4
 800183c:	2201      	movs	r2, #1
 800183e:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001840:	193b      	adds	r3, r7, r4
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001846:	193b      	adds	r3, r7, r4
 8001848:	2203      	movs	r2, #3
 800184a:	60da      	str	r2, [r3, #12]

        /* Configure LED GPIO pin */
        GPIO_InitStruct.Pin = IS31FL3237_EN_pin; HAL_GPIO_Init(IS31FL3237_EN_port, &GPIO_InitStruct);
 800184c:	193b      	adds	r3, r7, r4
 800184e:	2280      	movs	r2, #128	; 0x80
 8001850:	00d2      	lsls	r2, r2, #3
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	193a      	adds	r2, r7, r4
 8001856:	23a0      	movs	r3, #160	; 0xa0
 8001858:	05db      	lsls	r3, r3, #23
 800185a:	0011      	movs	r1, r2
 800185c:	0018      	movs	r0, r3
 800185e:	f002 fe63 	bl	8004528 <HAL_GPIO_Init>

        /* Configure GPIO pin Output Level */
        HAL_GPIO_WritePin(IS31FL3237_EN, ON);
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	00d9      	lsls	r1, r3, #3
 8001866:	23a0      	movs	r3, #160	; 0xa0
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	2201      	movs	r2, #1
 800186c:	0018      	movs	r0, r3
 800186e:	f002 ffdc 	bl	800482a <HAL_GPIO_WritePin>
        #define Preset_LED08      GPIOA,GPIO_PIN_0
        #define Preset_LED08_port GPIOA
        #define Preset_LED08_pin  GPIO_PIN_0

        /* GPIO Ports Clock Enable */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 8001872:	4ba3      	ldr	r3, [pc, #652]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001874:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001876:	4ba2      	ldr	r3, [pc, #648]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001878:	2101      	movs	r1, #1
 800187a:	430a      	orrs	r2, r1
 800187c:	635a      	str	r2, [r3, #52]	; 0x34
 800187e:	4ba0      	ldr	r3, [pc, #640]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001882:	2201      	movs	r2, #1
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
 8001888:	693b      	ldr	r3, [r7, #16]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 800188a:	4b9d      	ldr	r3, [pc, #628]	; (8001b00 <MX_GPIO_Init+0x30c>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800188e:	4b9c      	ldr	r3, [pc, #624]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001890:	2102      	movs	r1, #2
 8001892:	430a      	orrs	r2, r1
 8001894:	635a      	str	r2, [r3, #52]	; 0x34
 8001896:	4b9a      	ldr	r3, [pc, #616]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189a:	2202      	movs	r2, #2
 800189c:	4013      	ands	r3, r2
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	68fb      	ldr	r3, [r7, #12]

        /* Configure GPIO pin */
        GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 80018a2:	193b      	adds	r3, r7, r4
 80018a4:	2201      	movs	r2, #1
 80018a6:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80018a8:	193b      	adds	r3, r7, r4
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ae:	193b      	adds	r3, r7, r4
 80018b0:	2203      	movs	r2, #3
 80018b2:	60da      	str	r2, [r3, #12]

        /* Configure LED GPIO pin */
        GPIO_InitStruct.Pin = Preset_LED01_pin; HAL_GPIO_Init(Preset_LED01_port, &GPIO_InitStruct);
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	2210      	movs	r2, #16
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	193a      	adds	r2, r7, r4
 80018bc:	23a0      	movs	r3, #160	; 0xa0
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	0011      	movs	r1, r2
 80018c2:	0018      	movs	r0, r3
 80018c4:	f002 fe30 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED02_pin; HAL_GPIO_Init(Preset_LED02_port, &GPIO_InitStruct);
 80018c8:	193b      	adds	r3, r7, r4
 80018ca:	2220      	movs	r2, #32
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	193a      	adds	r2, r7, r4
 80018d0:	23a0      	movs	r3, #160	; 0xa0
 80018d2:	05db      	lsls	r3, r3, #23
 80018d4:	0011      	movs	r1, r2
 80018d6:	0018      	movs	r0, r3
 80018d8:	f002 fe26 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED03_pin; HAL_GPIO_Init(Preset_LED03_port, &GPIO_InitStruct);
 80018dc:	193b      	adds	r3, r7, r4
 80018de:	2280      	movs	r2, #128	; 0x80
 80018e0:	0112      	lsls	r2, r2, #4
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	193a      	adds	r2, r7, r4
 80018e6:	23a0      	movs	r3, #160	; 0xa0
 80018e8:	05db      	lsls	r3, r3, #23
 80018ea:	0011      	movs	r1, r2
 80018ec:	0018      	movs	r0, r3
 80018ee:	f002 fe1b 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED04_pin; HAL_GPIO_Init(Preset_LED04_port, &GPIO_InitStruct);
 80018f2:	193b      	adds	r3, r7, r4
 80018f4:	2280      	movs	r2, #128	; 0x80
 80018f6:	0152      	lsls	r2, r2, #5
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	193a      	adds	r2, r7, r4
 80018fc:	23a0      	movs	r3, #160	; 0xa0
 80018fe:	05db      	lsls	r3, r3, #23
 8001900:	0011      	movs	r1, r2
 8001902:	0018      	movs	r0, r3
 8001904:	f002 fe10 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED05_pin; HAL_GPIO_Init(Preset_LED05_port, &GPIO_InitStruct);
 8001908:	193b      	adds	r3, r7, r4
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	0212      	lsls	r2, r2, #8
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	193a      	adds	r2, r7, r4
 8001912:	23a0      	movs	r3, #160	; 0xa0
 8001914:	05db      	lsls	r3, r3, #23
 8001916:	0011      	movs	r1, r2
 8001918:	0018      	movs	r0, r3
 800191a:	f002 fe05 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED06_pin; HAL_GPIO_Init(Preset_LED06_port, &GPIO_InitStruct);
 800191e:	193b      	adds	r3, r7, r4
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	0052      	lsls	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	193b      	adds	r3, r7, r4
 8001928:	4a76      	ldr	r2, [pc, #472]	; (8001b04 <MX_GPIO_Init+0x310>)
 800192a:	0019      	movs	r1, r3
 800192c:	0010      	movs	r0, r2
 800192e:	f002 fdfb 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED07_pin; HAL_GPIO_Init(Preset_LED07_port, &GPIO_InitStruct);
 8001932:	193b      	adds	r3, r7, r4
 8001934:	2280      	movs	r2, #128	; 0x80
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	193b      	adds	r3, r7, r4
 800193c:	4a71      	ldr	r2, [pc, #452]	; (8001b04 <MX_GPIO_Init+0x310>)
 800193e:	0019      	movs	r1, r3
 8001940:	0010      	movs	r0, r2
 8001942:	f002 fdf1 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED08_pin; HAL_GPIO_Init(Preset_LED08_port, &GPIO_InitStruct);
 8001946:	193b      	adds	r3, r7, r4
 8001948:	2201      	movs	r2, #1
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	193a      	adds	r2, r7, r4
 800194e:	23a0      	movs	r3, #160	; 0xa0
 8001950:	05db      	lsls	r3, r3, #23
 8001952:	0011      	movs	r1, r2
 8001954:	0018      	movs	r0, r3
 8001956:	f002 fde7 	bl	8004528 <HAL_GPIO_Init>

        /* Configure GPIO pin Output Level */
        HAL_GPIO_WritePin(Preset_LED01, OFF);
 800195a:	23a0      	movs	r3, #160	; 0xa0
 800195c:	05db      	lsls	r3, r3, #23
 800195e:	2200      	movs	r2, #0
 8001960:	2110      	movs	r1, #16
 8001962:	0018      	movs	r0, r3
 8001964:	f002 ff61 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED02, OFF);
 8001968:	23a0      	movs	r3, #160	; 0xa0
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	2200      	movs	r2, #0
 800196e:	2120      	movs	r1, #32
 8001970:	0018      	movs	r0, r3
 8001972:	f002 ff5a 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED03, OFF);
 8001976:	2380      	movs	r3, #128	; 0x80
 8001978:	0119      	lsls	r1, r3, #4
 800197a:	23a0      	movs	r3, #160	; 0xa0
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	2200      	movs	r2, #0
 8001980:	0018      	movs	r0, r3
 8001982:	f002 ff52 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED04, OFF);
 8001986:	2380      	movs	r3, #128	; 0x80
 8001988:	0159      	lsls	r1, r3, #5
 800198a:	23a0      	movs	r3, #160	; 0xa0
 800198c:	05db      	lsls	r3, r3, #23
 800198e:	2200      	movs	r2, #0
 8001990:	0018      	movs	r0, r3
 8001992:	f002 ff4a 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED05, OFF);
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	0219      	lsls	r1, r3, #8
 800199a:	23a0      	movs	r3, #160	; 0xa0
 800199c:	05db      	lsls	r3, r3, #23
 800199e:	2200      	movs	r2, #0
 80019a0:	0018      	movs	r0, r3
 80019a2:	f002 ff42 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED06, OFF);
 80019a6:	2380      	movs	r3, #128	; 0x80
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4856      	ldr	r0, [pc, #344]	; (8001b04 <MX_GPIO_Init+0x310>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	0019      	movs	r1, r3
 80019b0:	f002 ff3b 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED07, OFF);
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	4852      	ldr	r0, [pc, #328]	; (8001b04 <MX_GPIO_Init+0x310>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	0019      	movs	r1, r3
 80019be:	f002 ff34 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED08, OFF);
 80019c2:	23a0      	movs	r3, #160	; 0xa0
 80019c4:	05db      	lsls	r3, r3, #23
 80019c6:	2200      	movs	r2, #0
 80019c8:	2101      	movs	r1, #1
 80019ca:	0018      	movs	r0, r3
 80019cc:	f002 ff2d 	bl	800482a <HAL_GPIO_WritePin>
        #define Mic_Mute             GPIOB,GPIO_PIN_2
        #define Mic_Mute_port        GPIOB
        #define Mic_Mute_pin         GPIO_PIN_2

        /* GPIO Ports Clock Enable */
        __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	4b4b      	ldr	r3, [pc, #300]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019d4:	4b4a      	ldr	r3, [pc, #296]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019d6:	2101      	movs	r1, #1
 80019d8:	430a      	orrs	r2, r1
 80019da:	635a      	str	r2, [r3, #52]	; 0x34
 80019dc:	4b48      	ldr	r3, [pc, #288]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019e0:	2201      	movs	r2, #1
 80019e2:	4013      	ands	r3, r2
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	68bb      	ldr	r3, [r7, #8]
        __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e8:	4b45      	ldr	r3, [pc, #276]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019ec:	4b44      	ldr	r3, [pc, #272]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019ee:	2102      	movs	r1, #2
 80019f0:	430a      	orrs	r2, r1
 80019f2:	635a      	str	r2, [r3, #52]	; 0x34
 80019f4:	4b42      	ldr	r3, [pc, #264]	; (8001b00 <MX_GPIO_Init+0x30c>)
 80019f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f8:	2202      	movs	r2, #2
 80019fa:	4013      	ands	r3, r2
 80019fc:	607b      	str	r3, [r7, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
        __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a00:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001a02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a04:	4b3e      	ldr	r3, [pc, #248]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001a06:	2104      	movs	r1, #4
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	635a      	str	r2, [r3, #52]	; 0x34
 8001a0c:	4b3c      	ldr	r3, [pc, #240]	; (8001b00 <MX_GPIO_Init+0x30c>)
 8001a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a10:	2204      	movs	r2, #4
 8001a12:	4013      	ands	r3, r2
 8001a14:	603b      	str	r3, [r7, #0]
 8001a16:	683b      	ldr	r3, [r7, #0]

        /* Configure Button pin */
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	193b      	adds	r3, r7, r4
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	193b      	adds	r3, r7, r4
 8001a20:	2200      	movs	r2, #0
 8001a22:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	193b      	adds	r3, r7, r4
 8001a26:	2203      	movs	r2, #3
 8001a28:	60da      	str	r2, [r3, #12]

        /*Configure GPIO pin : Mic_Mute_Pin */
        //GPIO_InitStruct.Pin  = Presets_Switch_pin; HAL_GPIO_Init(Presets_Switch_port, &GPIO_InitStruct);
        GPIO_InitStruct.Pin  = Pattern_Switch_pin; HAL_GPIO_Init(Pattern_Switch_port, &GPIO_InitStruct);
 8001a2a:	193b      	adds	r3, r7, r4
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	193b      	adds	r3, r7, r4
 8001a32:	4a35      	ldr	r2, [pc, #212]	; (8001b08 <MX_GPIO_Init+0x314>)
 8001a34:	0019      	movs	r1, r3
 8001a36:	0010      	movs	r0, r2
 8001a38:	f002 fd76 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin  = Headphone_Mute_pin; HAL_GPIO_Init(Headphone_Mute_port, &GPIO_InitStruct);
 8001a3c:	193b      	adds	r3, r7, r4
 8001a3e:	2280      	movs	r2, #128	; 0x80
 8001a40:	0092      	lsls	r2, r2, #2
 8001a42:	601a      	str	r2, [r3, #0]
 8001a44:	193a      	adds	r2, r7, r4
 8001a46:	23a0      	movs	r3, #160	; 0xa0
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fd6b 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin  = Mix_Mute_pin;       HAL_GPIO_Init(Mix_Mute_port,       &GPIO_InitStruct);
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2280      	movs	r2, #128	; 0x80
 8001a56:	0052      	lsls	r2, r2, #1
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	193a      	adds	r2, r7, r4
 8001a5c:	23a0      	movs	r3, #160	; 0xa0
 8001a5e:	05db      	lsls	r3, r3, #23
 8001a60:	0011      	movs	r1, r2
 8001a62:	0018      	movs	r0, r3
 8001a64:	f002 fd60 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin  = Mic_Mute_pin;       HAL_GPIO_Init(Mic_Mute_port,       &GPIO_InitStruct);
 8001a68:	193b      	adds	r3, r7, r4
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	193b      	adds	r3, r7, r4
 8001a70:	4a24      	ldr	r2, [pc, #144]	; (8001b04 <MX_GPIO_Init+0x310>)
 8001a72:	0019      	movs	r1, r3
 8001a74:	0010      	movs	r0, r2
 8001a76:	f002 fd57 	bl	8004528 <HAL_GPIO_Init>

        /* Configure GPIO pin */
        GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001a7a:	193b      	adds	r3, r7, r4
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	605a      	str	r2, [r3, #4]
        GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001a80:	193b      	adds	r3, r7, r4
 8001a82:	2200      	movs	r2, #0
 8001a84:	609a      	str	r2, [r3, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a86:	193b      	adds	r3, r7, r4
 8001a88:	2203      	movs	r2, #3
 8001a8a:	60da      	str	r2, [r3, #12]

        /* Configure LED GPIO pin */
        GPIO_InitStruct.Pin = Preset_LED01_pin; HAL_GPIO_Init(Preset_LED01_port, &GPIO_InitStruct);
 8001a8c:	193b      	adds	r3, r7, r4
 8001a8e:	2210      	movs	r2, #16
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	193a      	adds	r2, r7, r4
 8001a94:	23a0      	movs	r3, #160	; 0xa0
 8001a96:	05db      	lsls	r3, r3, #23
 8001a98:	0011      	movs	r1, r2
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f002 fd44 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED02_pin; HAL_GPIO_Init(Preset_LED02_port, &GPIO_InitStruct);
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	2220      	movs	r2, #32
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	193a      	adds	r2, r7, r4
 8001aa8:	23a0      	movs	r3, #160	; 0xa0
 8001aaa:	05db      	lsls	r3, r3, #23
 8001aac:	0011      	movs	r1, r2
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f002 fd3a 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED03_pin; HAL_GPIO_Init(Preset_LED03_port, &GPIO_InitStruct);
 8001ab4:	193b      	adds	r3, r7, r4
 8001ab6:	2280      	movs	r2, #128	; 0x80
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	193a      	adds	r2, r7, r4
 8001abe:	23a0      	movs	r3, #160	; 0xa0
 8001ac0:	05db      	lsls	r3, r3, #23
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	f002 fd2f 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED04_pin; HAL_GPIO_Init(Preset_LED04_port, &GPIO_InitStruct);
 8001aca:	193b      	adds	r3, r7, r4
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0152      	lsls	r2, r2, #5
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	193a      	adds	r2, r7, r4
 8001ad4:	23a0      	movs	r3, #160	; 0xa0
 8001ad6:	05db      	lsls	r3, r3, #23
 8001ad8:	0011      	movs	r1, r2
 8001ada:	0018      	movs	r0, r3
 8001adc:	f002 fd24 	bl	8004528 <HAL_GPIO_Init>
        GPIO_InitStruct.Pin = Preset_LED05_pin; HAL_GPIO_Init(Preset_LED05_port, &GPIO_InitStruct);
 8001ae0:	0021      	movs	r1, r4
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	2280      	movs	r2, #128	; 0x80
 8001ae6:	0212      	lsls	r2, r2, #8
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	187a      	adds	r2, r7, r1
 8001aec:	23a0      	movs	r3, #160	; 0xa0
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	0011      	movs	r1, r2
 8001af2:	0018      	movs	r0, r3
 8001af4:	f002 fd18 	bl	8004528 <HAL_GPIO_Init>
    }
}
 8001af8:	46c0      	nop			; (mov r8, r8)
 8001afa:	46bd      	mov	sp, r7
 8001afc:	b00d      	add	sp, #52	; 0x34
 8001afe:	bd90      	pop	{r4, r7, pc}
 8001b00:	40021000 	.word	0x40021000
 8001b04:	50000400 	.word	0x50000400
 8001b08:	50000800 	.word	0x50000800

08001b0c <Polling_Task_1ms>:

/* USER CODE BEGIN 4 */
void Polling_Task_1ms(void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
    //Execute per 1ms
    if(1) {
        static uint8_t Rx_Data_cnt_Private = {0};
        if(Rx_Data_cnt_Private != Rx_Data_cnt) {
 8001b10:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <Polling_Task_1ms+0x7c>)
 8001b12:	781a      	ldrb	r2, [r3, #0]
 8001b14:	4b1d      	ldr	r3, [pc, #116]	; (8001b8c <Polling_Task_1ms+0x80>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d02e      	beq.n	8001b7a <Polling_Task_1ms+0x6e>

            //printf("%c", Rx_Data[Rx_Data_cnt_Private]);
            HAL_UART_Transmit(&huart2, (uint8_t *)&Rx_Data[Rx_Data_cnt_Private], 1, 0xFFFFFFFF);
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <Polling_Task_1ms+0x7c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	001a      	movs	r2, r3
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <Polling_Task_1ms+0x84>)
 8001b24:	18d1      	adds	r1, r2, r3
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
 8001b2a:	481a      	ldr	r0, [pc, #104]	; (8001b94 <Polling_Task_1ms+0x88>)
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	f004 fd29 	bl	8006584 <HAL_UART_Transmit>
            HAL_UART_Receive_IT(&huart2, Getchar, 1);
 8001b32:	4919      	ldr	r1, [pc, #100]	; (8001b98 <Polling_Task_1ms+0x8c>)
 8001b34:	4b17      	ldr	r3, [pc, #92]	; (8001b94 <Polling_Task_1ms+0x88>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f004 fdce 	bl	80066da <HAL_UART_Receive_IT>

            switch(Rx_Data[Rx_Data_cnt_Private++]) {
 8001b3e:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <Polling_Task_1ms+0x7c>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	1c5a      	adds	r2, r3, #1
 8001b44:	b2d1      	uxtb	r1, r2
 8001b46:	4a10      	ldr	r2, [pc, #64]	; (8001b88 <Polling_Task_1ms+0x7c>)
 8001b48:	7011      	strb	r1, [r2, #0]
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <Polling_Task_1ms+0x84>)
 8001b4e:	5c9b      	ldrb	r3, [r3, r2]
 8001b50:	220d      	movs	r2, #13
 8001b52:	429a      	cmp	r2, r3
 8001b54:	4192      	sbcs	r2, r2
 8001b56:	4252      	negs	r2, r2
 8001b58:	b2d2      	uxtb	r2, r2
 8001b5a:	2a00      	cmp	r2, #0
 8001b5c:	d10f      	bne.n	8001b7e <Polling_Task_1ms+0x72>
 8001b5e:	2201      	movs	r2, #1
 8001b60:	409a      	lsls	r2, r3
 8001b62:	239a      	movs	r3, #154	; 0x9a
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	4013      	ands	r3, r2
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	4193      	sbcs	r3, r2
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <Polling_Task_1ms+0x72>
                case '\r':
                case '\n':
                case '\a':
                case '\t':
                    Rx_Data_GetCMD_flag = 1;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <Polling_Task_1ms+0x90>)
 8001b74:	2201      	movs	r2, #1
 8001b76:	701a      	strb	r2, [r3, #0]
                    break;
 8001b78:	e002      	b.n	8001b80 <Polling_Task_1ms+0x74>

                default:
                    break;
            }
        }
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	e000      	b.n	8001b80 <Polling_Task_1ms+0x74>
                    break;
 8001b7e:	46c0      	nop			; (mov r8, r8)
    }
}
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			; (mov r8, r8)
 8001b88:	20000200 	.word	0x20000200
 8001b8c:	200000dd 	.word	0x200000dd
 8001b90:	200000e0 	.word	0x200000e0
 8001b94:	20000384 	.word	0x20000384
 8001b98:	200001e0 	.word	0x200001e0
 8001b9c:	200000dc 	.word	0x200000dc

08001ba0 <Polling_Task_10ms>:

void Polling_Task_10ms(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    Task_LED_Driver();
 8001ba4:	f7fe feb8 	bl	8000918 <Task_LED_Driver>
    Task_ButtonGroup();
 8001ba8:	f000 f83c 	bl	8001c24 <Task_ButtonGroup>

    //Update GPIO_LED
    Task_Preset_LED_GPIO();
 8001bac:	f000 fdea 	bl	8002784 <Task_Preset_LED_GPIO>
}
 8001bb0:	46c0      	nop			; (mov r8, r8)
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <Polling_Task_50ms>:

void Polling_Task_50ms(void) {
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	af00      	add	r7, sp, #0

}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <Polling_Task_100ms>:

void Polling_Task_100ms(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
    if(SW6_Pattern_button_ID) {
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <Polling_Task_100ms+0x2c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <Polling_Task_100ms+0x10>

    } else {
        VR1_PreGain();
 8001bcc:	f000 f9fe 	bl	8001fcc <VR1_PreGain>
    }

    VR2_Microphone();
 8001bd0:	f000 fb14 	bl	80021fc <VR2_Microphone>
    VR3_Mix();
 8001bd4:	f000 fbe8 	bl	80023a8 <VR3_Mix>

    if(isSW5_Headphone_button_Mute) {
 8001bd8:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <Polling_Task_100ms+0x30>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d101      	bne.n	8001be4 <Polling_Task_100ms+0x24>

    } else {
        VR4_Headphone();
 8001be0:	f000 fcb8 	bl	8002554 <VR4_Headphone>
    }
}
 8001be4:	46c0      	nop			; (mov r8, r8)
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	46c0      	nop			; (mov r8, r8)
 8001bec:	200001e2 	.word	0x200001e2
 8001bf0:	200001e1 	.word	0x200001e1

08001bf4 <Polling_Task_1s>:

void Polling_Task_1s(void) {
 8001bf4:	b590      	push	{r4, r7, lr}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af02      	add	r7, sp, #8
    printf("DMA-ADC:%ld,%ld,%ld,%ld\r\n", ADC_A, ADC_B, ADC_C, ADC_D);
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <Polling_Task_1s+0x28>)
 8001bfc:	6819      	ldr	r1, [r3, #0]
 8001bfe:	4b07      	ldr	r3, [pc, #28]	; (8001c1c <Polling_Task_1s+0x28>)
 8001c00:	685a      	ldr	r2, [r3, #4]
 8001c02:	4b06      	ldr	r3, [pc, #24]	; (8001c1c <Polling_Task_1s+0x28>)
 8001c04:	689c      	ldr	r4, [r3, #8]
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <Polling_Task_1s+0x28>)
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	4805      	ldr	r0, [pc, #20]	; (8001c20 <Polling_Task_1s+0x2c>)
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	0023      	movs	r3, r4
 8001c10:	f006 fa7c 	bl	800810c <iprintf>
}
 8001c14:	46c0      	nop			; (mov r8, r8)
 8001c16:	46bd      	mov	sp, r7
 8001c18:	b001      	add	sp, #4
 8001c1a:	bd90      	pop	{r4, r7, pc}
 8001c1c:	200001f0 	.word	0x200001f0
 8001c20:	08009164 	.word	0x08009164

08001c24 <Task_ButtonGroup>:

void Task_ButtonGroup(void) {
 8001c24:	b590      	push	{r4, r7, lr}
 8001c26:	b083      	sub	sp, #12
 8001c28:	af00      	add	r7, sp, #0
    static unsigned char btnCNT[5] = {0};
    unsigned char Task_Button_temp = Task_Button();
 8001c2a:	1dfc      	adds	r4, r7, #7
 8001c2c:	f000 fe22 	bl	8002874 <Task_Button>
 8001c30:	0003      	movs	r3, r0
 8001c32:	7023      	strb	r3, [r4, #0]
    static const unsigned char ExecuteBTNevent  = 10,
                               HoldOnExecuteBTN = 11;

    if(Task_Button_temp & 0x01) {
 8001c34:	1dfb      	adds	r3, r7, #7
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d017      	beq.n	8001c6e <Task_ButtonGroup+0x4a>
        if(btnCNT[0]==ExecuteBTNevent) {
 8001c3e:	4bcc      	ldr	r3, [pc, #816]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	4bcc      	ldr	r3, [pc, #816]	; (8001f74 <Task_ButtonGroup+0x350>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d104      	bne.n	8001c54 <Task_ButtonGroup+0x30>
            btnCNT[0]=HoldOnExecuteBTN;
 8001c4a:	4bcb      	ldr	r3, [pc, #812]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	4bc8      	ldr	r3, [pc, #800]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	e00f      	b.n	8001c74 <Task_ButtonGroup+0x50>

        } else if(btnCNT[0]==HoldOnExecuteBTN) {
 8001c54:	4bc6      	ldr	r3, [pc, #792]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c56:	781a      	ldrb	r2, [r3, #0]
 8001c58:	4bc7      	ldr	r3, [pc, #796]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d009      	beq.n	8001c74 <Task_ButtonGroup+0x50>
            //Don't do anything
        } else {
            btnCNT[0]++;
 8001c60:	4bc3      	ldr	r3, [pc, #780]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	4bc1      	ldr	r3, [pc, #772]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c6a:	701a      	strb	r2, [r3, #0]
 8001c6c:	e002      	b.n	8001c74 <Task_ButtonGroup+0x50>
        }
    } else {
        btnCNT[0] = 0;
 8001c6e:	4bc0      	ldr	r3, [pc, #768]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
    }

    if(Task_Button_temp & 0x02) {
 8001c74:	1dfb      	adds	r3, r7, #7
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d100      	bne.n	8001c80 <Task_ButtonGroup+0x5c>
 8001c7e:	e0c0      	b.n	8001e02 <Task_ButtonGroup+0x1de>
        if(btnCNT[1]==ExecuteBTNevent) {
 8001c80:	4bbb      	ldr	r3, [pc, #748]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c82:	785a      	ldrb	r2, [r3, #1]
 8001c84:	4bbb      	ldr	r3, [pc, #748]	; (8001f74 <Task_ButtonGroup+0x350>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d000      	beq.n	8001c8e <Task_ButtonGroup+0x6a>
 8001c8c:	e0ac      	b.n	8001de8 <Task_ButtonGroup+0x1c4>
            btnCNT[1]=HoldOnExecuteBTN;
 8001c8e:	4bba      	ldr	r3, [pc, #744]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001c90:	781a      	ldrb	r2, [r3, #0]
 8001c92:	4bb7      	ldr	r3, [pc, #732]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001c94:	705a      	strb	r2, [r3, #1]

            //Get SW6 Pattern button event
            SW6_Pattern_button_ID++;
 8001c96:	4bb9      	ldr	r3, [pc, #740]	; (8001f7c <Task_ButtonGroup+0x358>)
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b2da      	uxtb	r2, r3
 8001c9e:	4bb7      	ldr	r3, [pc, #732]	; (8001f7c <Task_ButtonGroup+0x358>)
 8001ca0:	701a      	strb	r2, [r3, #0]
            if(SW6_Pattern_button_ID>=11) {
 8001ca2:	4bb6      	ldr	r3, [pc, #728]	; (8001f7c <Task_ButtonGroup+0x358>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	2b0a      	cmp	r3, #10
 8001ca8:	d902      	bls.n	8001cb0 <Task_ButtonGroup+0x8c>
                SW6_Pattern_button_ID = 0;
 8001caa:	4bb4      	ldr	r3, [pc, #720]	; (8001f7c <Task_ButtonGroup+0x358>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
            }
            switch(SW6_Pattern_button_ID) {
 8001cb0:	4bb2      	ldr	r3, [pc, #712]	; (8001f7c <Task_ButtonGroup+0x358>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b0a      	cmp	r3, #10
 8001cb6:	d868      	bhi.n	8001d8a <Task_ButtonGroup+0x166>
 8001cb8:	009a      	lsls	r2, r3, #2
 8001cba:	4bb1      	ldr	r3, [pc, #708]	; (8001f80 <Task_ButtonGroup+0x35c>)
 8001cbc:	18d3      	adds	r3, r2, r3
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	469f      	mov	pc, r3
                default:
                case  0:  /* Don't do anything */                                                                  break;

                case  1: SW6_LED12 = signle_LED_rgb_R; SW6_LED10 = 0;                SW6_LED11 = 0;                break;
 8001cc2:	4bb0      	ldr	r3, [pc, #704]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	701a      	strb	r2, [r3, #0]
 8001cc8:	4baf      	ldr	r3, [pc, #700]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	701a      	strb	r2, [r3, #0]
 8001cce:	4baf      	ldr	r3, [pc, #700]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	701a      	strb	r2, [r3, #0]
 8001cd4:	e05a      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  2: SW6_LED12 = 0;                SW6_LED10 = signle_LED_rgb_R; SW6_LED11 = 0;                break;
 8001cd6:	4bab      	ldr	r3, [pc, #684]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
 8001cdc:	4baa      	ldr	r3, [pc, #680]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
 8001ce2:	4baa      	ldr	r3, [pc, #680]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	701a      	strb	r2, [r3, #0]
 8001ce8:	e050      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  3: SW6_LED12 = 0;                SW6_LED10 = 0;                SW6_LED11 = signle_LED_rgb_R; break;
 8001cea:	4ba6      	ldr	r3, [pc, #664]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	701a      	strb	r2, [r3, #0]
 8001cf0:	4ba5      	ldr	r3, [pc, #660]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	701a      	strb	r2, [r3, #0]
 8001cf6:	4ba5      	ldr	r3, [pc, #660]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	701a      	strb	r2, [r3, #0]
 8001cfc:	e046      	b.n	8001d8c <Task_ButtonGroup+0x168>

                case  4: SW6_LED12 = signle_LED_rgb_G; SW6_LED10 = 0;                SW6_LED11 = 0;                break;
 8001cfe:	4ba1      	ldr	r3, [pc, #644]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d00:	2202      	movs	r2, #2
 8001d02:	701a      	strb	r2, [r3, #0]
 8001d04:	4ba0      	ldr	r3, [pc, #640]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	701a      	strb	r2, [r3, #0]
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
 8001d10:	e03c      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  5: SW6_LED12 = 0;                SW6_LED10 = signle_LED_rgb_G; SW6_LED11 = 0;                break;
 8001d12:	4b9c      	ldr	r3, [pc, #624]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
 8001d18:	4b9b      	ldr	r3, [pc, #620]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	701a      	strb	r2, [r3, #0]
 8001d1e:	4b9b      	ldr	r3, [pc, #620]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	701a      	strb	r2, [r3, #0]
 8001d24:	e032      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  6: SW6_LED12 = 0;                SW6_LED10 = 0;                SW6_LED11 = signle_LED_rgb_G; break;
 8001d26:	4b97      	ldr	r3, [pc, #604]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
 8001d2c:	4b96      	ldr	r3, [pc, #600]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	701a      	strb	r2, [r3, #0]
 8001d32:	4b96      	ldr	r3, [pc, #600]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d34:	2202      	movs	r2, #2
 8001d36:	701a      	strb	r2, [r3, #0]
 8001d38:	e028      	b.n	8001d8c <Task_ButtonGroup+0x168>

                case  7: SW6_LED12 = signle_LED_rgb_B; SW6_LED10 = 0;                SW6_LED11 = 0;                break;
 8001d3a:	4b92      	ldr	r3, [pc, #584]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	701a      	strb	r2, [r3, #0]
 8001d40:	4b91      	ldr	r3, [pc, #580]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	4b91      	ldr	r3, [pc, #580]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e01e      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  8: SW6_LED12 = 0;                SW6_LED10 = signle_LED_rgb_B; SW6_LED11 = 0;                break;
 8001d4e:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
 8001d54:	4b8c      	ldr	r3, [pc, #560]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	701a      	strb	r2, [r3, #0]
 8001d60:	e014      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  9: SW6_LED12 = 0;                SW6_LED10 = 0;                SW6_LED11 = signle_LED_rgb_B; break;
 8001d62:	4b88      	ldr	r3, [pc, #544]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
 8001d68:	4b87      	ldr	r3, [pc, #540]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	701a      	strb	r2, [r3, #0]
 8001d6e:	4b87      	ldr	r3, [pc, #540]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d70:	2204      	movs	r2, #4
 8001d72:	701a      	strb	r2, [r3, #0]
 8001d74:	e00a      	b.n	8001d8c <Task_ButtonGroup+0x168>

                case 10: SW6_LED12 = 0;                SW6_LED10 = 0;                SW6_LED11 = 0;                break;
 8001d76:	4b83      	ldr	r3, [pc, #524]	; (8001f84 <Task_ButtonGroup+0x360>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	701a      	strb	r2, [r3, #0]
 8001d7c:	4b82      	ldr	r3, [pc, #520]	; (8001f88 <Task_ButtonGroup+0x364>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	701a      	strb	r2, [r3, #0]
 8001d82:	4b82      	ldr	r3, [pc, #520]	; (8001f8c <Task_ButtonGroup+0x368>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
 8001d88:	e000      	b.n	8001d8c <Task_ButtonGroup+0x168>
                case  0:  /* Don't do anything */                                                                  break;
 8001d8a:	46c0      	nop			; (mov r8, r8)
            }

            //Get SW2 Preset button event
            SW2_Preset_button_ID++;
 8001d8c:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <Task_ButtonGroup+0x36c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	3301      	adds	r3, #1
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	4b7e      	ldr	r3, [pc, #504]	; (8001f90 <Task_ButtonGroup+0x36c>)
 8001d96:	701a      	strb	r2, [r3, #0]
            if(SW2_Preset_button_ID>8) {
 8001d98:	4b7d      	ldr	r3, [pc, #500]	; (8001f90 <Task_ButtonGroup+0x36c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b08      	cmp	r3, #8
 8001d9e:	d902      	bls.n	8001da6 <Task_ButtonGroup+0x182>
                SW2_Preset_button_ID = 0;
 8001da0:	4b7b      	ldr	r3, [pc, #492]	; (8001f90 <Task_ButtonGroup+0x36c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	701a      	strb	r2, [r3, #0]
            }
            u8PresetLED = 1<<SW2_Preset_button_ID;
 8001da6:	4b7a      	ldr	r3, [pc, #488]	; (8001f90 <Task_ButtonGroup+0x36c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	001a      	movs	r2, r3
 8001dac:	2301      	movs	r3, #1
 8001dae:	4093      	lsls	r3, r2
 8001db0:	b2da      	uxtb	r2, r3
 8001db2:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <Task_ButtonGroup+0x370>)
 8001db4:	701a      	strb	r2, [r3, #0]

            //Check LED9
            switch(LED9) {
 8001db6:	4b78      	ldr	r3, [pc, #480]	; (8001f98 <Task_ButtonGroup+0x374>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d010      	beq.n	8001de0 <Task_ButtonGroup+0x1bc>
 8001dbe:	dc03      	bgt.n	8001dc8 <Task_ButtonGroup+0x1a4>
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d005      	beq.n	8001dd0 <Task_ButtonGroup+0x1ac>
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d007      	beq.n	8001dd8 <Task_ButtonGroup+0x1b4>
            	default:
            	case 0:                LED9 = signle_LED_rgb_R; break;
 8001dc8:	4b73      	ldr	r3, [pc, #460]	; (8001f98 <Task_ButtonGroup+0x374>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	701a      	strb	r2, [r3, #0]
 8001dce:	e01b      	b.n	8001e08 <Task_ButtonGroup+0x1e4>
            	case signle_LED_rgb_R: LED9 = signle_LED_rgb_G; break;
 8001dd0:	4b71      	ldr	r3, [pc, #452]	; (8001f98 <Task_ButtonGroup+0x374>)
 8001dd2:	2202      	movs	r2, #2
 8001dd4:	701a      	strb	r2, [r3, #0]
 8001dd6:	e017      	b.n	8001e08 <Task_ButtonGroup+0x1e4>
            	case signle_LED_rgb_G: LED9 = signle_LED_rgb_B; break;
 8001dd8:	4b6f      	ldr	r3, [pc, #444]	; (8001f98 <Task_ButtonGroup+0x374>)
 8001dda:	2204      	movs	r2, #4
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e013      	b.n	8001e08 <Task_ButtonGroup+0x1e4>
            	case signle_LED_rgb_B: LED9 = 0;                break;
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <Task_ButtonGroup+0x374>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	e00f      	b.n	8001e08 <Task_ButtonGroup+0x1e4>
            }

        } else if(btnCNT[1]==HoldOnExecuteBTN) {
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001dea:	785a      	ldrb	r2, [r3, #1]
 8001dec:	4b62      	ldr	r3, [pc, #392]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d009      	beq.n	8001e08 <Task_ButtonGroup+0x1e4>
            //Don't do anything
        } else {
            btnCNT[1]++;
 8001df4:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001df6:	785b      	ldrb	r3, [r3, #1]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001dfe:	705a      	strb	r2, [r3, #1]
 8001e00:	e002      	b.n	8001e08 <Task_ButtonGroup+0x1e4>
        }
    } else {
        btnCNT[1] = 0;
 8001e02:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	705a      	strb	r2, [r3, #1]
    }

    if(Task_Button_temp & 0x04) {
 8001e08:	1dfb      	adds	r3, r7, #7
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d02b      	beq.n	8001e6a <Task_ButtonGroup+0x246>
        if(btnCNT[2]==ExecuteBTNevent) {
 8001e12:	4b57      	ldr	r3, [pc, #348]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e14:	789a      	ldrb	r2, [r3, #2]
 8001e16:	4b57      	ldr	r3, [pc, #348]	; (8001f74 <Task_ButtonGroup+0x350>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d118      	bne.n	8001e50 <Task_ButtonGroup+0x22c>
            btnCNT[2]=HoldOnExecuteBTN;
 8001e1e:	4b56      	ldr	r3, [pc, #344]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001e20:	781a      	ldrb	r2, [r3, #0]
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e24:	709a      	strb	r2, [r3, #2]

            //Get SW5 Headphone button event
            isSW5_Headphone_button_Mute^=1;
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <Task_ButtonGroup+0x378>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	4053      	eors	r3, r2
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b5a      	ldr	r3, [pc, #360]	; (8001f9c <Task_ButtonGroup+0x378>)
 8001e32:	701a      	strb	r2, [r3, #0]
            if(isSW5_Headphone_button_Mute) {
 8001e34:	4b59      	ldr	r3, [pc, #356]	; (8001f9c <Task_ButtonGroup+0x378>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d019      	beq.n	8001e70 <Task_ButtonGroup+0x24c>
                SW5_LED17 = signle_LED_rgb_R;
 8001e3c:	4b58      	ldr	r3, [pc, #352]	; (8001fa0 <Task_ButtonGroup+0x37c>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	701a      	strb	r2, [r3, #0]
                SW5_LED13 = signle_LED_rgb_R;
 8001e42:	4b58      	ldr	r3, [pc, #352]	; (8001fa4 <Task_ButtonGroup+0x380>)
 8001e44:	2201      	movs	r2, #1
 8001e46:	701a      	strb	r2, [r3, #0]
                SW5_LED14 = signle_LED_rgb_R;
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <Task_ButtonGroup+0x384>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
 8001e4e:	e00f      	b.n	8001e70 <Task_ButtonGroup+0x24c>
            }

        } else if(btnCNT[2]==HoldOnExecuteBTN) {
 8001e50:	4b47      	ldr	r3, [pc, #284]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e52:	789a      	ldrb	r2, [r3, #2]
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d009      	beq.n	8001e70 <Task_ButtonGroup+0x24c>
            //Don't do anything
        } else {
            btnCNT[2]++;
 8001e5c:	4b44      	ldr	r3, [pc, #272]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e5e:	789b      	ldrb	r3, [r3, #2]
 8001e60:	3301      	adds	r3, #1
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	4b42      	ldr	r3, [pc, #264]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e66:	709a      	strb	r2, [r3, #2]
 8001e68:	e002      	b.n	8001e70 <Task_ButtonGroup+0x24c>
        }
    } else {
        btnCNT[2] = 0;
 8001e6a:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	709a      	strb	r2, [r3, #2]
    }

    if(Task_Button_temp & 0x08) {
 8001e70:	1dfb      	adds	r3, r7, #7
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2208      	movs	r2, #8
 8001e76:	4013      	ands	r3, r2
 8001e78:	d035      	beq.n	8001ee6 <Task_ButtonGroup+0x2c2>
        if(btnCNT[3]==ExecuteBTNevent) {
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e7c:	78da      	ldrb	r2, [r3, #3]
 8001e7e:	4b3d      	ldr	r3, [pc, #244]	; (8001f74 <Task_ButtonGroup+0x350>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d122      	bne.n	8001ecc <Task_ButtonGroup+0x2a8>
            btnCNT[3]=HoldOnExecuteBTN;
 8001e86:	4b3c      	ldr	r3, [pc, #240]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001e88:	781a      	ldrb	r2, [r3, #0]
 8001e8a:	4b39      	ldr	r3, [pc, #228]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001e8c:	70da      	strb	r2, [r3, #3]

            //Get SW4 MIX button event
            static char LED_Toggle = 0;
            LED_Toggle^=1;
 8001e8e:	4b47      	ldr	r3, [pc, #284]	; (8001fac <Task_ButtonGroup+0x388>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	4053      	eors	r3, r2
 8001e96:	b2da      	uxtb	r2, r3
 8001e98:	4b44      	ldr	r3, [pc, #272]	; (8001fac <Task_ButtonGroup+0x388>)
 8001e9a:	701a      	strb	r2, [r3, #0]
            if(LED_Toggle) {
 8001e9c:	4b43      	ldr	r3, [pc, #268]	; (8001fac <Task_ButtonGroup+0x388>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d009      	beq.n	8001eb8 <Task_ButtonGroup+0x294>
                SW4_LED18 = signle_LED_rgb_R;
 8001ea4:	4b42      	ldr	r3, [pc, #264]	; (8001fb0 <Task_ButtonGroup+0x38c>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
                SW4_LED16 = signle_LED_rgb_R;
 8001eaa:	4b42      	ldr	r3, [pc, #264]	; (8001fb4 <Task_ButtonGroup+0x390>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	701a      	strb	r2, [r3, #0]
                SW4_LED15 = signle_LED_rgb_R;
 8001eb0:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <Task_ButtonGroup+0x394>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
 8001eb6:	e019      	b.n	8001eec <Task_ButtonGroup+0x2c8>
            } else {
                SW4_LED18 = signle_LED_rgb_G;
 8001eb8:	4b3d      	ldr	r3, [pc, #244]	; (8001fb0 <Task_ButtonGroup+0x38c>)
 8001eba:	2202      	movs	r2, #2
 8001ebc:	701a      	strb	r2, [r3, #0]
                SW4_LED16 = signle_LED_rgb_G;
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <Task_ButtonGroup+0x390>)
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	701a      	strb	r2, [r3, #0]
                SW4_LED15 = signle_LED_rgb_G;
 8001ec4:	4b3c      	ldr	r3, [pc, #240]	; (8001fb8 <Task_ButtonGroup+0x394>)
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	701a      	strb	r2, [r3, #0]
 8001eca:	e00f      	b.n	8001eec <Task_ButtonGroup+0x2c8>
            }

        } else if(btnCNT[3]==HoldOnExecuteBTN) {
 8001ecc:	4b28      	ldr	r3, [pc, #160]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001ece:	78da      	ldrb	r2, [r3, #3]
 8001ed0:	4b29      	ldr	r3, [pc, #164]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d009      	beq.n	8001eec <Task_ButtonGroup+0x2c8>
            //Don't do anything
        } else {
            btnCNT[3]++;
 8001ed8:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001eda:	78db      	ldrb	r3, [r3, #3]
 8001edc:	3301      	adds	r3, #1
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001ee2:	70da      	strb	r2, [r3, #3]
 8001ee4:	e002      	b.n	8001eec <Task_ButtonGroup+0x2c8>
        }
    } else {
        btnCNT[3] = 0;
 8001ee6:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	70da      	strb	r2, [r3, #3]
    }

    if(Task_Button_temp & 0x10) {
 8001eec:	1dfb      	adds	r3, r7, #7
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d035      	beq.n	8001f62 <Task_ButtonGroup+0x33e>
        if(btnCNT[4]==ExecuteBTNevent) {
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001ef8:	791a      	ldrb	r2, [r3, #4]
 8001efa:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <Task_ButtonGroup+0x350>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d122      	bne.n	8001f48 <Task_ButtonGroup+0x324>
            btnCNT[4]=HoldOnExecuteBTN;
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001f04:	781a      	ldrb	r2, [r3, #0]
 8001f06:	4b1a      	ldr	r3, [pc, #104]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001f08:	711a      	strb	r2, [r3, #4]

            //Get SW3 MIC button event
            static char LED_Toggle = 0;
            LED_Toggle^=1;
 8001f0a:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <Task_ButtonGroup+0x398>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	4053      	eors	r3, r2
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <Task_ButtonGroup+0x398>)
 8001f16:	701a      	strb	r2, [r3, #0]
            if(LED_Toggle) {
 8001f18:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <Task_ButtonGroup+0x398>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d009      	beq.n	8001f34 <Task_ButtonGroup+0x310>
                SW3_LED21 = signle_LED_rgb_R;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <Task_ButtonGroup+0x39c>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
                SW3_LED19 = signle_LED_rgb_R;
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <Task_ButtonGroup+0x3a0>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
                SW3_LED20 = signle_LED_rgb_R;
 8001f2c:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <Task_ButtonGroup+0x3a4>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	701a      	strb	r2, [r3, #0]
            btnCNT[4]++;
        }
    } else {
        btnCNT[4] = 0;
    }
}
 8001f32:	e019      	b.n	8001f68 <Task_ButtonGroup+0x344>
                SW3_LED21 = signle_LED_rgb_G;
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <Task_ButtonGroup+0x39c>)
 8001f36:	2202      	movs	r2, #2
 8001f38:	701a      	strb	r2, [r3, #0]
                SW3_LED19 = signle_LED_rgb_G;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	; (8001fc4 <Task_ButtonGroup+0x3a0>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	701a      	strb	r2, [r3, #0]
                SW3_LED20 = signle_LED_rgb_G;
 8001f40:	4b21      	ldr	r3, [pc, #132]	; (8001fc8 <Task_ButtonGroup+0x3a4>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
}
 8001f46:	e00f      	b.n	8001f68 <Task_ButtonGroup+0x344>
        } else if(btnCNT[4]==HoldOnExecuteBTN) {
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001f4a:	791a      	ldrb	r2, [r3, #4]
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <Task_ButtonGroup+0x354>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d009      	beq.n	8001f68 <Task_ButtonGroup+0x344>
            btnCNT[4]++;
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001f56:	791b      	ldrb	r3, [r3, #4]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001f5e:	711a      	strb	r2, [r3, #4]
}
 8001f60:	e002      	b.n	8001f68 <Task_ButtonGroup+0x344>
        btnCNT[4] = 0;
 8001f62:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <Task_ButtonGroup+0x34c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	711a      	strb	r2, [r3, #4]
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b003      	add	sp, #12
 8001f6e:	bd90      	pop	{r4, r7, pc}
 8001f70:	20000204 	.word	0x20000204
 8001f74:	080091b4 	.word	0x080091b4
 8001f78:	080091b5 	.word	0x080091b5
 8001f7c:	200001e2 	.word	0x200001e2
 8001f80:	08009188 	.word	0x08009188
 8001f84:	2000009c 	.word	0x2000009c
 8001f88:	2000009a 	.word	0x2000009a
 8001f8c:	2000009b 	.word	0x2000009b
 8001f90:	200001e3 	.word	0x200001e3
 8001f94:	200001e4 	.word	0x200001e4
 8001f98:	20000090 	.word	0x20000090
 8001f9c:	200001e1 	.word	0x200001e1
 8001fa0:	20000099 	.word	0x20000099
 8001fa4:	20000097 	.word	0x20000097
 8001fa8:	20000098 	.word	0x20000098
 8001fac:	20000209 	.word	0x20000209
 8001fb0:	20000096 	.word	0x20000096
 8001fb4:	20000095 	.word	0x20000095
 8001fb8:	20000094 	.word	0x20000094
 8001fbc:	2000020a 	.word	0x2000020a
 8001fc0:	20000093 	.word	0x20000093
 8001fc4:	20000091 	.word	0x20000091
 8001fc8:	20000092 	.word	0x20000092

08001fcc <VR1_PreGain>:

void VR1_PreGain(void) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
        static uint32_t PG_VR = 0;
        PG_VR = (PG_VR*3 + ADC_B*7)/10;
 8001fd0:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <VR1_PreGain+0x1dc>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	0013      	movs	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	1899      	adds	r1, r3, r2
 8001fda:	4b74      	ldr	r3, [pc, #464]	; (80021ac <VR1_PreGain+0x1e0>)
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	0013      	movs	r3, r2
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	18cb      	adds	r3, r1, r3
 8001fe6:	210a      	movs	r1, #10
 8001fe8:	0018      	movs	r0, r3
 8001fea:	f7fe f893 	bl	8000114 <__udivsi3>
 8001fee:	0003      	movs	r3, r0
 8001ff0:	001a      	movs	r2, r3
 8001ff2:	4b6d      	ldr	r3, [pc, #436]	; (80021a8 <VR1_PreGain+0x1dc>)
 8001ff4:	601a      	str	r2, [r3, #0]

               if(                  PG_VR<=s0-tor) {
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <VR1_PreGain+0x1dc>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	23b6      	movs	r3, #182	; 0xb6
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d809      	bhi.n	8002016 <VR1_PreGain+0x4a>
            //Seg 0
            SW6_LED11 = signle_LED_rgb_R;
 8002002:	4b6b      	ldr	r3, [pc, #428]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_R;
 8002008:	4b6a      	ldr	r3, [pc, #424]	; (80021b4 <VR1_PreGain+0x1e8>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_R;
 800200e:	4b6a      	ldr	r3, [pc, #424]	; (80021b8 <VR1_PreGain+0x1ec>)
 8002010:	2201      	movs	r2, #1
 8002012:	701a      	strb	r2, [r3, #0]
            //Seg 10
            SW6_LED11 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
            SW6_LED10 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
            SW6_LED12 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
        }
}
 8002014:	e0c5      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s0+tor<=PG_VR && PG_VR<=s1-tor) {
 8002016:	4b64      	ldr	r3, [pc, #400]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	23be      	movs	r3, #190	; 0xbe
 800201c:	005b      	lsls	r3, r3, #1
 800201e:	429a      	cmp	r2, r3
 8002020:	d30e      	bcc.n	8002040 <VR1_PreGain+0x74>
 8002022:	4b61      	ldr	r3, [pc, #388]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a65      	ldr	r2, [pc, #404]	; (80021bc <VR1_PreGain+0x1f0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d809      	bhi.n	8002040 <VR1_PreGain+0x74>
            SW6_LED11 = signle_LED_rgb_R + signle_LED_rgb_G;
 800202c:	4b60      	ldr	r3, [pc, #384]	; (80021b0 <VR1_PreGain+0x1e4>)
 800202e:	2203      	movs	r2, #3
 8002030:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_R;
 8002032:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002034:	2201      	movs	r2, #1
 8002036:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_R;
 8002038:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <VR1_PreGain+0x1ec>)
 800203a:	2201      	movs	r2, #1
 800203c:	701a      	strb	r2, [r3, #0]
 800203e:	e0b0      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s1+tor<=PG_VR && PG_VR<=s2-tor) {
 8002040:	4b59      	ldr	r3, [pc, #356]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	23bc      	movs	r3, #188	; 0xbc
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d90e      	bls.n	800206a <VR1_PreGain+0x9e>
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <VR1_PreGain+0x1dc>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5b      	ldr	r2, [pc, #364]	; (80021c0 <VR1_PreGain+0x1f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d809      	bhi.n	800206a <VR1_PreGain+0x9e>
            SW6_LED11 = signle_LED_rgb_G;
 8002056:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002058:	2202      	movs	r2, #2
 800205a:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_R + signle_LED_rgb_G;
 800205c:	4b55      	ldr	r3, [pc, #340]	; (80021b4 <VR1_PreGain+0x1e8>)
 800205e:	2203      	movs	r2, #3
 8002060:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_R;
 8002062:	4b55      	ldr	r3, [pc, #340]	; (80021b8 <VR1_PreGain+0x1ec>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
 8002068:	e09b      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s2+tor<=PG_VR && PG_VR<=s3-tor) {
 800206a:	4b4f      	ldr	r3, [pc, #316]	; (80021a8 <VR1_PreGain+0x1dc>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a55      	ldr	r2, [pc, #340]	; (80021c4 <VR1_PreGain+0x1f8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d90e      	bls.n	8002092 <VR1_PreGain+0xc6>
 8002074:	4b4c      	ldr	r3, [pc, #304]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <VR1_PreGain+0x1fc>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d809      	bhi.n	8002092 <VR1_PreGain+0xc6>
            SW6_LED11 = signle_LED_rgb_G;
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_G;
 8002084:	4b4b      	ldr	r3, [pc, #300]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002086:	2202      	movs	r2, #2
 8002088:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_R + signle_LED_rgb_G;
 800208a:	4b4b      	ldr	r3, [pc, #300]	; (80021b8 <VR1_PreGain+0x1ec>)
 800208c:	2203      	movs	r2, #3
 800208e:	701a      	strb	r2, [r3, #0]
 8002090:	e087      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s3+tor<=PG_VR && PG_VR<=s4-tor) {
 8002092:	4b45      	ldr	r3, [pc, #276]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	23bb      	movs	r3, #187	; 0xbb
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	429a      	cmp	r2, r3
 800209c:	d90e      	bls.n	80020bc <VR1_PreGain+0xf0>
 800209e:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <VR1_PreGain+0x1dc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a4a      	ldr	r2, [pc, #296]	; (80021cc <VR1_PreGain+0x200>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d809      	bhi.n	80020bc <VR1_PreGain+0xf0>
            SW6_LED11 = signle_LED_rgb_G;
 80020a8:	4b41      	ldr	r3, [pc, #260]	; (80021b0 <VR1_PreGain+0x1e4>)
 80020aa:	2202      	movs	r2, #2
 80020ac:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_G;
 80020ae:	4b41      	ldr	r3, [pc, #260]	; (80021b4 <VR1_PreGain+0x1e8>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_G;
 80020b4:	4b40      	ldr	r3, [pc, #256]	; (80021b8 <VR1_PreGain+0x1ec>)
 80020b6:	2202      	movs	r2, #2
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	e072      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s4+tor<=PG_VR && PG_VR<=s5-tor) {
 80020bc:	4b3a      	ldr	r3, [pc, #232]	; (80021a8 <VR1_PreGain+0x1dc>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a43      	ldr	r2, [pc, #268]	; (80021d0 <VR1_PreGain+0x204>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d90e      	bls.n	80020e4 <VR1_PreGain+0x118>
 80020c6:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <VR1_PreGain+0x1dc>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a42      	ldr	r2, [pc, #264]	; (80021d4 <VR1_PreGain+0x208>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d809      	bhi.n	80020e4 <VR1_PreGain+0x118>
            SW6_LED11 = signle_LED_rgb_G + signle_LED_rgb_B;
 80020d0:	4b37      	ldr	r3, [pc, #220]	; (80021b0 <VR1_PreGain+0x1e4>)
 80020d2:	2206      	movs	r2, #6
 80020d4:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_G;
 80020d6:	4b37      	ldr	r3, [pc, #220]	; (80021b4 <VR1_PreGain+0x1e8>)
 80020d8:	2202      	movs	r2, #2
 80020da:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_G;
 80020dc:	4b36      	ldr	r3, [pc, #216]	; (80021b8 <VR1_PreGain+0x1ec>)
 80020de:	2202      	movs	r2, #2
 80020e0:	701a      	strb	r2, [r3, #0]
 80020e2:	e05e      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s5+tor<=PG_VR && PG_VR<=s6-tor) {
 80020e4:	4b30      	ldr	r3, [pc, #192]	; (80021a8 <VR1_PreGain+0x1dc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <VR1_PreGain+0x20c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d90e      	bls.n	800210c <VR1_PreGain+0x140>
 80020ee:	4b2e      	ldr	r3, [pc, #184]	; (80021a8 <VR1_PreGain+0x1dc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a3a      	ldr	r2, [pc, #232]	; (80021dc <VR1_PreGain+0x210>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d809      	bhi.n	800210c <VR1_PreGain+0x140>
            SW6_LED11 = signle_LED_rgb_B;
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <VR1_PreGain+0x1e4>)
 80020fa:	2204      	movs	r2, #4
 80020fc:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_G + signle_LED_rgb_B;
 80020fe:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002100:	2206      	movs	r2, #6
 8002102:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_G;
 8002104:	4b2c      	ldr	r3, [pc, #176]	; (80021b8 <VR1_PreGain+0x1ec>)
 8002106:	2202      	movs	r2, #2
 8002108:	701a      	strb	r2, [r3, #0]
 800210a:	e04a      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s6+tor<=PG_VR && PG_VR<=s7-tor) {
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <VR1_PreGain+0x1dc>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a33      	ldr	r2, [pc, #204]	; (80021e0 <VR1_PreGain+0x214>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d90e      	bls.n	8002134 <VR1_PreGain+0x168>
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a32      	ldr	r2, [pc, #200]	; (80021e4 <VR1_PreGain+0x218>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d809      	bhi.n	8002134 <VR1_PreGain+0x168>
            SW6_LED11 = signle_LED_rgb_B;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002122:	2204      	movs	r2, #4
 8002124:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_B;
 8002126:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002128:	2204      	movs	r2, #4
 800212a:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_G + signle_LED_rgb_B;
 800212c:	4b22      	ldr	r3, [pc, #136]	; (80021b8 <VR1_PreGain+0x1ec>)
 800212e:	2206      	movs	r2, #6
 8002130:	701a      	strb	r2, [r3, #0]
 8002132:	e036      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s7+tor<=PG_VR && PG_VR<=s8-tor) {
 8002134:	4b1c      	ldr	r3, [pc, #112]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <VR1_PreGain+0x21c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d90e      	bls.n	800215c <VR1_PreGain+0x190>
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a2a      	ldr	r2, [pc, #168]	; (80021ec <VR1_PreGain+0x220>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d809      	bhi.n	800215c <VR1_PreGain+0x190>
            SW6_LED11 = signle_LED_rgb_B;
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <VR1_PreGain+0x1e4>)
 800214a:	2204      	movs	r2, #4
 800214c:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_B;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002150:	2204      	movs	r2, #4
 8002152:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_B;
 8002154:	4b18      	ldr	r3, [pc, #96]	; (80021b8 <VR1_PreGain+0x1ec>)
 8002156:	2204      	movs	r2, #4
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e022      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s8+tor<=PG_VR && PG_VR<=s9-tor) {
 800215c:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <VR1_PreGain+0x1dc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <VR1_PreGain+0x224>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d90e      	bls.n	8002184 <VR1_PreGain+0x1b8>
 8002166:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <VR1_PreGain+0x228>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d809      	bhi.n	8002184 <VR1_PreGain+0x1b8>
            SW6_LED11 = signle_LED_rgb_G + signle_LED_rgb_B;
 8002170:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002172:	2206      	movs	r2, #6
 8002174:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_G + signle_LED_rgb_B;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002178:	2206      	movs	r2, #6
 800217a:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_G + signle_LED_rgb_B;
 800217c:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <VR1_PreGain+0x1ec>)
 800217e:	2206      	movs	r2, #6
 8002180:	701a      	strb	r2, [r3, #0]
 8002182:	e00e      	b.n	80021a2 <VR1_PreGain+0x1d6>
        } else if(s9+tor<=PG_VR) {
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <VR1_PreGain+0x1dc>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <VR1_PreGain+0x22c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d909      	bls.n	80021a2 <VR1_PreGain+0x1d6>
            SW6_LED11 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 800218e:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <VR1_PreGain+0x1e4>)
 8002190:	2207      	movs	r2, #7
 8002192:	701a      	strb	r2, [r3, #0]
            SW6_LED10 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 8002194:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <VR1_PreGain+0x1e8>)
 8002196:	2207      	movs	r2, #7
 8002198:	701a      	strb	r2, [r3, #0]
            SW6_LED12 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <VR1_PreGain+0x1ec>)
 800219c:	2207      	movs	r2, #7
 800219e:	701a      	strb	r2, [r3, #0]
}
 80021a0:	e7ff      	b.n	80021a2 <VR1_PreGain+0x1d6>
 80021a2:	46c0      	nop			; (mov r8, r8)
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	2000020c 	.word	0x2000020c
 80021ac:	200001f0 	.word	0x200001f0
 80021b0:	2000009b 	.word	0x2000009b
 80021b4:	2000009a 	.word	0x2000009a
 80021b8:	2000009c 	.word	0x2000009c
 80021bc:	000002e1 	.word	0x000002e1
 80021c0:	00000455 	.word	0x00000455
 80021c4:	00000464 	.word	0x00000464
 80021c8:	000005c9 	.word	0x000005c9
 80021cc:	0000073d 	.word	0x0000073d
 80021d0:	0000074c 	.word	0x0000074c
 80021d4:	000008b2 	.word	0x000008b2
 80021d8:	000008c1 	.word	0x000008c1
 80021dc:	00000a26 	.word	0x00000a26
 80021e0:	00000a35 	.word	0x00000a35
 80021e4:	00000b9a 	.word	0x00000b9a
 80021e8:	00000ba9 	.word	0x00000ba9
 80021ec:	00000d0e 	.word	0x00000d0e
 80021f0:	00000d1d 	.word	0x00000d1d
 80021f4:	00000e83 	.word	0x00000e83
 80021f8:	00000e92 	.word	0x00000e92

080021fc <VR2_Microphone>:

void VR2_Microphone(void) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	af00      	add	r7, sp, #0
    static uint32_t Mic_VR = 0;
    Mic_VR = (Mic_VR*3 + ADC_C*7)/10;
 8002200:	4b54      	ldr	r3, [pc, #336]	; (8002354 <VR2_Microphone+0x158>)
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	0013      	movs	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	1899      	adds	r1, r3, r2
 800220a:	4b53      	ldr	r3, [pc, #332]	; (8002358 <VR2_Microphone+0x15c>)
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	0013      	movs	r3, r2
 8002210:	00db      	lsls	r3, r3, #3
 8002212:	1a9b      	subs	r3, r3, r2
 8002214:	18cb      	adds	r3, r1, r3
 8002216:	210a      	movs	r1, #10
 8002218:	0018      	movs	r0, r3
 800221a:	f7fd ff7b 	bl	8000114 <__udivsi3>
 800221e:	0003      	movs	r3, r0
 8002220:	001a      	movs	r2, r3
 8002222:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <VR2_Microphone+0x158>)
 8002224:	601a      	str	r2, [r3, #0]

           if(                  Mic_VR<=s0-tor) {
 8002226:	4b4b      	ldr	r3, [pc, #300]	; (8002354 <VR2_Microphone+0x158>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	23b6      	movs	r3, #182	; 0xb6
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	429a      	cmp	r2, r3
 8002230:	d803      	bhi.n	800223a <VR2_Microphone+0x3e>
        //Seg 0
        arrayLED[1] = 0x000;
 8002232:	4b4a      	ldr	r3, [pc, #296]	; (800235c <VR2_Microphone+0x160>)
 8002234:	2200      	movs	r2, #0
 8002236:	805a      	strh	r2, [r3, #2]
        arrayLED[1] = 0x1FF;
    } else if(s9+tor<=Mic_VR) {
        //Seg 10
        arrayLED[1] = 0x3FF;
    }
}
 8002238:	e089      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s0+tor<=Mic_VR && Mic_VR<=s1-tor) {
 800223a:	4b46      	ldr	r3, [pc, #280]	; (8002354 <VR2_Microphone+0x158>)
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	23be      	movs	r3, #190	; 0xbe
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	429a      	cmp	r2, r3
 8002244:	d308      	bcc.n	8002258 <VR2_Microphone+0x5c>
 8002246:	4b43      	ldr	r3, [pc, #268]	; (8002354 <VR2_Microphone+0x158>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a45      	ldr	r2, [pc, #276]	; (8002360 <VR2_Microphone+0x164>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d803      	bhi.n	8002258 <VR2_Microphone+0x5c>
        arrayLED[1] = 0x001;
 8002250:	4b42      	ldr	r3, [pc, #264]	; (800235c <VR2_Microphone+0x160>)
 8002252:	2201      	movs	r2, #1
 8002254:	805a      	strh	r2, [r3, #2]
 8002256:	e07a      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s1+tor<=Mic_VR && Mic_VR<=s2-tor) {
 8002258:	4b3e      	ldr	r3, [pc, #248]	; (8002354 <VR2_Microphone+0x158>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	23bc      	movs	r3, #188	; 0xbc
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	429a      	cmp	r2, r3
 8002262:	d908      	bls.n	8002276 <VR2_Microphone+0x7a>
 8002264:	4b3b      	ldr	r3, [pc, #236]	; (8002354 <VR2_Microphone+0x158>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a3e      	ldr	r2, [pc, #248]	; (8002364 <VR2_Microphone+0x168>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d803      	bhi.n	8002276 <VR2_Microphone+0x7a>
        arrayLED[1] = 0x003;
 800226e:	4b3b      	ldr	r3, [pc, #236]	; (800235c <VR2_Microphone+0x160>)
 8002270:	2203      	movs	r2, #3
 8002272:	805a      	strh	r2, [r3, #2]
 8002274:	e06b      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s2+tor<=Mic_VR && Mic_VR<=s3-tor) {
 8002276:	4b37      	ldr	r3, [pc, #220]	; (8002354 <VR2_Microphone+0x158>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a3b      	ldr	r2, [pc, #236]	; (8002368 <VR2_Microphone+0x16c>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d908      	bls.n	8002292 <VR2_Microphone+0x96>
 8002280:	4b34      	ldr	r3, [pc, #208]	; (8002354 <VR2_Microphone+0x158>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a39      	ldr	r2, [pc, #228]	; (800236c <VR2_Microphone+0x170>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d803      	bhi.n	8002292 <VR2_Microphone+0x96>
        arrayLED[1] = 0x007;
 800228a:	4b34      	ldr	r3, [pc, #208]	; (800235c <VR2_Microphone+0x160>)
 800228c:	2207      	movs	r2, #7
 800228e:	805a      	strh	r2, [r3, #2]
 8002290:	e05d      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s3+tor<=Mic_VR && Mic_VR<=s4-tor) {
 8002292:	4b30      	ldr	r3, [pc, #192]	; (8002354 <VR2_Microphone+0x158>)
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	23bb      	movs	r3, #187	; 0xbb
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	429a      	cmp	r2, r3
 800229c:	d908      	bls.n	80022b0 <VR2_Microphone+0xb4>
 800229e:	4b2d      	ldr	r3, [pc, #180]	; (8002354 <VR2_Microphone+0x158>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a33      	ldr	r2, [pc, #204]	; (8002370 <VR2_Microphone+0x174>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d803      	bhi.n	80022b0 <VR2_Microphone+0xb4>
        arrayLED[1] = 0x00F;
 80022a8:	4b2c      	ldr	r3, [pc, #176]	; (800235c <VR2_Microphone+0x160>)
 80022aa:	220f      	movs	r2, #15
 80022ac:	805a      	strh	r2, [r3, #2]
 80022ae:	e04e      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s4+tor<=Mic_VR && Mic_VR<=s5-tor) {
 80022b0:	4b28      	ldr	r3, [pc, #160]	; (8002354 <VR2_Microphone+0x158>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a2f      	ldr	r2, [pc, #188]	; (8002374 <VR2_Microphone+0x178>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d908      	bls.n	80022cc <VR2_Microphone+0xd0>
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <VR2_Microphone+0x158>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a2e      	ldr	r2, [pc, #184]	; (8002378 <VR2_Microphone+0x17c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d803      	bhi.n	80022cc <VR2_Microphone+0xd0>
        arrayLED[1] = 0x01F;
 80022c4:	4b25      	ldr	r3, [pc, #148]	; (800235c <VR2_Microphone+0x160>)
 80022c6:	221f      	movs	r2, #31
 80022c8:	805a      	strh	r2, [r3, #2]
 80022ca:	e040      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s5+tor<=Mic_VR && Mic_VR<=s6-tor) {
 80022cc:	4b21      	ldr	r3, [pc, #132]	; (8002354 <VR2_Microphone+0x158>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <VR2_Microphone+0x180>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d908      	bls.n	80022e8 <VR2_Microphone+0xec>
 80022d6:	4b1f      	ldr	r3, [pc, #124]	; (8002354 <VR2_Microphone+0x158>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a29      	ldr	r2, [pc, #164]	; (8002380 <VR2_Microphone+0x184>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d803      	bhi.n	80022e8 <VR2_Microphone+0xec>
        arrayLED[1] = 0x03F;
 80022e0:	4b1e      	ldr	r3, [pc, #120]	; (800235c <VR2_Microphone+0x160>)
 80022e2:	223f      	movs	r2, #63	; 0x3f
 80022e4:	805a      	strh	r2, [r3, #2]
 80022e6:	e032      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s6+tor<=Mic_VR && Mic_VR<=s7-tor) {
 80022e8:	4b1a      	ldr	r3, [pc, #104]	; (8002354 <VR2_Microphone+0x158>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a25      	ldr	r2, [pc, #148]	; (8002384 <VR2_Microphone+0x188>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d908      	bls.n	8002304 <VR2_Microphone+0x108>
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <VR2_Microphone+0x158>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a24      	ldr	r2, [pc, #144]	; (8002388 <VR2_Microphone+0x18c>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d803      	bhi.n	8002304 <VR2_Microphone+0x108>
        arrayLED[1] = 0x07F;
 80022fc:	4b17      	ldr	r3, [pc, #92]	; (800235c <VR2_Microphone+0x160>)
 80022fe:	227f      	movs	r2, #127	; 0x7f
 8002300:	805a      	strh	r2, [r3, #2]
 8002302:	e024      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s7+tor<=Mic_VR && Mic_VR<=s8-tor) {
 8002304:	4b13      	ldr	r3, [pc, #76]	; (8002354 <VR2_Microphone+0x158>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a20      	ldr	r2, [pc, #128]	; (800238c <VR2_Microphone+0x190>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d908      	bls.n	8002320 <VR2_Microphone+0x124>
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <VR2_Microphone+0x158>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <VR2_Microphone+0x194>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d803      	bhi.n	8002320 <VR2_Microphone+0x124>
        arrayLED[1] = 0x0FF;
 8002318:	4b10      	ldr	r3, [pc, #64]	; (800235c <VR2_Microphone+0x160>)
 800231a:	22ff      	movs	r2, #255	; 0xff
 800231c:	805a      	strh	r2, [r3, #2]
 800231e:	e016      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s8+tor<=Mic_VR && Mic_VR<=s9-tor) {
 8002320:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <VR2_Microphone+0x158>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a1b      	ldr	r2, [pc, #108]	; (8002394 <VR2_Microphone+0x198>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d908      	bls.n	800233c <VR2_Microphone+0x140>
 800232a:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <VR2_Microphone+0x158>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a1a      	ldr	r2, [pc, #104]	; (8002398 <VR2_Microphone+0x19c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d803      	bhi.n	800233c <VR2_Microphone+0x140>
        arrayLED[1] = 0x1FF;
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <VR2_Microphone+0x160>)
 8002336:	4a19      	ldr	r2, [pc, #100]	; (800239c <VR2_Microphone+0x1a0>)
 8002338:	805a      	strh	r2, [r3, #2]
 800233a:	e008      	b.n	800234e <VR2_Microphone+0x152>
    } else if(s9+tor<=Mic_VR) {
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <VR2_Microphone+0x158>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a17      	ldr	r2, [pc, #92]	; (80023a0 <VR2_Microphone+0x1a4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d903      	bls.n	800234e <VR2_Microphone+0x152>
        arrayLED[1] = 0x3FF;
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <VR2_Microphone+0x160>)
 8002348:	4a16      	ldr	r2, [pc, #88]	; (80023a4 <VR2_Microphone+0x1a8>)
 800234a:	805a      	strh	r2, [r3, #2]
}
 800234c:	e7ff      	b.n	800234e <VR2_Microphone+0x152>
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	20000210 	.word	0x20000210
 8002358:	200001f0 	.word	0x200001f0
 800235c:	2000008c 	.word	0x2000008c
 8002360:	000002e1 	.word	0x000002e1
 8002364:	00000455 	.word	0x00000455
 8002368:	00000464 	.word	0x00000464
 800236c:	000005c9 	.word	0x000005c9
 8002370:	0000073d 	.word	0x0000073d
 8002374:	0000074c 	.word	0x0000074c
 8002378:	000008b2 	.word	0x000008b2
 800237c:	000008c1 	.word	0x000008c1
 8002380:	00000a26 	.word	0x00000a26
 8002384:	00000a35 	.word	0x00000a35
 8002388:	00000b9a 	.word	0x00000b9a
 800238c:	00000ba9 	.word	0x00000ba9
 8002390:	00000d0e 	.word	0x00000d0e
 8002394:	00000d1d 	.word	0x00000d1d
 8002398:	00000e83 	.word	0x00000e83
 800239c:	000001ff 	.word	0x000001ff
 80023a0:	00000e92 	.word	0x00000e92
 80023a4:	000003ff 	.word	0x000003ff

080023a8 <VR3_Mix>:

void VR3_Mix(void) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
        static uint32_t Mix_VR = 0;
        Mix_VR = (Mix_VR*3 + ADC_A*7)/10;
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <VR3_Mix+0x158>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	0013      	movs	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	1899      	adds	r1, r3, r2
 80023b6:	4b53      	ldr	r3, [pc, #332]	; (8002504 <VR3_Mix+0x15c>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	0013      	movs	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	1a9b      	subs	r3, r3, r2
 80023c0:	18cb      	adds	r3, r1, r3
 80023c2:	210a      	movs	r1, #10
 80023c4:	0018      	movs	r0, r3
 80023c6:	f7fd fea5 	bl	8000114 <__udivsi3>
 80023ca:	0003      	movs	r3, r0
 80023cc:	001a      	movs	r2, r3
 80023ce:	4b4c      	ldr	r3, [pc, #304]	; (8002500 <VR3_Mix+0x158>)
 80023d0:	601a      	str	r2, [r3, #0]

               if(                  Mix_VR<=s0-tor) {
 80023d2:	4b4b      	ldr	r3, [pc, #300]	; (8002500 <VR3_Mix+0x158>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	23b6      	movs	r3, #182	; 0xb6
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	429a      	cmp	r2, r3
 80023dc:	d803      	bhi.n	80023e6 <VR3_Mix+0x3e>
            //Seg 0
            arrayLED[0] = 0x000;
 80023de:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <VR3_Mix+0x160>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	801a      	strh	r2, [r3, #0]
            arrayLED[0] = 0x1FF;
        } else if(s9+tor<=Mix_VR) {
            //Seg 10
            arrayLED[0] = 0x3FF;
        }
}
 80023e4:	e089      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s0+tor<=Mix_VR && Mix_VR<=s1-tor) {
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <VR3_Mix+0x158>)
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	23be      	movs	r3, #190	; 0xbe
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d308      	bcc.n	8002404 <VR3_Mix+0x5c>
 80023f2:	4b43      	ldr	r3, [pc, #268]	; (8002500 <VR3_Mix+0x158>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a45      	ldr	r2, [pc, #276]	; (800250c <VR3_Mix+0x164>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d803      	bhi.n	8002404 <VR3_Mix+0x5c>
            arrayLED[0] = 0x001;
 80023fc:	4b42      	ldr	r3, [pc, #264]	; (8002508 <VR3_Mix+0x160>)
 80023fe:	2201      	movs	r2, #1
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	e07a      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s1+tor<=Mix_VR && Mix_VR<=s2-tor) {
 8002404:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <VR3_Mix+0x158>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	23bc      	movs	r3, #188	; 0xbc
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	429a      	cmp	r2, r3
 800240e:	d908      	bls.n	8002422 <VR3_Mix+0x7a>
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <VR3_Mix+0x158>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <VR3_Mix+0x168>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d803      	bhi.n	8002422 <VR3_Mix+0x7a>
            arrayLED[0] = 0x003;
 800241a:	4b3b      	ldr	r3, [pc, #236]	; (8002508 <VR3_Mix+0x160>)
 800241c:	2203      	movs	r2, #3
 800241e:	801a      	strh	r2, [r3, #0]
 8002420:	e06b      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s2+tor<=Mix_VR && Mix_VR<=s3-tor) {
 8002422:	4b37      	ldr	r3, [pc, #220]	; (8002500 <VR3_Mix+0x158>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a3b      	ldr	r2, [pc, #236]	; (8002514 <VR3_Mix+0x16c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d908      	bls.n	800243e <VR3_Mix+0x96>
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <VR3_Mix+0x158>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a39      	ldr	r2, [pc, #228]	; (8002518 <VR3_Mix+0x170>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d803      	bhi.n	800243e <VR3_Mix+0x96>
            arrayLED[0] = 0x007;
 8002436:	4b34      	ldr	r3, [pc, #208]	; (8002508 <VR3_Mix+0x160>)
 8002438:	2207      	movs	r2, #7
 800243a:	801a      	strh	r2, [r3, #0]
 800243c:	e05d      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s3+tor<=Mix_VR && Mix_VR<=s4-tor) {
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <VR3_Mix+0x158>)
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	23bb      	movs	r3, #187	; 0xbb
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	429a      	cmp	r2, r3
 8002448:	d908      	bls.n	800245c <VR3_Mix+0xb4>
 800244a:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <VR3_Mix+0x158>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a33      	ldr	r2, [pc, #204]	; (800251c <VR3_Mix+0x174>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d803      	bhi.n	800245c <VR3_Mix+0xb4>
            arrayLED[0] = 0x00F;
 8002454:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <VR3_Mix+0x160>)
 8002456:	220f      	movs	r2, #15
 8002458:	801a      	strh	r2, [r3, #0]
 800245a:	e04e      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s4+tor<=Mix_VR && Mix_VR<=s5-tor) {
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <VR3_Mix+0x158>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a2f      	ldr	r2, [pc, #188]	; (8002520 <VR3_Mix+0x178>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d908      	bls.n	8002478 <VR3_Mix+0xd0>
 8002466:	4b26      	ldr	r3, [pc, #152]	; (8002500 <VR3_Mix+0x158>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2e      	ldr	r2, [pc, #184]	; (8002524 <VR3_Mix+0x17c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d803      	bhi.n	8002478 <VR3_Mix+0xd0>
            arrayLED[0] = 0x01F;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <VR3_Mix+0x160>)
 8002472:	221f      	movs	r2, #31
 8002474:	801a      	strh	r2, [r3, #0]
 8002476:	e040      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s5+tor<=Mix_VR && Mix_VR<=s6-tor) {
 8002478:	4b21      	ldr	r3, [pc, #132]	; (8002500 <VR3_Mix+0x158>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a2a      	ldr	r2, [pc, #168]	; (8002528 <VR3_Mix+0x180>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d908      	bls.n	8002494 <VR3_Mix+0xec>
 8002482:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <VR3_Mix+0x158>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a29      	ldr	r2, [pc, #164]	; (800252c <VR3_Mix+0x184>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d803      	bhi.n	8002494 <VR3_Mix+0xec>
            arrayLED[0] = 0x03F;
 800248c:	4b1e      	ldr	r3, [pc, #120]	; (8002508 <VR3_Mix+0x160>)
 800248e:	223f      	movs	r2, #63	; 0x3f
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	e032      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s6+tor<=Mix_VR && Mix_VR<=s7-tor) {
 8002494:	4b1a      	ldr	r3, [pc, #104]	; (8002500 <VR3_Mix+0x158>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a25      	ldr	r2, [pc, #148]	; (8002530 <VR3_Mix+0x188>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d908      	bls.n	80024b0 <VR3_Mix+0x108>
 800249e:	4b18      	ldr	r3, [pc, #96]	; (8002500 <VR3_Mix+0x158>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a24      	ldr	r2, [pc, #144]	; (8002534 <VR3_Mix+0x18c>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d803      	bhi.n	80024b0 <VR3_Mix+0x108>
            arrayLED[0] = 0x07F;
 80024a8:	4b17      	ldr	r3, [pc, #92]	; (8002508 <VR3_Mix+0x160>)
 80024aa:	227f      	movs	r2, #127	; 0x7f
 80024ac:	801a      	strh	r2, [r3, #0]
 80024ae:	e024      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s7+tor<=Mix_VR && Mix_VR<=s8-tor) {
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <VR3_Mix+0x158>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a20      	ldr	r2, [pc, #128]	; (8002538 <VR3_Mix+0x190>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d908      	bls.n	80024cc <VR3_Mix+0x124>
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <VR3_Mix+0x158>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a1f      	ldr	r2, [pc, #124]	; (800253c <VR3_Mix+0x194>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d803      	bhi.n	80024cc <VR3_Mix+0x124>
            arrayLED[0] = 0x0FF;
 80024c4:	4b10      	ldr	r3, [pc, #64]	; (8002508 <VR3_Mix+0x160>)
 80024c6:	22ff      	movs	r2, #255	; 0xff
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	e016      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s8+tor<=Mix_VR && Mix_VR<=s9-tor) {
 80024cc:	4b0c      	ldr	r3, [pc, #48]	; (8002500 <VR3_Mix+0x158>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a1b      	ldr	r2, [pc, #108]	; (8002540 <VR3_Mix+0x198>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d908      	bls.n	80024e8 <VR3_Mix+0x140>
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <VR3_Mix+0x158>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <VR3_Mix+0x19c>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d803      	bhi.n	80024e8 <VR3_Mix+0x140>
            arrayLED[0] = 0x1FF;
 80024e0:	4b09      	ldr	r3, [pc, #36]	; (8002508 <VR3_Mix+0x160>)
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <VR3_Mix+0x1a0>)
 80024e4:	801a      	strh	r2, [r3, #0]
 80024e6:	e008      	b.n	80024fa <VR3_Mix+0x152>
        } else if(s9+tor<=Mix_VR) {
 80024e8:	4b05      	ldr	r3, [pc, #20]	; (8002500 <VR3_Mix+0x158>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a17      	ldr	r2, [pc, #92]	; (800254c <VR3_Mix+0x1a4>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d903      	bls.n	80024fa <VR3_Mix+0x152>
            arrayLED[0] = 0x3FF;
 80024f2:	4b05      	ldr	r3, [pc, #20]	; (8002508 <VR3_Mix+0x160>)
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <VR3_Mix+0x1a8>)
 80024f6:	801a      	strh	r2, [r3, #0]
}
 80024f8:	e7ff      	b.n	80024fa <VR3_Mix+0x152>
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	20000214 	.word	0x20000214
 8002504:	200001f0 	.word	0x200001f0
 8002508:	2000008c 	.word	0x2000008c
 800250c:	000002e1 	.word	0x000002e1
 8002510:	00000455 	.word	0x00000455
 8002514:	00000464 	.word	0x00000464
 8002518:	000005c9 	.word	0x000005c9
 800251c:	0000073d 	.word	0x0000073d
 8002520:	0000074c 	.word	0x0000074c
 8002524:	000008b2 	.word	0x000008b2
 8002528:	000008c1 	.word	0x000008c1
 800252c:	00000a26 	.word	0x00000a26
 8002530:	00000a35 	.word	0x00000a35
 8002534:	00000b9a 	.word	0x00000b9a
 8002538:	00000ba9 	.word	0x00000ba9
 800253c:	00000d0e 	.word	0x00000d0e
 8002540:	00000d1d 	.word	0x00000d1d
 8002544:	00000e83 	.word	0x00000e83
 8002548:	000001ff 	.word	0x000001ff
 800254c:	00000e92 	.word	0x00000e92
 8002550:	000003ff 	.word	0x000003ff

08002554 <VR4_Headphone>:

void VR4_Headphone(void) {
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
        static uint32_t HP_VR = 0;
        HP_VR = (HP_VR*3 + ADC_D*7)/10;
 8002558:	4b75      	ldr	r3, [pc, #468]	; (8002730 <VR4_Headphone+0x1dc>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	0013      	movs	r3, r2
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	1899      	adds	r1, r3, r2
 8002562:	4b74      	ldr	r3, [pc, #464]	; (8002734 <VR4_Headphone+0x1e0>)
 8002564:	68da      	ldr	r2, [r3, #12]
 8002566:	0013      	movs	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	1a9b      	subs	r3, r3, r2
 800256c:	18cb      	adds	r3, r1, r3
 800256e:	210a      	movs	r1, #10
 8002570:	0018      	movs	r0, r3
 8002572:	f7fd fdcf 	bl	8000114 <__udivsi3>
 8002576:	0003      	movs	r3, r0
 8002578:	001a      	movs	r2, r3
 800257a:	4b6d      	ldr	r3, [pc, #436]	; (8002730 <VR4_Headphone+0x1dc>)
 800257c:	601a      	str	r2, [r3, #0]

               if(                  HP_VR<=s0-tor) {
 800257e:	4b6c      	ldr	r3, [pc, #432]	; (8002730 <VR4_Headphone+0x1dc>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	23b6      	movs	r3, #182	; 0xb6
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	429a      	cmp	r2, r3
 8002588:	d809      	bhi.n	800259e <VR4_Headphone+0x4a>
            //Seg 0
            SW5_LED14 = signle_LED_rgb_R;
 800258a:	4b6b      	ldr	r3, [pc, #428]	; (8002738 <VR4_Headphone+0x1e4>)
 800258c:	2201      	movs	r2, #1
 800258e:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_R;
 8002590:	4b6a      	ldr	r3, [pc, #424]	; (800273c <VR4_Headphone+0x1e8>)
 8002592:	2201      	movs	r2, #1
 8002594:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_R;
 8002596:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <VR4_Headphone+0x1ec>)
 8002598:	2201      	movs	r2, #1
 800259a:	701a      	strb	r2, [r3, #0]
            //Seg 10
            SW5_LED14 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
            SW5_LED13 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
            SW5_LED17 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
        }
}
 800259c:	e0c5      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s0+tor<=HP_VR && HP_VR<=s1-tor) {
 800259e:	4b64      	ldr	r3, [pc, #400]	; (8002730 <VR4_Headphone+0x1dc>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	23be      	movs	r3, #190	; 0xbe
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d30e      	bcc.n	80025c8 <VR4_Headphone+0x74>
 80025aa:	4b61      	ldr	r3, [pc, #388]	; (8002730 <VR4_Headphone+0x1dc>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a65      	ldr	r2, [pc, #404]	; (8002744 <VR4_Headphone+0x1f0>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d809      	bhi.n	80025c8 <VR4_Headphone+0x74>
            SW5_LED14 = signle_LED_rgb_R + signle_LED_rgb_G;
 80025b4:	4b60      	ldr	r3, [pc, #384]	; (8002738 <VR4_Headphone+0x1e4>)
 80025b6:	2203      	movs	r2, #3
 80025b8:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_R;
 80025ba:	4b60      	ldr	r3, [pc, #384]	; (800273c <VR4_Headphone+0x1e8>)
 80025bc:	2201      	movs	r2, #1
 80025be:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_R;
 80025c0:	4b5f      	ldr	r3, [pc, #380]	; (8002740 <VR4_Headphone+0x1ec>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e0b0      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s1+tor<=HP_VR && HP_VR<=s2-tor) {
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <VR4_Headphone+0x1dc>)
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	23bc      	movs	r3, #188	; 0xbc
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d90e      	bls.n	80025f2 <VR4_Headphone+0x9e>
 80025d4:	4b56      	ldr	r3, [pc, #344]	; (8002730 <VR4_Headphone+0x1dc>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a5b      	ldr	r2, [pc, #364]	; (8002748 <VR4_Headphone+0x1f4>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d809      	bhi.n	80025f2 <VR4_Headphone+0x9e>
            SW5_LED14 = signle_LED_rgb_G;
 80025de:	4b56      	ldr	r3, [pc, #344]	; (8002738 <VR4_Headphone+0x1e4>)
 80025e0:	2202      	movs	r2, #2
 80025e2:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_R + signle_LED_rgb_G;
 80025e4:	4b55      	ldr	r3, [pc, #340]	; (800273c <VR4_Headphone+0x1e8>)
 80025e6:	2203      	movs	r2, #3
 80025e8:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_R;
 80025ea:	4b55      	ldr	r3, [pc, #340]	; (8002740 <VR4_Headphone+0x1ec>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
 80025f0:	e09b      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s2+tor<=HP_VR && HP_VR<=s3-tor) {
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <VR4_Headphone+0x1dc>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a55      	ldr	r2, [pc, #340]	; (800274c <VR4_Headphone+0x1f8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d90e      	bls.n	800261a <VR4_Headphone+0xc6>
 80025fc:	4b4c      	ldr	r3, [pc, #304]	; (8002730 <VR4_Headphone+0x1dc>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a53      	ldr	r2, [pc, #332]	; (8002750 <VR4_Headphone+0x1fc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d809      	bhi.n	800261a <VR4_Headphone+0xc6>
            SW5_LED14 = signle_LED_rgb_G;
 8002606:	4b4c      	ldr	r3, [pc, #304]	; (8002738 <VR4_Headphone+0x1e4>)
 8002608:	2202      	movs	r2, #2
 800260a:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_G;
 800260c:	4b4b      	ldr	r3, [pc, #300]	; (800273c <VR4_Headphone+0x1e8>)
 800260e:	2202      	movs	r2, #2
 8002610:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_R + signle_LED_rgb_G;
 8002612:	4b4b      	ldr	r3, [pc, #300]	; (8002740 <VR4_Headphone+0x1ec>)
 8002614:	2203      	movs	r2, #3
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e087      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s3+tor<=HP_VR && HP_VR<=s4-tor) {
 800261a:	4b45      	ldr	r3, [pc, #276]	; (8002730 <VR4_Headphone+0x1dc>)
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	23bb      	movs	r3, #187	; 0xbb
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	429a      	cmp	r2, r3
 8002624:	d90e      	bls.n	8002644 <VR4_Headphone+0xf0>
 8002626:	4b42      	ldr	r3, [pc, #264]	; (8002730 <VR4_Headphone+0x1dc>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4a      	ldr	r2, [pc, #296]	; (8002754 <VR4_Headphone+0x200>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d809      	bhi.n	8002644 <VR4_Headphone+0xf0>
            SW5_LED14 = signle_LED_rgb_G;
 8002630:	4b41      	ldr	r3, [pc, #260]	; (8002738 <VR4_Headphone+0x1e4>)
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_G;
 8002636:	4b41      	ldr	r3, [pc, #260]	; (800273c <VR4_Headphone+0x1e8>)
 8002638:	2202      	movs	r2, #2
 800263a:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_G;
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <VR4_Headphone+0x1ec>)
 800263e:	2202      	movs	r2, #2
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e072      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s4+tor<=HP_VR && HP_VR<=s5-tor) {
 8002644:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <VR4_Headphone+0x1dc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a43      	ldr	r2, [pc, #268]	; (8002758 <VR4_Headphone+0x204>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d90e      	bls.n	800266c <VR4_Headphone+0x118>
 800264e:	4b38      	ldr	r3, [pc, #224]	; (8002730 <VR4_Headphone+0x1dc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a42      	ldr	r2, [pc, #264]	; (800275c <VR4_Headphone+0x208>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d809      	bhi.n	800266c <VR4_Headphone+0x118>
            SW5_LED14 = signle_LED_rgb_G + signle_LED_rgb_B;
 8002658:	4b37      	ldr	r3, [pc, #220]	; (8002738 <VR4_Headphone+0x1e4>)
 800265a:	2206      	movs	r2, #6
 800265c:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_G;
 800265e:	4b37      	ldr	r3, [pc, #220]	; (800273c <VR4_Headphone+0x1e8>)
 8002660:	2202      	movs	r2, #2
 8002662:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_G;
 8002664:	4b36      	ldr	r3, [pc, #216]	; (8002740 <VR4_Headphone+0x1ec>)
 8002666:	2202      	movs	r2, #2
 8002668:	701a      	strb	r2, [r3, #0]
 800266a:	e05e      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s5+tor<=HP_VR && HP_VR<=s6-tor) {
 800266c:	4b30      	ldr	r3, [pc, #192]	; (8002730 <VR4_Headphone+0x1dc>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a3b      	ldr	r2, [pc, #236]	; (8002760 <VR4_Headphone+0x20c>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d90e      	bls.n	8002694 <VR4_Headphone+0x140>
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <VR4_Headphone+0x1dc>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a3a      	ldr	r2, [pc, #232]	; (8002764 <VR4_Headphone+0x210>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d809      	bhi.n	8002694 <VR4_Headphone+0x140>
            SW5_LED14 = signle_LED_rgb_B;
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <VR4_Headphone+0x1e4>)
 8002682:	2204      	movs	r2, #4
 8002684:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_G + signle_LED_rgb_B;
 8002686:	4b2d      	ldr	r3, [pc, #180]	; (800273c <VR4_Headphone+0x1e8>)
 8002688:	2206      	movs	r2, #6
 800268a:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_G;
 800268c:	4b2c      	ldr	r3, [pc, #176]	; (8002740 <VR4_Headphone+0x1ec>)
 800268e:	2202      	movs	r2, #2
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e04a      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s6+tor<=HP_VR && HP_VR<=s7-tor) {
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <VR4_Headphone+0x1dc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a33      	ldr	r2, [pc, #204]	; (8002768 <VR4_Headphone+0x214>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d90e      	bls.n	80026bc <VR4_Headphone+0x168>
 800269e:	4b24      	ldr	r3, [pc, #144]	; (8002730 <VR4_Headphone+0x1dc>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a32      	ldr	r2, [pc, #200]	; (800276c <VR4_Headphone+0x218>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d809      	bhi.n	80026bc <VR4_Headphone+0x168>
            SW5_LED14 = signle_LED_rgb_B;
 80026a8:	4b23      	ldr	r3, [pc, #140]	; (8002738 <VR4_Headphone+0x1e4>)
 80026aa:	2204      	movs	r2, #4
 80026ac:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_B;
 80026ae:	4b23      	ldr	r3, [pc, #140]	; (800273c <VR4_Headphone+0x1e8>)
 80026b0:	2204      	movs	r2, #4
 80026b2:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_G + signle_LED_rgb_B;
 80026b4:	4b22      	ldr	r3, [pc, #136]	; (8002740 <VR4_Headphone+0x1ec>)
 80026b6:	2206      	movs	r2, #6
 80026b8:	701a      	strb	r2, [r3, #0]
 80026ba:	e036      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s7+tor<=HP_VR && HP_VR<=s8-tor) {
 80026bc:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <VR4_Headphone+0x1dc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a2b      	ldr	r2, [pc, #172]	; (8002770 <VR4_Headphone+0x21c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d90e      	bls.n	80026e4 <VR4_Headphone+0x190>
 80026c6:	4b1a      	ldr	r3, [pc, #104]	; (8002730 <VR4_Headphone+0x1dc>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <VR4_Headphone+0x220>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d809      	bhi.n	80026e4 <VR4_Headphone+0x190>
            SW5_LED14 = signle_LED_rgb_B;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <VR4_Headphone+0x1e4>)
 80026d2:	2204      	movs	r2, #4
 80026d4:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_B;
 80026d6:	4b19      	ldr	r3, [pc, #100]	; (800273c <VR4_Headphone+0x1e8>)
 80026d8:	2204      	movs	r2, #4
 80026da:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_B;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <VR4_Headphone+0x1ec>)
 80026de:	2204      	movs	r2, #4
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e022      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s8+tor<=HP_VR && HP_VR<=s9-tor) {
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <VR4_Headphone+0x1dc>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a23      	ldr	r2, [pc, #140]	; (8002778 <VR4_Headphone+0x224>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d90e      	bls.n	800270c <VR4_Headphone+0x1b8>
 80026ee:	4b10      	ldr	r3, [pc, #64]	; (8002730 <VR4_Headphone+0x1dc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a22      	ldr	r2, [pc, #136]	; (800277c <VR4_Headphone+0x228>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d809      	bhi.n	800270c <VR4_Headphone+0x1b8>
            SW5_LED14 = signle_LED_rgb_G + signle_LED_rgb_B;
 80026f8:	4b0f      	ldr	r3, [pc, #60]	; (8002738 <VR4_Headphone+0x1e4>)
 80026fa:	2206      	movs	r2, #6
 80026fc:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_G + signle_LED_rgb_B;
 80026fe:	4b0f      	ldr	r3, [pc, #60]	; (800273c <VR4_Headphone+0x1e8>)
 8002700:	2206      	movs	r2, #6
 8002702:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_G + signle_LED_rgb_B;
 8002704:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <VR4_Headphone+0x1ec>)
 8002706:	2206      	movs	r2, #6
 8002708:	701a      	strb	r2, [r3, #0]
 800270a:	e00e      	b.n	800272a <VR4_Headphone+0x1d6>
        } else if(s9+tor<=HP_VR) {
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <VR4_Headphone+0x1dc>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a1b      	ldr	r2, [pc, #108]	; (8002780 <VR4_Headphone+0x22c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d909      	bls.n	800272a <VR4_Headphone+0x1d6>
            SW5_LED14 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 8002716:	4b08      	ldr	r3, [pc, #32]	; (8002738 <VR4_Headphone+0x1e4>)
 8002718:	2207      	movs	r2, #7
 800271a:	701a      	strb	r2, [r3, #0]
            SW5_LED13 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <VR4_Headphone+0x1e8>)
 800271e:	2207      	movs	r2, #7
 8002720:	701a      	strb	r2, [r3, #0]
            SW5_LED17 = signle_LED_rgb_R + signle_LED_rgb_G + signle_LED_rgb_B;
 8002722:	4b07      	ldr	r3, [pc, #28]	; (8002740 <VR4_Headphone+0x1ec>)
 8002724:	2207      	movs	r2, #7
 8002726:	701a      	strb	r2, [r3, #0]
}
 8002728:	e7ff      	b.n	800272a <VR4_Headphone+0x1d6>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	20000218 	.word	0x20000218
 8002734:	200001f0 	.word	0x200001f0
 8002738:	20000098 	.word	0x20000098
 800273c:	20000097 	.word	0x20000097
 8002740:	20000099 	.word	0x20000099
 8002744:	000002e1 	.word	0x000002e1
 8002748:	00000455 	.word	0x00000455
 800274c:	00000464 	.word	0x00000464
 8002750:	000005c9 	.word	0x000005c9
 8002754:	0000073d 	.word	0x0000073d
 8002758:	0000074c 	.word	0x0000074c
 800275c:	000008b2 	.word	0x000008b2
 8002760:	000008c1 	.word	0x000008c1
 8002764:	00000a26 	.word	0x00000a26
 8002768:	00000a35 	.word	0x00000a35
 800276c:	00000b9a 	.word	0x00000b9a
 8002770:	00000ba9 	.word	0x00000ba9
 8002774:	00000d0e 	.word	0x00000d0e
 8002778:	00000d1d 	.word	0x00000d1d
 800277c:	00000e83 	.word	0x00000e83
 8002780:	00000e92 	.word	0x00000e92

08002784 <Task_Preset_LED_GPIO>:

void Task_Preset_LED_GPIO(void) {
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
    static xu_flag u8PresetLED_Save = {0};

    if(u8PresetLED_Save.u8Byte != u8PresetLED) {
 8002788:	4b37      	ldr	r3, [pc, #220]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	4b37      	ldr	r3, [pc, #220]	; (800286c <Task_Preset_LED_GPIO+0xe8>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d066      	beq.n	8002862 <Task_Preset_LED_GPIO+0xde>
        u8PresetLED_Save.u8Byte = u8PresetLED;
 8002794:	4b35      	ldr	r3, [pc, #212]	; (800286c <Task_Preset_LED_GPIO+0xe8>)
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b33      	ldr	r3, [pc, #204]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 800279a:	701a      	strb	r2, [r3, #0]
        HAL_GPIO_WritePin(Preset_LED01, u8PresetLED_Save.sb.bit0);
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	07db      	lsls	r3, r3, #31
 80027a2:	0fdb      	lsrs	r3, r3, #31
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	001a      	movs	r2, r3
 80027a8:	23a0      	movs	r3, #160	; 0xa0
 80027aa:	05db      	lsls	r3, r3, #23
 80027ac:	2110      	movs	r1, #16
 80027ae:	0018      	movs	r0, r3
 80027b0:	f002 f83b 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED02, u8PresetLED_Save.sb.bit1);
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	079b      	lsls	r3, r3, #30
 80027ba:	0fdb      	lsrs	r3, r3, #31
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	001a      	movs	r2, r3
 80027c0:	23a0      	movs	r3, #160	; 0xa0
 80027c2:	05db      	lsls	r3, r3, #23
 80027c4:	2120      	movs	r1, #32
 80027c6:	0018      	movs	r0, r3
 80027c8:	f002 f82f 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED03, u8PresetLED_Save.sb.bit2);
 80027cc:	4b26      	ldr	r3, [pc, #152]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	075b      	lsls	r3, r3, #29
 80027d2:	0fdb      	lsrs	r3, r3, #31
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	001a      	movs	r2, r3
 80027d8:	2380      	movs	r3, #128	; 0x80
 80027da:	0119      	lsls	r1, r3, #4
 80027dc:	23a0      	movs	r3, #160	; 0xa0
 80027de:	05db      	lsls	r3, r3, #23
 80027e0:	0018      	movs	r0, r3
 80027e2:	f002 f822 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED04, u8PresetLED_Save.sb.bit3);
 80027e6:	4b20      	ldr	r3, [pc, #128]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	071b      	lsls	r3, r3, #28
 80027ec:	0fdb      	lsrs	r3, r3, #31
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	001a      	movs	r2, r3
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	0159      	lsls	r1, r3, #5
 80027f6:	23a0      	movs	r3, #160	; 0xa0
 80027f8:	05db      	lsls	r3, r3, #23
 80027fa:	0018      	movs	r0, r3
 80027fc:	f002 f815 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED05, u8PresetLED_Save.sb.bit4);
 8002800:	4b19      	ldr	r3, [pc, #100]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	06db      	lsls	r3, r3, #27
 8002806:	0fdb      	lsrs	r3, r3, #31
 8002808:	b2db      	uxtb	r3, r3
 800280a:	001a      	movs	r2, r3
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	0219      	lsls	r1, r3, #8
 8002810:	23a0      	movs	r3, #160	; 0xa0
 8002812:	05db      	lsls	r3, r3, #23
 8002814:	0018      	movs	r0, r3
 8002816:	f002 f808 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED06, u8PresetLED_Save.sb.bit5);
 800281a:	4b13      	ldr	r3, [pc, #76]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	069b      	lsls	r3, r3, #26
 8002820:	0fdb      	lsrs	r3, r3, #31
 8002822:	b2db      	uxtb	r3, r3
 8002824:	001a      	movs	r2, r3
 8002826:	2380      	movs	r3, #128	; 0x80
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	4811      	ldr	r0, [pc, #68]	; (8002870 <Task_Preset_LED_GPIO+0xec>)
 800282c:	0019      	movs	r1, r3
 800282e:	f001 fffc 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED07, u8PresetLED_Save.sb.bit6);
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	065b      	lsls	r3, r3, #25
 8002838:	0fdb      	lsrs	r3, r3, #31
 800283a:	b2db      	uxtb	r3, r3
 800283c:	001a      	movs	r2, r3
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	480b      	ldr	r0, [pc, #44]	; (8002870 <Task_Preset_LED_GPIO+0xec>)
 8002844:	0019      	movs	r1, r3
 8002846:	f001 fff0 	bl	800482a <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(Preset_LED08, u8PresetLED_Save.sb.bit7);
 800284a:	4b07      	ldr	r3, [pc, #28]	; (8002868 <Task_Preset_LED_GPIO+0xe4>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	061b      	lsls	r3, r3, #24
 8002850:	0fdb      	lsrs	r3, r3, #31
 8002852:	b2db      	uxtb	r3, r3
 8002854:	001a      	movs	r2, r3
 8002856:	23a0      	movs	r3, #160	; 0xa0
 8002858:	05db      	lsls	r3, r3, #23
 800285a:	2101      	movs	r1, #1
 800285c:	0018      	movs	r0, r3
 800285e:	f001 ffe4 	bl	800482a <HAL_GPIO_WritePin>
    }
}
 8002862:	46c0      	nop			; (mov r8, r8)
 8002864:	46bd      	mov	sp, r7
 8002866:	bd80      	pop	{r7, pc}
 8002868:	2000021c 	.word	0x2000021c
 800286c:	200001e4 	.word	0x200001e4
 8002870:	50000400 	.word	0x50000400

08002874 <Task_Button>:

unsigned char Task_Button(void) {
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
    xu_flag xfButton = {0};
 800287a:	2300      	movs	r3, #0
 800287c:	607b      	str	r3, [r7, #4]

    //xfButton.sb.bit0 = !HAL_GPIO_ReadPin(Presets_Switch);
    xfButton.sb.bit1 = !HAL_GPIO_ReadPin(Pattern_Switch);
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <Task_Button+0xc4>)
 8002880:	2140      	movs	r1, #64	; 0x40
 8002882:	0018      	movs	r0, r3
 8002884:	f001 ffb4 	bl	80047f0 <HAL_GPIO_ReadPin>
 8002888:	0003      	movs	r3, r0
 800288a:	425a      	negs	r2, r3
 800288c:	4153      	adcs	r3, r2
 800288e:	b2da      	uxtb	r2, r3
 8002890:	1d3b      	adds	r3, r7, #4
 8002892:	2101      	movs	r1, #1
 8002894:	400a      	ands	r2, r1
 8002896:	1890      	adds	r0, r2, r2
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	2102      	movs	r1, #2
 800289c:	438a      	bics	r2, r1
 800289e:	1c11      	adds	r1, r2, #0
 80028a0:	1c02      	adds	r2, r0, #0
 80028a2:	430a      	orrs	r2, r1
 80028a4:	701a      	strb	r2, [r3, #0]
    xfButton.sb.bit2 = !HAL_GPIO_ReadPin(Headphone_Mute);
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	009a      	lsls	r2, r3, #2
 80028aa:	23a0      	movs	r3, #160	; 0xa0
 80028ac:	05db      	lsls	r3, r3, #23
 80028ae:	0011      	movs	r1, r2
 80028b0:	0018      	movs	r0, r3
 80028b2:	f001 ff9d 	bl	80047f0 <HAL_GPIO_ReadPin>
 80028b6:	0003      	movs	r3, r0
 80028b8:	425a      	negs	r2, r3
 80028ba:	4153      	adcs	r3, r2
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	2101      	movs	r1, #1
 80028c2:	400a      	ands	r2, r1
 80028c4:	0090      	lsls	r0, r2, #2
 80028c6:	781a      	ldrb	r2, [r3, #0]
 80028c8:	2104      	movs	r1, #4
 80028ca:	438a      	bics	r2, r1
 80028cc:	1c11      	adds	r1, r2, #0
 80028ce:	1c02      	adds	r2, r0, #0
 80028d0:	430a      	orrs	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
    xfButton.sb.bit3 = !HAL_GPIO_ReadPin(Mix_Mute);
 80028d4:	2380      	movs	r3, #128	; 0x80
 80028d6:	005a      	lsls	r2, r3, #1
 80028d8:	23a0      	movs	r3, #160	; 0xa0
 80028da:	05db      	lsls	r3, r3, #23
 80028dc:	0011      	movs	r1, r2
 80028de:	0018      	movs	r0, r3
 80028e0:	f001 ff86 	bl	80047f0 <HAL_GPIO_ReadPin>
 80028e4:	0003      	movs	r3, r0
 80028e6:	425a      	negs	r2, r3
 80028e8:	4153      	adcs	r3, r2
 80028ea:	b2da      	uxtb	r2, r3
 80028ec:	1d3b      	adds	r3, r7, #4
 80028ee:	2101      	movs	r1, #1
 80028f0:	400a      	ands	r2, r1
 80028f2:	00d0      	lsls	r0, r2, #3
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	2108      	movs	r1, #8
 80028f8:	438a      	bics	r2, r1
 80028fa:	1c11      	adds	r1, r2, #0
 80028fc:	1c02      	adds	r2, r0, #0
 80028fe:	430a      	orrs	r2, r1
 8002900:	701a      	strb	r2, [r3, #0]
    xfButton.sb.bit4 = !HAL_GPIO_ReadPin(Mic_Mute);
 8002902:	4b0e      	ldr	r3, [pc, #56]	; (800293c <Task_Button+0xc8>)
 8002904:	2104      	movs	r1, #4
 8002906:	0018      	movs	r0, r3
 8002908:	f001 ff72 	bl	80047f0 <HAL_GPIO_ReadPin>
 800290c:	0003      	movs	r3, r0
 800290e:	425a      	negs	r2, r3
 8002910:	4153      	adcs	r3, r2
 8002912:	b2da      	uxtb	r2, r3
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2101      	movs	r1, #1
 8002918:	400a      	ands	r2, r1
 800291a:	0110      	lsls	r0, r2, #4
 800291c:	781a      	ldrb	r2, [r3, #0]
 800291e:	2110      	movs	r1, #16
 8002920:	438a      	bics	r2, r1
 8002922:	1c11      	adds	r1, r2, #0
 8002924:	1c02      	adds	r2, r0, #0
 8002926:	430a      	orrs	r2, r1
 8002928:	701a      	strb	r2, [r3, #0]

    return xfButton.u8Byte;
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	781b      	ldrb	r3, [r3, #0]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b002      	add	sp, #8
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			; (mov r8, r8)
 8002938:	50000800 	.word	0x50000800
 800293c:	50000400 	.word	0x50000400

08002940 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	46bd      	mov	sp, r7
 800294c:	b002      	add	sp, #8
 800294e:	bd80      	pop	{r7, pc}

08002950 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */

  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFFFFFF);
 8002958:	2301      	movs	r3, #1
 800295a:	425b      	negs	r3, r3
 800295c:	1d39      	adds	r1, r7, #4
 800295e:	4804      	ldr	r0, [pc, #16]	; (8002970 <__io_putchar+0x20>)
 8002960:	2201      	movs	r2, #1
 8002962:	f003 fe0f 	bl	8006584 <HAL_UART_Transmit>
  return ch;
 8002966:	687b      	ldr	r3, [r7, #4]
}
 8002968:	0018      	movs	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000384 	.word	0x20000384

08002974 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
  Rx_Data[Rx_Data_cnt] = Getchar[0];
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_UART_RxCpltCallback+0x38>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	001a      	movs	r2, r3
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <HAL_UART_RxCpltCallback+0x3c>)
 8002984:	7819      	ldrb	r1, [r3, #0]
 8002986:	4b0b      	ldr	r3, [pc, #44]	; (80029b4 <HAL_UART_RxCpltCallback+0x40>)
 8002988:	5499      	strb	r1, [r3, r2]
  Rx_Data_cnt++;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <HAL_UART_RxCpltCallback+0x38>)
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	3301      	adds	r3, #1
 8002990:	b2da      	uxtb	r2, r3
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_UART_RxCpltCallback+0x38>)
 8002994:	701a      	strb	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2, Getchar, 1);
 8002996:	4906      	ldr	r1, [pc, #24]	; (80029b0 <HAL_UART_RxCpltCallback+0x3c>)
 8002998:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_UART_RxCpltCallback+0x44>)
 800299a:	2201      	movs	r2, #1
 800299c:	0018      	movs	r0, r3
 800299e:	f003 fe9c 	bl	80066da <HAL_UART_Receive_IT>
}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	46bd      	mov	sp, r7
 80029a6:	b002      	add	sp, #8
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	46c0      	nop			; (mov r8, r8)
 80029ac:	200000dd 	.word	0x200000dd
 80029b0:	200001e0 	.word	0x200001e0
 80029b4:	200000e0 	.word	0x200000e0
 80029b8:	20000384 	.word	0x20000384

080029bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c0:	b672      	cpsid	i
}
 80029c2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <Error_Handler+0x8>
	...

080029c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ce:	4b13      	ldr	r3, [pc, #76]	; (8002a1c <HAL_MspInit+0x54>)
 80029d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d2:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_MspInit+0x54>)
 80029d4:	2101      	movs	r1, #1
 80029d6:	430a      	orrs	r2, r1
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
 80029da:	4b10      	ldr	r3, [pc, #64]	; (8002a1c <HAL_MspInit+0x54>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	2201      	movs	r2, #1
 80029e0:	4013      	ands	r3, r2
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <HAL_MspInit+0x54>)
 80029e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <HAL_MspInit+0x54>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0549      	lsls	r1, r1, #21
 80029f0:	430a      	orrs	r2, r1
 80029f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80029f4:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <HAL_MspInit+0x54>)
 80029f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f8:	2380      	movs	r3, #128	; 0x80
 80029fa:	055b      	lsls	r3, r3, #21
 80029fc:	4013      	ands	r3, r2
 80029fe:	603b      	str	r3, [r7, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2100      	movs	r1, #0
 8002a06:	2004      	movs	r0, #4
 8002a08:	f001 fa3e 	bl	8003e88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002a0c:	2004      	movs	r0, #4
 8002a0e:	f001 fa50 	bl	8003eb2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	46bd      	mov	sp, r7
 8002a16:	b002      	add	sp, #8
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	40021000 	.word	0x40021000

08002a20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b08b      	sub	sp, #44	; 0x2c
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a28:	2414      	movs	r4, #20
 8002a2a:	193b      	adds	r3, r7, r4
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	2314      	movs	r3, #20
 8002a30:	001a      	movs	r2, r3
 8002a32:	2100      	movs	r1, #0
 8002a34:	f005 fb62 	bl	80080fc <memset>
  if(hadc->Instance==ADC1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a3b      	ldr	r2, [pc, #236]	; (8002b2c <HAL_ADC_MspInit+0x10c>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d16f      	bne.n	8002b22 <HAL_ADC_MspInit+0x102>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002a42:	4b3b      	ldr	r3, [pc, #236]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a46:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a48:	2180      	movs	r1, #128	; 0x80
 8002a4a:	0349      	lsls	r1, r1, #13
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8002a50:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	035b      	lsls	r3, r3, #13
 8002a58:	4013      	ands	r3, r2
 8002a5a:	613b      	str	r3, [r7, #16]
 8002a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a5e:	4b34      	ldr	r3, [pc, #208]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a62:	4b33      	ldr	r3, [pc, #204]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a64:	2101      	movs	r1, #1
 8002a66:	430a      	orrs	r2, r1
 8002a68:	635a      	str	r2, [r3, #52]	; 0x34
 8002a6a:	4b31      	ldr	r3, [pc, #196]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6e:	2201      	movs	r2, #1
 8002a70:	4013      	ands	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a76:	4b2e      	ldr	r3, [pc, #184]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7a:	4b2d      	ldr	r3, [pc, #180]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a7c:	2102      	movs	r1, #2
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	635a      	str	r2, [r3, #52]	; 0x34
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_ADC_MspInit+0x110>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	2202      	movs	r2, #2
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_6|GPIO_PIN_7;
 8002a8e:	193b      	adds	r3, r7, r4
 8002a90:	22c2      	movs	r2, #194	; 0xc2
 8002a92:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a94:	193b      	adds	r3, r7, r4
 8002a96:	2203      	movs	r2, #3
 8002a98:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a9a:	193b      	adds	r3, r7, r4
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aa0:	193a      	adds	r2, r7, r4
 8002aa2:	23a0      	movs	r3, #160	; 0xa0
 8002aa4:	05db      	lsls	r3, r3, #23
 8002aa6:	0011      	movs	r1, r2
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f001 fd3d 	bl	8004528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002aae:	193b      	adds	r3, r7, r4
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ab4:	193b      	adds	r3, r7, r4
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aba:	193b      	adds	r3, r7, r4
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ac0:	193b      	adds	r3, r7, r4
 8002ac2:	4a1c      	ldr	r2, [pc, #112]	; (8002b34 <HAL_ADC_MspInit+0x114>)
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	0010      	movs	r0, r2
 8002ac8:	f001 fd2e 	bl	8004528 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002ace:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <HAL_ADC_MspInit+0x11c>)
 8002ad0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002ad2:	4b19      	ldr	r3, [pc, #100]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad8:	4b17      	ldr	r3, [pc, #92]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ade:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ae4:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002aea:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	0092      	lsls	r2, r2, #2
 8002af0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002af4:	2280      	movs	r2, #128	; 0x80
 8002af6:	0112      	lsls	r2, r2, #4
 8002af8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002afa:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002afc:	2220      	movs	r2, #32
 8002afe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f001 f9ef 	bl	8003eec <HAL_DMA_Init>
 8002b0e:	1e03      	subs	r3, r0, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 8002b12:	f7ff ff53 	bl	80029bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002b1a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_ADC_MspInit+0x118>)
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b22:	46c0      	nop			; (mov r8, r8)
 8002b24:	46bd      	mov	sp, r7
 8002b26:	b00b      	add	sp, #44	; 0x2c
 8002b28:	bd90      	pop	{r4, r7, pc}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	40012400 	.word	0x40012400
 8002b30:	40021000 	.word	0x40021000
 8002b34:	50000400 	.word	0x50000400
 8002b38:	200002dc 	.word	0x200002dc
 8002b3c:	40020008 	.word	0x40020008

08002b40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b08b      	sub	sp, #44	; 0x2c
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	2414      	movs	r4, #20
 8002b4a:	193b      	adds	r3, r7, r4
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	2314      	movs	r3, #20
 8002b50:	001a      	movs	r2, r3
 8002b52:	2100      	movs	r1, #0
 8002b54:	f005 fad2 	bl	80080fc <memset>
  if(hi2c->Instance==I2C1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a1b      	ldr	r2, [pc, #108]	; (8002bcc <HAL_I2C_MspInit+0x8c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d12f      	bne.n	8002bc2 <HAL_I2C_MspInit+0x82>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b62:	4b1b      	ldr	r3, [pc, #108]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002b68:	2102      	movs	r1, #2
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6e:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b72:	2202      	movs	r2, #2
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_MCU_Pin|I2C_SDA_MCU_Pin;
 8002b7a:	0021      	movs	r1, r4
 8002b7c:	187b      	adds	r3, r7, r1
 8002b7e:	22c0      	movs	r2, #192	; 0xc0
 8002b80:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b82:	187b      	adds	r3, r7, r1
 8002b84:	2212      	movs	r2, #18
 8002b86:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	187b      	adds	r3, r7, r1
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	187b      	adds	r3, r7, r1
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8002b94:	187b      	adds	r3, r7, r1
 8002b96:	2206      	movs	r2, #6
 8002b98:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b9a:	187b      	adds	r3, r7, r1
 8002b9c:	4a0d      	ldr	r2, [pc, #52]	; (8002bd4 <HAL_I2C_MspInit+0x94>)
 8002b9e:	0019      	movs	r1, r3
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	f001 fcc1 	bl	8004528 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ba6:	4b0a      	ldr	r3, [pc, #40]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002ba8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002bac:	2180      	movs	r1, #128	; 0x80
 8002bae:	0389      	lsls	r1, r1, #14
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c
 8002bb4:	4b06      	ldr	r3, [pc, #24]	; (8002bd0 <HAL_I2C_MspInit+0x90>)
 8002bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	039b      	lsls	r3, r3, #14
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002bc2:	46c0      	nop			; (mov r8, r8)
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	b00b      	add	sp, #44	; 0x2c
 8002bc8:	bd90      	pop	{r4, r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	40005400 	.word	0x40005400
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	50000400 	.word	0x50000400

08002bd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a0e      	ldr	r2, [pc, #56]	; (8002c20 <HAL_TIM_Base_MspInit+0x48>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d115      	bne.n	8002c16 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bea:	4b0e      	ldr	r3, [pc, #56]	; (8002c24 <HAL_TIM_Base_MspInit+0x4c>)
 8002bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bee:	4b0d      	ldr	r3, [pc, #52]	; (8002c24 <HAL_TIM_Base_MspInit+0x4c>)
 8002bf0:	2180      	movs	r1, #128	; 0x80
 8002bf2:	0109      	lsls	r1, r1, #4
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	641a      	str	r2, [r3, #64]	; 0x40
 8002bf8:	4b0a      	ldr	r3, [pc, #40]	; (8002c24 <HAL_TIM_Base_MspInit+0x4c>)
 8002bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	4013      	ands	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
 8002c04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8002c06:	2200      	movs	r2, #0
 8002c08:	2100      	movs	r1, #0
 8002c0a:	200d      	movs	r0, #13
 8002c0c:	f001 f93c 	bl	8003e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002c10:	200d      	movs	r0, #13
 8002c12:	f001 f94e 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	46c0      	nop			; (mov r8, r8)
 8002c20:	40012c00 	.word	0x40012c00
 8002c24:	40021000 	.word	0x40021000

08002c28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c28:	b590      	push	{r4, r7, lr}
 8002c2a:	b08b      	sub	sp, #44	; 0x2c
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c30:	2414      	movs	r4, #20
 8002c32:	193b      	adds	r3, r7, r4
 8002c34:	0018      	movs	r0, r3
 8002c36:	2314      	movs	r3, #20
 8002c38:	001a      	movs	r2, r3
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	f005 fa5e 	bl	80080fc <memset>
  if(huart->Instance==USART2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	; (8002cc4 <HAL_UART_MspInit+0x9c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d138      	bne.n	8002cbc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c4a:	4b1f      	ldr	r3, [pc, #124]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4e:	4b1e      	ldr	r3, [pc, #120]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c50:	2180      	movs	r1, #128	; 0x80
 8002c52:	0289      	lsls	r1, r1, #10
 8002c54:	430a      	orrs	r2, r1
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
 8002c58:	4b1b      	ldr	r3, [pc, #108]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	029b      	lsls	r3, r3, #10
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c66:	4b18      	ldr	r3, [pc, #96]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c6a:	4b17      	ldr	r3, [pc, #92]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	635a      	str	r2, [r3, #52]	; 0x34
 8002c72:	4b15      	ldr	r3, [pc, #84]	; (8002cc8 <HAL_UART_MspInit+0xa0>)
 8002c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c76:	2201      	movs	r2, #1
 8002c78:	4013      	ands	r3, r2
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8002c7e:	0021      	movs	r1, r4
 8002c80:	187b      	adds	r3, r7, r1
 8002c82:	220c      	movs	r2, #12
 8002c84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c86:	187b      	adds	r3, r7, r1
 8002c88:	2202      	movs	r2, #2
 8002c8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	2201      	movs	r2, #1
 8002c90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c92:	187b      	adds	r3, r7, r1
 8002c94:	2203      	movs	r2, #3
 8002c96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002c98:	187b      	adds	r3, r7, r1
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9e:	187a      	adds	r2, r7, r1
 8002ca0:	23a0      	movs	r3, #160	; 0xa0
 8002ca2:	05db      	lsls	r3, r3, #23
 8002ca4:	0011      	movs	r1, r2
 8002ca6:	0018      	movs	r0, r3
 8002ca8:	f001 fc3e 	bl	8004528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002cac:	2200      	movs	r2, #0
 8002cae:	2100      	movs	r1, #0
 8002cb0:	201c      	movs	r0, #28
 8002cb2:	f001 f8e9 	bl	8003e88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cb6:	201c      	movs	r0, #28
 8002cb8:	f001 f8fb 	bl	8003eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002cbc:	46c0      	nop			; (mov r8, r8)
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	b00b      	add	sp, #44	; 0x2c
 8002cc2:	bd90      	pop	{r4, r7, pc}
 8002cc4:	40004400 	.word	0x40004400
 8002cc8:	40021000 	.word	0x40021000

08002ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002cd0:	e7fe      	b.n	8002cd0 <NMI_Handler+0x4>

08002cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002cd6:	e7fe      	b.n	8002cd6 <HardFault_Handler+0x4>

08002cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002cdc:	46c0      	nop			; (mov r8, r8)
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cf0:	f000 f962 	bl	8002fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d08:	4b03      	ldr	r3, [pc, #12]	; (8002d18 <DMA1_Channel1_IRQHandler+0x14>)
 8002d0a:	0018      	movs	r0, r3
 8002d0c:	f001 faca 	bl	80042a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002d10:	46c0      	nop			; (mov r8, r8)
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	200002dc 	.word	0x200002dc

08002d1c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d20:	4b03      	ldr	r3, [pc, #12]	; (8002d30 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002d22:	0018      	movs	r0, r3
 8002d24:	f003 f838 	bl	8005d98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	20000338 	.word	0x20000338

08002d34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002d38:	4b03      	ldr	r3, [pc, #12]	; (8002d48 <USART2_IRQHandler+0x14>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f003 fd30 	bl	80067a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d40:	46c0      	nop			; (mov r8, r8)
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	20000384 	.word	0x20000384

08002d4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b086      	sub	sp, #24
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	60f8      	str	r0, [r7, #12]
 8002d54:	60b9      	str	r1, [r7, #8]
 8002d56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]
 8002d5c:	e00a      	b.n	8002d74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d5e:	e000      	b.n	8002d62 <_read+0x16>
 8002d60:	bf00      	nop
 8002d62:	0001      	movs	r1, r0
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	1c5a      	adds	r2, r3, #1
 8002d68:	60ba      	str	r2, [r7, #8]
 8002d6a:	b2ca      	uxtb	r2, r1
 8002d6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3301      	adds	r3, #1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	dbf0      	blt.n	8002d5e <_read+0x12>
	}

return len;
 8002d7c:	687b      	ldr	r3, [r7, #4]
}
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b006      	add	sp, #24
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b086      	sub	sp, #24
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	60f8      	str	r0, [r7, #12]
 8002d8e:	60b9      	str	r1, [r7, #8]
 8002d90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d92:	2300      	movs	r3, #0
 8002d94:	617b      	str	r3, [r7, #20]
 8002d96:	e009      	b.n	8002dac <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	0018      	movs	r0, r3
 8002da2:	f7ff fdd5 	bl	8002950 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	dbf1      	blt.n	8002d98 <_write+0x12>
	}
	return len;
 8002db4:	687b      	ldr	r3, [r7, #4]
}
 8002db6:	0018      	movs	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b006      	add	sp, #24
 8002dbc:	bd80      	pop	{r7, pc}

08002dbe <_close>:

int _close(int file)
{
 8002dbe:	b580      	push	{r7, lr}
 8002dc0:	b082      	sub	sp, #8
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	425b      	negs	r3, r3
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
 8002dda:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	2280      	movs	r2, #128	; 0x80
 8002de0:	0192      	lsls	r2, r2, #6
 8002de2:	605a      	str	r2, [r3, #4]
	return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	0018      	movs	r0, r3
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}

08002dee <_isatty>:

int _isatty(int file)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b082      	sub	sp, #8
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
	return 1;
 8002df6:	2301      	movs	r3, #1
}
 8002df8:	0018      	movs	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	b002      	add	sp, #8
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	607a      	str	r2, [r7, #4]
	return 0;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	0018      	movs	r0, r3
 8002e10:	46bd      	mov	sp, r7
 8002e12:	b004      	add	sp, #16
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e20:	4a14      	ldr	r2, [pc, #80]	; (8002e74 <_sbrk+0x5c>)
 8002e22:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_sbrk+0x60>)
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <_sbrk+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d102      	bne.n	8002e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e34:	4b11      	ldr	r3, [pc, #68]	; (8002e7c <_sbrk+0x64>)
 8002e36:	4a12      	ldr	r2, [pc, #72]	; (8002e80 <_sbrk+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e3a:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <_sbrk+0x64>)
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	18d3      	adds	r3, r2, r3
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d207      	bcs.n	8002e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e48:	f005 f92e 	bl	80080a8 <__errno>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	220c      	movs	r2, #12
 8002e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e52:	2301      	movs	r3, #1
 8002e54:	425b      	negs	r3, r3
 8002e56:	e009      	b.n	8002e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e58:	4b08      	ldr	r3, [pc, #32]	; (8002e7c <_sbrk+0x64>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e5e:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <_sbrk+0x64>)
 8002e60:	681a      	ldr	r2, [r3, #0]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	18d2      	adds	r2, r2, r3
 8002e66:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <_sbrk+0x64>)
 8002e68:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
}
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	b006      	add	sp, #24
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	20002000 	.word	0x20002000
 8002e78:	00000400 	.word	0x00000400
 8002e7c:	20000220 	.word	0x20000220
 8002e80:	20000430 	.word	0x20000430

08002e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e88:	46c0      	nop			; (mov r8, r8)
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002e90:	480d      	ldr	r0, [pc, #52]	; (8002ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e92:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e94:	f7ff fff6 	bl	8002e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8002e9a:	490d      	ldr	r1, [pc, #52]	; (8002ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002e9c:	4a0d      	ldr	r2, [pc, #52]	; (8002ed4 <LoopForever+0xe>)
  movs r3, #0
 8002e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea0:	e002      	b.n	8002ea8 <LoopCopyDataInit>

08002ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ea6:	3304      	adds	r3, #4

08002ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eac:	d3f9      	bcc.n	8002ea2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb0:	4c0a      	ldr	r4, [pc, #40]	; (8002edc <LoopForever+0x16>)
  movs r3, #0
 8002eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb4:	e001      	b.n	8002eba <LoopFillZerobss>

08002eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002eb8:	3204      	adds	r2, #4

08002eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ebc:	d3fb      	bcc.n	8002eb6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002ebe:	f005 f8f9 	bl	80080b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002ec2:	f7fe f9e5 	bl	8001290 <main>

08002ec6 <LoopForever>:

LoopForever:
  b LoopForever
 8002ec6:	e7fe      	b.n	8002ec6 <LoopForever>
  ldr   r0, =_estack
 8002ec8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002ed4:	080092d0 	.word	0x080092d0
  ldr r2, =_sbss
 8002ed8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002edc:	2000042c 	.word	0x2000042c

08002ee0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ee0:	e7fe      	b.n	8002ee0 <ADC1_IRQHandler>
	...

08002ee4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eea:	1dfb      	adds	r3, r7, #7
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_Init+0x3c>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b0a      	ldr	r3, [pc, #40]	; (8002f20 <HAL_Init+0x3c>)
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0049      	lsls	r1, r1, #1
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002efe:	2003      	movs	r0, #3
 8002f00:	f000 f810 	bl	8002f24 <HAL_InitTick>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002f08:	1dfb      	adds	r3, r7, #7
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e001      	b.n	8002f14 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002f10:	f7ff fd5a 	bl	80029c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	781b      	ldrb	r3, [r3, #0]
}
 8002f18:	0018      	movs	r0, r3
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40022000 	.word	0x40022000

08002f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f24:	b590      	push	{r4, r7, lr}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f2c:	230f      	movs	r3, #15
 8002f2e:	18fb      	adds	r3, r7, r3
 8002f30:	2200      	movs	r2, #0
 8002f32:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002f34:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_InitTick+0x88>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d02b      	beq.n	8002f94 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002f3c:	4b1c      	ldr	r3, [pc, #112]	; (8002fb0 <HAL_InitTick+0x8c>)
 8002f3e:	681c      	ldr	r4, [r3, #0]
 8002f40:	4b1a      	ldr	r3, [pc, #104]	; (8002fac <HAL_InitTick+0x88>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	0019      	movs	r1, r3
 8002f46:	23fa      	movs	r3, #250	; 0xfa
 8002f48:	0098      	lsls	r0, r3, #2
 8002f4a:	f7fd f8e3 	bl	8000114 <__udivsi3>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	0019      	movs	r1, r3
 8002f52:	0020      	movs	r0, r4
 8002f54:	f7fd f8de 	bl	8000114 <__udivsi3>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	f000 ffb9 	bl	8003ed2 <HAL_SYSTICK_Config>
 8002f60:	1e03      	subs	r3, r0, #0
 8002f62:	d112      	bne.n	8002f8a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d80a      	bhi.n	8002f80 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	425b      	negs	r3, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 ff88 	bl	8003e88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <HAL_InitTick+0x90>)
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	e00d      	b.n	8002f9c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002f80:	230f      	movs	r3, #15
 8002f82:	18fb      	adds	r3, r7, r3
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]
 8002f88:	e008      	b.n	8002f9c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2201      	movs	r2, #1
 8002f90:	701a      	strb	r2, [r3, #0]
 8002f92:	e003      	b.n	8002f9c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f94:	230f      	movs	r3, #15
 8002f96:	18fb      	adds	r3, r7, r3
 8002f98:	2201      	movs	r2, #1
 8002f9a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002f9c:	230f      	movs	r3, #15
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	781b      	ldrb	r3, [r3, #0]
}
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	b005      	add	sp, #20
 8002fa8:	bd90      	pop	{r4, r7, pc}
 8002faa:	46c0      	nop			; (mov r8, r8)
 8002fac:	20000008 	.word	0x20000008
 8002fb0:	20000000 	.word	0x20000000
 8002fb4:	20000004 	.word	0x20000004

08002fb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_IncTick+0x1c>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	001a      	movs	r2, r3
 8002fc2:	4b05      	ldr	r3, [pc, #20]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	18d2      	adds	r2, r2, r3
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <HAL_IncTick+0x20>)
 8002fca:	601a      	str	r2, [r3, #0]
}
 8002fcc:	46c0      	nop			; (mov r8, r8)
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	20000008 	.word	0x20000008
 8002fd8:	20000418 	.word	0x20000418

08002fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  return uwTick;
 8002fe0:	4b02      	ldr	r3, [pc, #8]	; (8002fec <HAL_GetTick+0x10>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
}
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	46c0      	nop			; (mov r8, r8)
 8002fec:	20000418 	.word	0x20000418

08002ff0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a05      	ldr	r2, [pc, #20]	; (8003014 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8003000:	401a      	ands	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	431a      	orrs	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	46bd      	mov	sp, r7
 800300e:	b002      	add	sp, #8
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	fe3fffff 	.word	0xfe3fffff

08003018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	23e0      	movs	r3, #224	; 0xe0
 8003026:	045b      	lsls	r3, r3, #17
 8003028:	4013      	ands	r3, r2
}
 800302a:	0018      	movs	r0, r3
 800302c:	46bd      	mov	sp, r7
 800302e:	b002      	add	sp, #8
 8003030:	bd80      	pop	{r7, pc}

08003032 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	2104      	movs	r1, #4
 8003046:	400a      	ands	r2, r1
 8003048:	2107      	movs	r1, #7
 800304a:	4091      	lsls	r1, r2
 800304c:	000a      	movs	r2, r1
 800304e:	43d2      	mvns	r2, r2
 8003050:	401a      	ands	r2, r3
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	2104      	movs	r1, #4
 8003056:	400b      	ands	r3, r1
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4099      	lsls	r1, r3
 800305c:	000b      	movs	r3, r1
 800305e:	431a      	orrs	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8003064:	46c0      	nop			; (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b004      	add	sp, #16
 800306a:	bd80      	pop	{r7, pc}

0800306c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	23c0      	movs	r3, #192	; 0xc0
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	4013      	ands	r3, r2
 800307e:	d101      	bne.n	8003084 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003084:	2300      	movs	r3, #0
}
 8003086:	0018      	movs	r0, r3
 8003088:	46bd      	mov	sp, r7
 800308a:	b002      	add	sp, #8
 800308c:	bd80      	pop	{r7, pc}

0800308e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	60f8      	str	r0, [r7, #12]
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	68ba      	ldr	r2, [r7, #8]
 80030a0:	211f      	movs	r1, #31
 80030a2:	400a      	ands	r2, r1
 80030a4:	210f      	movs	r1, #15
 80030a6:	4091      	lsls	r1, r2
 80030a8:	000a      	movs	r2, r1
 80030aa:	43d2      	mvns	r2, r2
 80030ac:	401a      	ands	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0e9b      	lsrs	r3, r3, #26
 80030b2:	210f      	movs	r1, #15
 80030b4:	4019      	ands	r1, r3
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	201f      	movs	r0, #31
 80030ba:	4003      	ands	r3, r0
 80030bc:	4099      	lsls	r1, r3
 80030be:	000b      	movs	r3, r1
 80030c0:	431a      	orrs	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030c6:	46c0      	nop			; (mov r8, r8)
 80030c8:	46bd      	mov	sp, r7
 80030ca:	b004      	add	sp, #16
 80030cc:	bd80      	pop	{r7, pc}

080030ce <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b082      	sub	sp, #8
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	035b      	lsls	r3, r3, #13
 80030e0:	0b5b      	lsrs	r3, r3, #13
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030e8:	46c0      	nop			; (mov r8, r8)
 80030ea:	46bd      	mov	sp, r7
 80030ec:	b002      	add	sp, #8
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	683a      	ldr	r2, [r7, #0]
 8003100:	0352      	lsls	r2, r2, #13
 8003102:	0b52      	lsrs	r2, r2, #13
 8003104:	43d2      	mvns	r2, r2
 8003106:	401a      	ands	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800310c:	46c0      	nop			; (mov r8, r8)
 800310e:	46bd      	mov	sp, r7
 8003110:	b002      	add	sp, #8
 8003112:	bd80      	pop	{r7, pc}

08003114 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b084      	sub	sp, #16
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	0212      	lsls	r2, r2, #8
 8003128:	43d2      	mvns	r2, r2
 800312a:	401a      	ands	r2, r3
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	400b      	ands	r3, r1
 8003134:	4904      	ldr	r1, [pc, #16]	; (8003148 <LL_ADC_SetChannelSamplingTime+0x34>)
 8003136:	400b      	ands	r3, r1
 8003138:	431a      	orrs	r2, r3
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800313e:	46c0      	nop			; (mov r8, r8)
 8003140:	46bd      	mov	sp, r7
 8003142:	b004      	add	sp, #16
 8003144:	bd80      	pop	{r7, pc}
 8003146:	46c0      	nop			; (mov r8, r8)
 8003148:	07ffff00 	.word	0x07ffff00

0800314c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	4a05      	ldr	r2, [pc, #20]	; (8003170 <LL_ADC_EnableInternalRegulator+0x24>)
 800315a:	4013      	ands	r3, r2
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0552      	lsls	r2, r2, #21
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	46bd      	mov	sp, r7
 800316a:	b002      	add	sp, #8
 800316c:	bd80      	pop	{r7, pc}
 800316e:	46c0      	nop			; (mov r8, r8)
 8003170:	6fffffe8 	.word	0x6fffffe8

08003174 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	2380      	movs	r3, #128	; 0x80
 8003182:	055b      	lsls	r3, r3, #21
 8003184:	401a      	ands	r2, r3
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	055b      	lsls	r3, r3, #21
 800318a:	429a      	cmp	r2, r3
 800318c:	d101      	bne.n	8003192 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800318e:	2301      	movs	r3, #1
 8003190:	e000      	b.n	8003194 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8003192:	2300      	movs	r3, #0
}
 8003194:	0018      	movs	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	b002      	add	sp, #8
 800319a:	bd80      	pop	{r7, pc}

0800319c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <LL_ADC_Enable+0x20>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	2201      	movs	r2, #1
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031b4:	46c0      	nop			; (mov r8, r8)
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b002      	add	sp, #8
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	7fffffe8 	.word	0x7fffffe8

080031c0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	4a04      	ldr	r2, [pc, #16]	; (80031e0 <LL_ADC_Disable+0x20>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	2202      	movs	r2, #2
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031d8:	46c0      	nop			; (mov r8, r8)
 80031da:	46bd      	mov	sp, r7
 80031dc:	b002      	add	sp, #8
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	7fffffe8 	.word	0x7fffffe8

080031e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b082      	sub	sp, #8
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2201      	movs	r2, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d101      	bne.n	80031fc <LL_ADC_IsEnabled+0x18>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <LL_ADC_IsEnabled+0x1a>
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	0018      	movs	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	b002      	add	sp, #8
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <LL_ADC_REG_StartConversion+0x20>)
 8003216:	4013      	ands	r3, r2
 8003218:	2204      	movs	r2, #4
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003220:	46c0      	nop			; (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}
 8003228:	7fffffe8 	.word	0x7fffffe8

0800322c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b082      	sub	sp, #8
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2204      	movs	r2, #4
 800323a:	4013      	ands	r3, r2
 800323c:	2b04      	cmp	r3, #4
 800323e:	d101      	bne.n	8003244 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003244:	2300      	movs	r3, #0
}
 8003246:	0018      	movs	r0, r3
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003258:	231f      	movs	r3, #31
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8003260:	2300      	movs	r3, #0
 8003262:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e1b1      	b.n	80035da <HAL_ADC_Init+0x38a>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10a      	bne.n	8003294 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	0018      	movs	r0, r3
 8003282:	f7ff fbcd 	bl	8002a20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2254      	movs	r2, #84	; 0x54
 8003290:	2100      	movs	r1, #0
 8003292:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	0018      	movs	r0, r3
 800329a:	f7ff ff6b 	bl	8003174 <LL_ADC_IsInternalRegulatorEnabled>
 800329e:	1e03      	subs	r3, r0, #0
 80032a0:	d115      	bne.n	80032ce <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	0018      	movs	r0, r3
 80032a8:	f7ff ff50 	bl	800314c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032ac:	4bcd      	ldr	r3, [pc, #820]	; (80035e4 <HAL_ADC_Init+0x394>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	49cd      	ldr	r1, [pc, #820]	; (80035e8 <HAL_ADC_Init+0x398>)
 80032b2:	0018      	movs	r0, r3
 80032b4:	f7fc ff2e 	bl	8000114 <__udivsi3>
 80032b8:	0003      	movs	r3, r0
 80032ba:	3301      	adds	r3, #1
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032c0:	e002      	b.n	80032c8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	3b01      	subs	r3, #1
 80032c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f9      	bne.n	80032c2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f7ff ff4e 	bl	8003174 <LL_ADC_IsInternalRegulatorEnabled>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d10f      	bne.n	80032fc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e0:	2210      	movs	r2, #16
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ec:	2201      	movs	r2, #1
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032f4:	231f      	movs	r3, #31
 80032f6:	18fb      	adds	r3, r7, r3
 80032f8:	2201      	movs	r2, #1
 80032fa:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	0018      	movs	r0, r3
 8003302:	f7ff ff93 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003306:	0003      	movs	r3, r0
 8003308:	60fb      	str	r3, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330e:	2210      	movs	r2, #16
 8003310:	4013      	ands	r3, r2
 8003312:	d000      	beq.n	8003316 <HAL_ADC_Init+0xc6>
 8003314:	e154      	b.n	80035c0 <HAL_ADC_Init+0x370>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d000      	beq.n	800331e <HAL_ADC_Init+0xce>
 800331c:	e150      	b.n	80035c0 <HAL_ADC_Init+0x370>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003322:	4ab2      	ldr	r2, [pc, #712]	; (80035ec <HAL_ADC_Init+0x39c>)
 8003324:	4013      	ands	r3, r2
 8003326:	2202      	movs	r2, #2
 8003328:	431a      	orrs	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - Oversampling                                                        */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	0018      	movs	r0, r3
 8003334:	f7ff ff56 	bl	80031e4 <LL_ADC_IsEnabled>
 8003338:	1e03      	subs	r3, r0, #0
 800333a:	d156      	bne.n	80033ea <HAL_ADC_Init+0x19a>
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	2218      	movs	r2, #24
 8003344:	4393      	bics	r3, r2
 8003346:	0019      	movs	r1, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	430a      	orrs	r2, r1
 8003352:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES,
                 hadc->Init.Resolution);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0f9b      	lsrs	r3, r3, #30
 800335a:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003360:	4313      	orrs	r3, r2
 8003362:	697a      	ldr	r2, [r7, #20]
 8003364:	4313      	orrs	r3, r2
 8003366:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	223c      	movs	r2, #60	; 0x3c
 800336c:	5c9b      	ldrb	r3, [r3, r2]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d111      	bne.n	8003396 <HAL_ADC_Init+0x146>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	0f9b      	lsrs	r3, r3, #30
 8003378:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800337e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003384:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800338a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	4313      	orrs	r3, r2
 8003390:	2201      	movs	r2, #1
 8003392:	4313      	orrs	r3, r2
 8003394:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4a94      	ldr	r2, [pc, #592]	; (80035f0 <HAL_ADC_Init+0x3a0>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	430a      	orrs	r2, r1
 80033aa:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685a      	ldr	r2, [r3, #4]
 80033b0:	23c0      	movs	r3, #192	; 0xc0
 80033b2:	061b      	lsls	r3, r3, #24
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d018      	beq.n	80033ea <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	05db      	lsls	r3, r3, #23
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d012      	beq.n	80033ea <HAL_ADC_Init+0x19a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80033c8:	2380      	movs	r3, #128	; 0x80
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d00c      	beq.n	80033ea <HAL_ADC_Init+0x19a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80033d0:	4b88      	ldr	r3, [pc, #544]	; (80035f4 <HAL_ADC_Init+0x3a4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a88      	ldr	r2, [pc, #544]	; (80035f8 <HAL_ADC_Init+0x3a8>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	0019      	movs	r1, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685a      	ldr	r2, [r3, #4]
 80033de:	23f0      	movs	r3, #240	; 0xf0
 80033e0:	039b      	lsls	r3, r3, #14
 80033e2:	401a      	ands	r2, r3
 80033e4:	4b83      	ldr	r3, [pc, #524]	; (80035f4 <HAL_ADC_Init+0x3a4>)
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	7e1b      	ldrb	r3, [r3, #24]
 80033ee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7e5b      	ldrb	r3, [r3, #25]
 80033f4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80033f6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e9b      	ldrb	r3, [r3, #26]
 80033fc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80033fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <HAL_ADC_Init+0x1be>
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	015b      	lsls	r3, r3, #5
 800340c:	e000      	b.n	8003410 <HAL_ADC_Init+0x1c0>
 800340e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003410:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                           |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8003416:	431a      	orrs	r2, r3
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	2b00      	cmp	r3, #0
 800341e:	da04      	bge.n	800342a <HAL_ADC_Init+0x1da>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	085b      	lsrs	r3, r3, #1
 8003428:	e001      	b.n	800342e <HAL_ADC_Init+0x1de>
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	039b      	lsls	r3, r3, #14
                 hadc->Init.DataAlign                                           |
 800342e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	5c5b      	ldrb	r3, [r3, r1]
 8003436:	005b      	lsls	r3, r3, #1
                 ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003438:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]

    /* Update setting of discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2220      	movs	r2, #32
 8003444:	5c9b      	ldrb	r3, [r3, r2]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d115      	bne.n	8003476 <HAL_ADC_Init+0x226>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7e9b      	ldrb	r3, [r3, #26]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_ADC_Init+0x20e>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2280      	movs	r2, #128	; 0x80
 8003456:	0252      	lsls	r2, r2, #9
 8003458:	4313      	orrs	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	e00b      	b.n	8003476 <HAL_ADC_Init+0x226>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */

        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003462:	2220      	movs	r2, #32
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800346e:	2201      	movs	r2, #1
 8003470:	431a      	orrs	r2, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_ADC_Init+0x244>
    {
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003482:	23e0      	movs	r3, #224	; 0xe0
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	401a      	ands	r2, r3
                   hadc->Init.ExternalTrigConvEdge);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800348c:	4313      	orrs	r3, r2
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
    }

    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR1,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_ADC_Init+0x3ac>)
 800349c:	4013      	ands	r3, r2
 800349e:	0019      	movs	r1, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	60da      	str	r2, [r3, #12]
               ADC_CFGR1_ALIGN   |
               ADC_CFGR1_SCANDIR |
               ADC_CFGR1_DMACFG,
               tmpCFGR1);

    MODIFY_REG(hadc->Instance->CFGR2,
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	4a53      	ldr	r2, [pc, #332]	; (8003600 <HAL_ADC_Init+0x3b0>)
 80034b2:	4013      	ands	r3, r2
 80034b4:	0019      	movs	r1, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	430a      	orrs	r2, r1
 80034be:	611a      	str	r2, [r3, #16]
               ADC_CFGR2_OVSS   |
               ADC_CFGR2_TOVS,
               tmpCFGR2);

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	001a      	movs	r2, r3
 80034ca:	2100      	movs	r1, #0
 80034cc:	f7ff fdb1 	bl	8003032 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6818      	ldr	r0, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	494a      	ldr	r1, [pc, #296]	; (8003604 <HAL_ADC_Init+0x3b4>)
 80034da:	001a      	movs	r2, r3
 80034dc:	f7ff fda9 	bl	8003032 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <HAL_ADC_Init+0x2ac>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2110      	movs	r1, #16
 80034f4:	4249      	negs	r1, r1
 80034f6:	430a      	orrs	r2, r1
 80034f8:	629a      	str	r2, [r3, #40]	; 0x28
 80034fa:	e03a      	b.n	8003572 <HAL_ADC_Init+0x322>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	039b      	lsls	r3, r3, #14
 8003504:	429a      	cmp	r2, r3
 8003506:	d134      	bne.n	8003572 <HAL_ADC_Init+0x322>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	e00c      	b.n	8003528 <HAL_ADC_Init+0x2d8>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	40da      	lsrs	r2, r3
 8003518:	0013      	movs	r3, r2
 800351a:	220f      	movs	r2, #15
 800351c:	4013      	ands	r3, r2
 800351e:	2b0f      	cmp	r3, #15
 8003520:	d006      	beq.n	8003530 <HAL_ADC_Init+0x2e0>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	3301      	adds	r3, #1
 8003526:	613b      	str	r3, [r7, #16]
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	2b07      	cmp	r3, #7
 800352c:	d9ef      	bls.n	800350e <HAL_ADC_Init+0x2be>
 800352e:	e000      	b.n	8003532 <HAL_ADC_Init+0x2e2>
            ADC_CHSELR_SQ1)
        {
          break;
 8003530:	46c0      	nop			; (mov r8, r8)
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d109      	bne.n	800354c <HAL_ADC_Init+0x2fc>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2110      	movs	r1, #16
 8003544:	4249      	negs	r1, r1
 8003546:	430a      	orrs	r2, r1
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
 800354a:	e012      	b.n	8003572 <HAL_ADC_Init+0x322>
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	3b01      	subs	r3, #1
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	221c      	movs	r2, #28
 800355c:	4013      	ands	r3, r2
 800355e:	2210      	movs	r2, #16
 8003560:	4252      	negs	r2, r2
 8003562:	409a      	lsls	r2, r3
 8003564:	0011      	movs	r1, r2
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a23      	ldr	r2, [pc, #140]	; (8003608 <HAL_ADC_Init+0x3b8>)
 800357a:	4013      	ands	r3, r2
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	429a      	cmp	r2, r3
 8003580:	d10b      	bne.n	800359a <HAL_ADC_Init+0x34a>
        == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800358c:	2203      	movs	r2, #3
 800358e:	4393      	bics	r3, r2
 8003590:	2201      	movs	r2, #1
 8003592:	431a      	orrs	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	659a      	str	r2, [r3, #88]	; 0x58
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8003598:	e01c      	b.n	80035d4 <HAL_ADC_Init+0x384>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359e:	2212      	movs	r2, #18
 80035a0:	4393      	bics	r3, r2
 80035a2:	2210      	movs	r2, #16
 80035a4:	431a      	orrs	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ae:	2201      	movs	r2, #1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80035b6:	231f      	movs	r3, #31
 80035b8:	18fb      	adds	r3, r7, r3
 80035ba:	2201      	movs	r2, #1
 80035bc:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 80035be:	e009      	b.n	80035d4 <HAL_ADC_Init+0x384>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c4:	2210      	movs	r2, #16
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80035cc:	231f      	movs	r3, #31
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80035d4:	231f      	movs	r3, #31
 80035d6:	18fb      	adds	r3, r7, r3
 80035d8:	781b      	ldrb	r3, [r3, #0]
}
 80035da:	0018      	movs	r0, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	b008      	add	sp, #32
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	46c0      	nop			; (mov r8, r8)
 80035e4:	20000000 	.word	0x20000000
 80035e8:	00030d40 	.word	0x00030d40
 80035ec:	fffffefd 	.word	0xfffffefd
 80035f0:	1ffffc02 	.word	0x1ffffc02
 80035f4:	40012708 	.word	0x40012708
 80035f8:	ffc3ffff 	.word	0xffc3ffff
 80035fc:	fffe0219 	.word	0xfffe0219
 8003600:	dffffc02 	.word	0xdffffc02
 8003604:	07ffff04 	.word	0x07ffff04
 8003608:	833fffe7 	.word	0x833fffe7

0800360c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0018      	movs	r0, r3
 800361e:	f7ff fe05 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d16c      	bne.n	8003700 <HAL_ADC_Start_DMA+0xf4>
  {
    __HAL_LOCK(hadc);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2254      	movs	r2, #84	; 0x54
 800362a:	5c9b      	ldrb	r3, [r3, r2]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_ADC_Start_DMA+0x28>
 8003630:	2302      	movs	r3, #2
 8003632:	e06c      	b.n	800370e <HAL_ADC_Start_DMA+0x102>
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2254      	movs	r2, #84	; 0x54
 8003638:	2101      	movs	r1, #1
 800363a:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2201      	movs	r2, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d113      	bne.n	8003670 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	0018      	movs	r0, r3
 800364e:	f7ff fdc9 	bl	80031e4 <LL_ADC_IsEnabled>
 8003652:	1e03      	subs	r3, r0, #0
 8003654:	d004      	beq.n	8003660 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	0018      	movs	r0, r3
 800365c:	f7ff fdb0 	bl	80031c0 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2101      	movs	r1, #1
 800366c:	430a      	orrs	r2, r1
 800366e:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003670:	2517      	movs	r5, #23
 8003672:	197c      	adds	r4, r7, r5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	0018      	movs	r0, r3
 8003678:	f000 fa46 	bl	8003b08 <ADC_Enable>
 800367c:	0003      	movs	r3, r0
 800367e:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003680:	002c      	movs	r4, r5
 8003682:	193b      	adds	r3, r7, r4
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d13e      	bne.n	8003708 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	4a22      	ldr	r2, [pc, #136]	; (8003718 <HAL_ADC_Start_DMA+0x10c>)
 8003690:	4013      	ands	r3, r2
 8003692:	2280      	movs	r2, #128	; 0x80
 8003694:	0052      	lsls	r2, r2, #1
 8003696:	431a      	orrs	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036a6:	4a1d      	ldr	r2, [pc, #116]	; (800371c <HAL_ADC_Start_DMA+0x110>)
 80036a8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ae:	4a1c      	ldr	r2, [pc, #112]	; (8003720 <HAL_ADC_Start_DMA+0x114>)
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b6:	4a1b      	ldr	r2, [pc, #108]	; (8003724 <HAL_ADC_Start_DMA+0x118>)
 80036b8:	635a      	str	r2, [r3, #52]	; 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	221c      	movs	r2, #28
 80036c0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2254      	movs	r2, #84	; 0x54
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685a      	ldr	r2, [r3, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2110      	movs	r1, #16
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3340      	adds	r3, #64	; 0x40
 80036e4:	0019      	movs	r1, r3
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	193c      	adds	r4, r7, r4
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f000 fc88 	bl	8004000 <HAL_DMA_Start_IT>
 80036f0:	0003      	movs	r3, r0
 80036f2:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff fd85 	bl	8003208 <LL_ADC_REG_StartConversion>
 80036fe:	e003      	b.n	8003708 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003700:	2317      	movs	r3, #23
 8003702:	18fb      	adds	r3, r7, r3
 8003704:	2202      	movs	r2, #2
 8003706:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8003708:	2317      	movs	r3, #23
 800370a:	18fb      	adds	r3, r7, r3
 800370c:	781b      	ldrb	r3, [r3, #0]
}
 800370e:	0018      	movs	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	b006      	add	sp, #24
 8003714:	bdb0      	pop	{r4, r5, r7, pc}
 8003716:	46c0      	nop			; (mov r8, r8)
 8003718:	fffff0fe 	.word	0xfffff0fe
 800371c:	08003c15 	.word	0x08003c15
 8003720:	08003cdd 	.word	0x08003cdd
 8003724:	08003cfb 	.word	0x08003cfb

08003728 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003762:	2317      	movs	r3, #23
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	2200      	movs	r2, #0
 8003768:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800376a:	2300      	movs	r3, #0
 800376c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2254      	movs	r2, #84	; 0x54
 8003772:	5c9b      	ldrb	r3, [r3, r2]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x24>
 8003778:	2302      	movs	r3, #2
 800377a:	e1c0      	b.n	8003afe <HAL_ADC_ConfigChannel+0x3a6>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2254      	movs	r2, #84	; 0x54
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	0018      	movs	r0, r3
 800378a:	f7ff fd4f 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 800378e:	1e03      	subs	r3, r0, #0
 8003790:	d000      	beq.n	8003794 <HAL_ADC_ConfigChannel+0x3c>
 8003792:	e1a3      	b.n	8003adc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	2b02      	cmp	r3, #2
 800379a:	d100      	bne.n	800379e <HAL_ADC_ConfigChannel+0x46>
 800379c:	e143      	b.n	8003a26 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	691a      	ldr	r2, [r3, #16]
 80037a2:	2380      	movs	r3, #128	; 0x80
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d004      	beq.n	80037b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80037ae:	4ac1      	ldr	r2, [pc, #772]	; (8003ab4 <HAL_ADC_ConfigChannel+0x35c>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d108      	bne.n	80037c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	0019      	movs	r1, r3
 80037be:	0010      	movs	r0, r2
 80037c0:	f7ff fc85 	bl	80030ce <LL_ADC_REG_SetSequencerChAdd>
 80037c4:	e0c9      	b.n	800395a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	211f      	movs	r1, #31
 80037d0:	400b      	ands	r3, r1
 80037d2:	210f      	movs	r1, #15
 80037d4:	4099      	lsls	r1, r3
 80037d6:	000b      	movs	r3, r1
 80037d8:	43db      	mvns	r3, r3
 80037da:	4013      	ands	r3, r2
 80037dc:	0019      	movs	r1, r3
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	035b      	lsls	r3, r3, #13
 80037e4:	0b5b      	lsrs	r3, r3, #13
 80037e6:	d105      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x9c>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	0e9b      	lsrs	r3, r3, #26
 80037ee:	221f      	movs	r2, #31
 80037f0:	4013      	ands	r3, r2
 80037f2:	e098      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2201      	movs	r2, #1
 80037fa:	4013      	ands	r3, r2
 80037fc:	d000      	beq.n	8003800 <HAL_ADC_ConfigChannel+0xa8>
 80037fe:	e091      	b.n	8003924 <HAL_ADC_ConfigChannel+0x1cc>
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2202      	movs	r2, #2
 8003806:	4013      	ands	r3, r2
 8003808:	d000      	beq.n	800380c <HAL_ADC_ConfigChannel+0xb4>
 800380a:	e089      	b.n	8003920 <HAL_ADC_ConfigChannel+0x1c8>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2204      	movs	r2, #4
 8003812:	4013      	ands	r3, r2
 8003814:	d000      	beq.n	8003818 <HAL_ADC_ConfigChannel+0xc0>
 8003816:	e081      	b.n	800391c <HAL_ADC_ConfigChannel+0x1c4>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	2208      	movs	r2, #8
 800381e:	4013      	ands	r3, r2
 8003820:	d000      	beq.n	8003824 <HAL_ADC_ConfigChannel+0xcc>
 8003822:	e079      	b.n	8003918 <HAL_ADC_ConfigChannel+0x1c0>
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2210      	movs	r2, #16
 800382a:	4013      	ands	r3, r2
 800382c:	d000      	beq.n	8003830 <HAL_ADC_ConfigChannel+0xd8>
 800382e:	e071      	b.n	8003914 <HAL_ADC_ConfigChannel+0x1bc>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2220      	movs	r2, #32
 8003836:	4013      	ands	r3, r2
 8003838:	d000      	beq.n	800383c <HAL_ADC_ConfigChannel+0xe4>
 800383a:	e069      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1b8>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2240      	movs	r2, #64	; 0x40
 8003842:	4013      	ands	r3, r2
 8003844:	d000      	beq.n	8003848 <HAL_ADC_ConfigChannel+0xf0>
 8003846:	e061      	b.n	800390c <HAL_ADC_ConfigChannel+0x1b4>
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2280      	movs	r2, #128	; 0x80
 800384e:	4013      	ands	r3, r2
 8003850:	d000      	beq.n	8003854 <HAL_ADC_ConfigChannel+0xfc>
 8003852:	e059      	b.n	8003908 <HAL_ADC_ConfigChannel+0x1b0>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	2380      	movs	r3, #128	; 0x80
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4013      	ands	r3, r2
 800385e:	d151      	bne.n	8003904 <HAL_ADC_ConfigChannel+0x1ac>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	2380      	movs	r3, #128	; 0x80
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4013      	ands	r3, r2
 800386a:	d149      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x1a8>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4013      	ands	r3, r2
 8003876:	d141      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x1a4>
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4013      	ands	r3, r2
 8003882:	d139      	bne.n	80038f8 <HAL_ADC_ConfigChannel+0x1a0>
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	2380      	movs	r3, #128	; 0x80
 800388a:	015b      	lsls	r3, r3, #5
 800388c:	4013      	ands	r3, r2
 800388e:	d131      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x19c>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	019b      	lsls	r3, r3, #6
 8003898:	4013      	ands	r3, r2
 800389a:	d129      	bne.n	80038f0 <HAL_ADC_ConfigChannel+0x198>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681a      	ldr	r2, [r3, #0]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	01db      	lsls	r3, r3, #7
 80038a4:	4013      	ands	r3, r2
 80038a6:	d121      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x194>
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	021b      	lsls	r3, r3, #8
 80038b0:	4013      	ands	r3, r2
 80038b2:	d119      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x190>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	2380      	movs	r3, #128	; 0x80
 80038ba:	025b      	lsls	r3, r3, #9
 80038bc:	4013      	ands	r3, r2
 80038be:	d111      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x18c>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	2380      	movs	r3, #128	; 0x80
 80038c6:	029b      	lsls	r3, r3, #10
 80038c8:	4013      	ands	r3, r2
 80038ca:	d109      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x188>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	2380      	movs	r3, #128	; 0x80
 80038d2:	02db      	lsls	r3, r3, #11
 80038d4:	4013      	ands	r3, r2
 80038d6:	d001      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x184>
 80038d8:	2312      	movs	r3, #18
 80038da:	e024      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038dc:	2300      	movs	r3, #0
 80038de:	e022      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038e0:	2311      	movs	r3, #17
 80038e2:	e020      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038e4:	2310      	movs	r3, #16
 80038e6:	e01e      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038e8:	230f      	movs	r3, #15
 80038ea:	e01c      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038ec:	230e      	movs	r3, #14
 80038ee:	e01a      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038f0:	230d      	movs	r3, #13
 80038f2:	e018      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038f4:	230c      	movs	r3, #12
 80038f6:	e016      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038f8:	230b      	movs	r3, #11
 80038fa:	e014      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 80038fc:	230a      	movs	r3, #10
 80038fe:	e012      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003900:	2309      	movs	r3, #9
 8003902:	e010      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003904:	2308      	movs	r3, #8
 8003906:	e00e      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003908:	2307      	movs	r3, #7
 800390a:	e00c      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 800390c:	2306      	movs	r3, #6
 800390e:	e00a      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003910:	2305      	movs	r3, #5
 8003912:	e008      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003914:	2304      	movs	r3, #4
 8003916:	e006      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003918:	2303      	movs	r3, #3
 800391a:	e004      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 800391c:	2302      	movs	r3, #2
 800391e:	e002      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003920:	2301      	movs	r3, #1
 8003922:	e000      	b.n	8003926 <HAL_ADC_ConfigChannel+0x1ce>
 8003924:	2300      	movs	r3, #0
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	6852      	ldr	r2, [r2, #4]
 800392a:	201f      	movs	r0, #31
 800392c:	4002      	ands	r2, r0
 800392e:	4093      	lsls	r3, r2
 8003930:	000a      	movs	r2, r1
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d808      	bhi.n	800395a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6818      	ldr	r0, [r3, #0]
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6859      	ldr	r1, [r3, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	001a      	movs	r2, r3
 8003956:	f7ff fb9a 	bl	800308e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6818      	ldr	r0, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6819      	ldr	r1, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	001a      	movs	r2, r3
 8003968:	f7ff fbd4 	bl	8003114 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db00      	blt.n	8003976 <HAL_ADC_ConfigChannel+0x21e>
 8003974:	e0bc      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003976:	4b50      	ldr	r3, [pc, #320]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7ff fb4d 	bl	8003018 <LL_ADC_GetCommonPathInternalCh>
 800397e:	0003      	movs	r3, r0
 8003980:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a4d      	ldr	r2, [pc, #308]	; (8003abc <HAL_ADC_ConfigChannel+0x364>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d122      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	2380      	movs	r3, #128	; 0x80
 8003990:	041b      	lsls	r3, r3, #16
 8003992:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003994:	d11d      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	0412      	lsls	r2, r2, #16
 800399c:	4313      	orrs	r3, r2
 800399e:	4a46      	ldr	r2, [pc, #280]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 80039a0:	0019      	movs	r1, r3
 80039a2:	0010      	movs	r0, r2
 80039a4:	f7ff fb24 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039a8:	4b45      	ldr	r3, [pc, #276]	; (8003ac0 <HAL_ADC_ConfigChannel+0x368>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4945      	ldr	r1, [pc, #276]	; (8003ac4 <HAL_ADC_ConfigChannel+0x36c>)
 80039ae:	0018      	movs	r0, r3
 80039b0:	f7fc fbb0 	bl	8000114 <__udivsi3>
 80039b4:	0003      	movs	r3, r0
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	0013      	movs	r3, r2
 80039ba:	005b      	lsls	r3, r3, #1
 80039bc:	189b      	adds	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039c2:	e002      	b.n	80039ca <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3b01      	subs	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1f9      	bne.n	80039c4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80039d0:	e08e      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a3c      	ldr	r2, [pc, #240]	; (8003ac8 <HAL_ADC_ConfigChannel+0x370>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d10e      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x2a2>
 80039dc:	693a      	ldr	r2, [r7, #16]
 80039de:	2380      	movs	r3, #128	; 0x80
 80039e0:	045b      	lsls	r3, r3, #17
 80039e2:	4013      	ands	r3, r2
 80039e4:	d109      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	2280      	movs	r2, #128	; 0x80
 80039ea:	0452      	lsls	r2, r2, #17
 80039ec:	4313      	orrs	r3, r2
 80039ee:	4a32      	ldr	r2, [pc, #200]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 80039f0:	0019      	movs	r1, r3
 80039f2:	0010      	movs	r0, r2
 80039f4:	f7ff fafc 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 80039f8:	e07a      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a33      	ldr	r2, [pc, #204]	; (8003acc <HAL_ADC_ConfigChannel+0x374>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d000      	beq.n	8003a06 <HAL_ADC_ConfigChannel+0x2ae>
 8003a04:	e074      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	03db      	lsls	r3, r3, #15
 8003a0c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8003a0e:	d000      	beq.n	8003a12 <HAL_ADC_ConfigChannel+0x2ba>
 8003a10:	e06e      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	03d2      	lsls	r2, r2, #15
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	4a27      	ldr	r2, [pc, #156]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003a1c:	0019      	movs	r1, r3
 8003a1e:	0010      	movs	r0, r2
 8003a20:	f7ff fae6 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003a24:	e064      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691a      	ldr	r2, [r3, #16]
 8003a2a:	2380      	movs	r3, #128	; 0x80
 8003a2c:	061b      	lsls	r3, r3, #24
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d004      	beq.n	8003a3c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003a36:	4a1f      	ldr	r2, [pc, #124]	; (8003ab4 <HAL_ADC_ConfigChannel+0x35c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d107      	bne.n	8003a4c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	0019      	movs	r1, r3
 8003a46:	0010      	movs	r0, r2
 8003a48:	f7ff fb52 	bl	80030f0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	da4d      	bge.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a54:	4b18      	ldr	r3, [pc, #96]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003a56:	0018      	movs	r0, r3
 8003a58:	f7ff fade 	bl	8003018 <LL_ADC_GetCommonPathInternalCh>
 8003a5c:	0003      	movs	r3, r0
 8003a5e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a15      	ldr	r2, [pc, #84]	; (8003abc <HAL_ADC_ConfigChannel+0x364>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d108      	bne.n	8003a7c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4a18      	ldr	r2, [pc, #96]	; (8003ad0 <HAL_ADC_ConfigChannel+0x378>)
 8003a6e:	4013      	ands	r3, r2
 8003a70:	4a11      	ldr	r2, [pc, #68]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003a72:	0019      	movs	r1, r3
 8003a74:	0010      	movs	r0, r2
 8003a76:	f7ff fabb 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003a7a:	e039      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_ADC_ConfigChannel+0x370>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	4a12      	ldr	r2, [pc, #72]	; (8003ad4 <HAL_ADC_ConfigChannel+0x37c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003a8e:	0019      	movs	r1, r3
 8003a90:	0010      	movs	r0, r2
 8003a92:	f7ff faad 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003a96:	e02b      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a0b      	ldr	r2, [pc, #44]	; (8003acc <HAL_ADC_ConfigChannel+0x374>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d126      	bne.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	4a0c      	ldr	r2, [pc, #48]	; (8003ad8 <HAL_ADC_ConfigChannel+0x380>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	4a03      	ldr	r2, [pc, #12]	; (8003ab8 <HAL_ADC_ConfigChannel+0x360>)
 8003aaa:	0019      	movs	r1, r3
 8003aac:	0010      	movs	r0, r2
 8003aae:	f7ff fa9f 	bl	8002ff0 <LL_ADC_SetCommonPathInternalCh>
 8003ab2:	e01d      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x398>
 8003ab4:	80000004 	.word	0x80000004
 8003ab8:	40012708 	.word	0x40012708
 8003abc:	b0001000 	.word	0xb0001000
 8003ac0:	20000000 	.word	0x20000000
 8003ac4:	00030d40 	.word	0x00030d40
 8003ac8:	b8004000 	.word	0xb8004000
 8003acc:	b4002000 	.word	0xb4002000
 8003ad0:	ff7fffff 	.word	0xff7fffff
 8003ad4:	feffffff 	.word	0xfeffffff
 8003ad8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ae8:	2317      	movs	r3, #23
 8003aea:	18fb      	adds	r3, r7, r3
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2254      	movs	r2, #84	; 0x54
 8003af4:	2100      	movs	r1, #0
 8003af6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8003af8:	2317      	movs	r3, #23
 8003afa:	18fb      	adds	r3, r7, r3
 8003afc:	781b      	ldrb	r3, [r3, #0]
}
 8003afe:	0018      	movs	r0, r3
 8003b00:	46bd      	mov	sp, r7
 8003b02:	b006      	add	sp, #24
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)

08003b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff fb63 	bl	80031e4 <LL_ADC_IsEnabled>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d000      	beq.n	8003b24 <ADC_Enable+0x1c>
 8003b22:	e069      	b.n	8003bf8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	4a36      	ldr	r2, [pc, #216]	; (8003c04 <ADC_Enable+0xfc>)
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	d00d      	beq.n	8003b4c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	2210      	movs	r2, #16
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b40:	2201      	movs	r2, #1
 8003b42:	431a      	orrs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e056      	b.n	8003bfa <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	0018      	movs	r0, r3
 8003b52:	f7ff fb23 	bl	800319c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003b56:	4b2c      	ldr	r3, [pc, #176]	; (8003c08 <ADC_Enable+0x100>)
 8003b58:	0018      	movs	r0, r3
 8003b5a:	f7ff fa5d 	bl	8003018 <LL_ADC_GetCommonPathInternalCh>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	4013      	ands	r3, r2
 8003b66:	d00f      	beq.n	8003b88 <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b68:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <ADC_Enable+0x104>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4928      	ldr	r1, [pc, #160]	; (8003c10 <ADC_Enable+0x108>)
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f7fc fad0 	bl	8000114 <__udivsi3>
 8003b74:	0003      	movs	r3, r0
 8003b76:	3301      	adds	r3, #1
 8003b78:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b7a:	e002      	b.n	8003b82 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1f9      	bne.n	8003b7c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7e5b      	ldrb	r3, [r3, #25]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d033      	beq.n	8003bf8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003b90:	f7ff fa24 	bl	8002fdc <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b98:	e027      	b.n	8003bea <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f7ff fb20 	bl	80031e4 <LL_ADC_IsEnabled>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d104      	bne.n	8003bb2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	0018      	movs	r0, r3
 8003bae:	f7ff faf5 	bl	800319c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bb2:	f7ff fa13 	bl	8002fdc <HAL_GetTick>
 8003bb6:	0002      	movs	r2, r0
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d914      	bls.n	8003bea <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d00d      	beq.n	8003bea <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	2201      	movs	r2, #1
 8003be0:	431a      	orrs	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e007      	b.n	8003bfa <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d1d0      	bne.n	8003b9a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b004      	add	sp, #16
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	80000017 	.word	0x80000017
 8003c08:	40012708 	.word	0x40012708
 8003c0c:	20000000 	.word	0x20000000
 8003c10:	00030d40 	.word	0x00030d40

08003c14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b084      	sub	sp, #16
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c26:	2250      	movs	r2, #80	; 0x50
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d141      	bne.n	8003cb0 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	2280      	movs	r2, #128	; 0x80
 8003c32:	0092      	lsls	r2, r2, #2
 8003c34:	431a      	orrs	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff fa14 	bl	800306c <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c44:	1e03      	subs	r3, r0, #0
 8003c46:	d02e      	beq.n	8003ca6 <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	7e9b      	ldrb	r3, [r3, #26]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d12a      	bne.n	8003ca6 <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2208      	movs	r2, #8
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b08      	cmp	r3, #8
 8003c5c:	d123      	bne.n	8003ca6 <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	0018      	movs	r0, r3
 8003c64:	f7ff fae2 	bl	800322c <LL_ADC_REG_IsConversionOngoing>
 8003c68:	1e03      	subs	r3, r0, #0
 8003c6a:	d110      	bne.n	8003c8e <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685a      	ldr	r2, [r3, #4]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	210c      	movs	r1, #12
 8003c78:	438a      	bics	r2, r1
 8003c7a:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c80:	4a15      	ldr	r2, [pc, #84]	; (8003cd8 <ADC_DMAConvCplt+0xc4>)
 8003c82:	4013      	ands	r3, r2
 8003c84:	2201      	movs	r2, #1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c8c:	e00b      	b.n	8003ca6 <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c92:	2220      	movs	r2, #32
 8003c94:	431a      	orrs	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	0018      	movs	r0, r3
 8003caa:	f7ff fd3d 	bl	8003728 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cae:	e00f      	b.n	8003cd0 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cb4:	2210      	movs	r2, #16
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fd43 	bl	8003748 <HAL_ADC_ErrorCallback>
}
 8003cc2:	e005      	b.n	8003cd0 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	0010      	movs	r0, r2
 8003cce:	4798      	blx	r3
}
 8003cd0:	46c0      	nop			; (mov r8, r8)
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	b004      	add	sp, #16
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	fffffefe 	.word	0xfffffefe

08003cdc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fd23 	bl	8003738 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003cf2:	46c0      	nop			; (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b004      	add	sp, #16
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0c:	2240      	movs	r2, #64	; 0x40
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	2204      	movs	r2, #4
 8003d1a:	431a      	orrs	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff fd10 	bl	8003748 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	0002      	movs	r2, r0
 8003d38:	1dfb      	adds	r3, r7, #7
 8003d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d3c:	1dfb      	adds	r3, r7, #7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	2b7f      	cmp	r3, #127	; 0x7f
 8003d42:	d809      	bhi.n	8003d58 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d44:	1dfb      	adds	r3, r7, #7
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	001a      	movs	r2, r3
 8003d4a:	231f      	movs	r3, #31
 8003d4c:	401a      	ands	r2, r3
 8003d4e:	4b04      	ldr	r3, [pc, #16]	; (8003d60 <__NVIC_EnableIRQ+0x30>)
 8003d50:	2101      	movs	r1, #1
 8003d52:	4091      	lsls	r1, r2
 8003d54:	000a      	movs	r2, r1
 8003d56:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003d58:	46c0      	nop			; (mov r8, r8)
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b002      	add	sp, #8
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	e000e100 	.word	0xe000e100

08003d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d64:	b590      	push	{r4, r7, lr}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	0002      	movs	r2, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	1dfb      	adds	r3, r7, #7
 8003d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003d72:	1dfb      	adds	r3, r7, #7
 8003d74:	781b      	ldrb	r3, [r3, #0]
 8003d76:	2b7f      	cmp	r3, #127	; 0x7f
 8003d78:	d828      	bhi.n	8003dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003d7a:	4a2f      	ldr	r2, [pc, #188]	; (8003e38 <__NVIC_SetPriority+0xd4>)
 8003d7c:	1dfb      	adds	r3, r7, #7
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	b25b      	sxtb	r3, r3
 8003d82:	089b      	lsrs	r3, r3, #2
 8003d84:	33c0      	adds	r3, #192	; 0xc0
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	589b      	ldr	r3, [r3, r2]
 8003d8a:	1dfa      	adds	r2, r7, #7
 8003d8c:	7812      	ldrb	r2, [r2, #0]
 8003d8e:	0011      	movs	r1, r2
 8003d90:	2203      	movs	r2, #3
 8003d92:	400a      	ands	r2, r1
 8003d94:	00d2      	lsls	r2, r2, #3
 8003d96:	21ff      	movs	r1, #255	; 0xff
 8003d98:	4091      	lsls	r1, r2
 8003d9a:	000a      	movs	r2, r1
 8003d9c:	43d2      	mvns	r2, r2
 8003d9e:	401a      	ands	r2, r3
 8003da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	019b      	lsls	r3, r3, #6
 8003da6:	22ff      	movs	r2, #255	; 0xff
 8003da8:	401a      	ands	r2, r3
 8003daa:	1dfb      	adds	r3, r7, #7
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	2303      	movs	r3, #3
 8003db2:	4003      	ands	r3, r0
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003db8:	481f      	ldr	r0, [pc, #124]	; (8003e38 <__NVIC_SetPriority+0xd4>)
 8003dba:	1dfb      	adds	r3, r7, #7
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	b25b      	sxtb	r3, r3
 8003dc0:	089b      	lsrs	r3, r3, #2
 8003dc2:	430a      	orrs	r2, r1
 8003dc4:	33c0      	adds	r3, #192	; 0xc0
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003dca:	e031      	b.n	8003e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003dcc:	4a1b      	ldr	r2, [pc, #108]	; (8003e3c <__NVIC_SetPriority+0xd8>)
 8003dce:	1dfb      	adds	r3, r7, #7
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	230f      	movs	r3, #15
 8003dd6:	400b      	ands	r3, r1
 8003dd8:	3b08      	subs	r3, #8
 8003dda:	089b      	lsrs	r3, r3, #2
 8003ddc:	3306      	adds	r3, #6
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	18d3      	adds	r3, r2, r3
 8003de2:	3304      	adds	r3, #4
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	1dfa      	adds	r2, r7, #7
 8003de8:	7812      	ldrb	r2, [r2, #0]
 8003dea:	0011      	movs	r1, r2
 8003dec:	2203      	movs	r2, #3
 8003dee:	400a      	ands	r2, r1
 8003df0:	00d2      	lsls	r2, r2, #3
 8003df2:	21ff      	movs	r1, #255	; 0xff
 8003df4:	4091      	lsls	r1, r2
 8003df6:	000a      	movs	r2, r1
 8003df8:	43d2      	mvns	r2, r2
 8003dfa:	401a      	ands	r2, r3
 8003dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	019b      	lsls	r3, r3, #6
 8003e02:	22ff      	movs	r2, #255	; 0xff
 8003e04:	401a      	ands	r2, r3
 8003e06:	1dfb      	adds	r3, r7, #7
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	4003      	ands	r3, r0
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003e14:	4809      	ldr	r0, [pc, #36]	; (8003e3c <__NVIC_SetPriority+0xd8>)
 8003e16:	1dfb      	adds	r3, r7, #7
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	001c      	movs	r4, r3
 8003e1c:	230f      	movs	r3, #15
 8003e1e:	4023      	ands	r3, r4
 8003e20:	3b08      	subs	r3, #8
 8003e22:	089b      	lsrs	r3, r3, #2
 8003e24:	430a      	orrs	r2, r1
 8003e26:	3306      	adds	r3, #6
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	18c3      	adds	r3, r0, r3
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	601a      	str	r2, [r3, #0]
}
 8003e30:	46c0      	nop			; (mov r8, r8)
 8003e32:	46bd      	mov	sp, r7
 8003e34:	b003      	add	sp, #12
 8003e36:	bd90      	pop	{r4, r7, pc}
 8003e38:	e000e100 	.word	0xe000e100
 8003e3c:	e000ed00 	.word	0xe000ed00

08003e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1e5a      	subs	r2, r3, #1
 8003e4c:	2380      	movs	r3, #128	; 0x80
 8003e4e:	045b      	lsls	r3, r3, #17
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d301      	bcc.n	8003e58 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e54:	2301      	movs	r3, #1
 8003e56:	e010      	b.n	8003e7a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e58:	4b0a      	ldr	r3, [pc, #40]	; (8003e84 <SysTick_Config+0x44>)
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	3a01      	subs	r2, #1
 8003e5e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e60:	2301      	movs	r3, #1
 8003e62:	425b      	negs	r3, r3
 8003e64:	2103      	movs	r1, #3
 8003e66:	0018      	movs	r0, r3
 8003e68:	f7ff ff7c 	bl	8003d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <SysTick_Config+0x44>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e72:	4b04      	ldr	r3, [pc, #16]	; (8003e84 <SysTick_Config+0x44>)
 8003e74:	2207      	movs	r2, #7
 8003e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	0018      	movs	r0, r3
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	e000e010 	.word	0xe000e010

08003e88 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	210f      	movs	r1, #15
 8003e94:	187b      	adds	r3, r7, r1
 8003e96:	1c02      	adds	r2, r0, #0
 8003e98:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8003e9a:	68ba      	ldr	r2, [r7, #8]
 8003e9c:	187b      	adds	r3, r7, r1
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	b25b      	sxtb	r3, r3
 8003ea2:	0011      	movs	r1, r2
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f7ff ff5d 	bl	8003d64 <__NVIC_SetPriority>
}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	46bd      	mov	sp, r7
 8003eae:	b004      	add	sp, #16
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b082      	sub	sp, #8
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	0002      	movs	r2, r0
 8003eba:	1dfb      	adds	r3, r7, #7
 8003ebc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ebe:	1dfb      	adds	r3, r7, #7
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	b25b      	sxtb	r3, r3
 8003ec4:	0018      	movs	r0, r3
 8003ec6:	f7ff ff33 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b002      	add	sp, #8
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff ffaf 	bl	8003e40 <SysTick_Config>
 8003ee2:	0003      	movs	r3, r0
}
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	b002      	add	sp, #8
 8003eea:	bd80      	pop	{r7, pc}

08003eec <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e077      	b.n	8003fee <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a3d      	ldr	r2, [pc, #244]	; (8003ff8 <HAL_DMA_Init+0x10c>)
 8003f04:	4694      	mov	ip, r2
 8003f06:	4463      	add	r3, ip
 8003f08:	2114      	movs	r1, #20
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	f7fc f902 	bl	8000114 <__udivsi3>
 8003f10:	0003      	movs	r3, r0
 8003f12:	009a      	lsls	r2, r3, #2
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2225      	movs	r2, #37	; 0x25
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4934      	ldr	r1, [pc, #208]	; (8003ffc <HAL_DMA_Init+0x110>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	6819      	ldr	r1, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689a      	ldr	r2, [r3, #8]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	695b      	ldr	r3, [r3, #20]
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6a1b      	ldr	r3, [r3, #32]
 8003f5c:	431a      	orrs	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 fa8d 	bl	8004488 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	2380      	movs	r3, #128	; 0x80
 8003f74:	01db      	lsls	r3, r3, #7
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d102      	bne.n	8003f80 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f88:	213f      	movs	r1, #63	; 0x3f
 8003f8a:	400a      	ands	r2, r1
 8003f8c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003f96:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_DMA_Init+0xd8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b04      	cmp	r3, #4
 8003fa6:	d80d      	bhi.n	8003fc4 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	0018      	movs	r0, r3
 8003fac:	f000 fa98 	bl	80044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	e008      	b.n	8003fd6 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2225      	movs	r2, #37	; 0x25
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2224      	movs	r2, #36	; 0x24
 8003fe8:	2100      	movs	r1, #0
 8003fea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fec:	2300      	movs	r3, #0
}
 8003fee:	0018      	movs	r0, r3
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	b002      	add	sp, #8
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	bffdfff8 	.word	0xbffdfff8
 8003ffc:	ffff800f 	.word	0xffff800f

08004000 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	607a      	str	r2, [r7, #4]
 800400c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800400e:	2317      	movs	r3, #23
 8004010:	18fb      	adds	r3, r7, r3
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	2224      	movs	r2, #36	; 0x24
 800401a:	5c9b      	ldrb	r3, [r3, r2]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Start_IT+0x24>
 8004020:	2302      	movs	r3, #2
 8004022:	e06f      	b.n	8004104 <HAL_DMA_Start_IT+0x104>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2224      	movs	r2, #36	; 0x24
 8004028:	2101      	movs	r1, #1
 800402a:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2225      	movs	r2, #37	; 0x25
 8004030:	5c9b      	ldrb	r3, [r3, r2]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b01      	cmp	r3, #1
 8004036:	d157      	bne.n	80040e8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2225      	movs	r2, #37	; 0x25
 800403c:	2102      	movs	r1, #2
 800403e:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2101      	movs	r1, #1
 8004052:	438a      	bics	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	68b9      	ldr	r1, [r7, #8]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9d3 	bl	8004408 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	2b00      	cmp	r3, #0
 8004068:	d008      	beq.n	800407c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	210e      	movs	r1, #14
 8004076:	430a      	orrs	r2, r1
 8004078:	601a      	str	r2, [r3, #0]
 800407a:	e00f      	b.n	800409c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2104      	movs	r1, #4
 8004088:	438a      	bics	r2, r1
 800408a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	210a      	movs	r1, #10
 8004098:	430a      	orrs	r2, r1
 800409a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	2380      	movs	r3, #128	; 0x80
 80040a4:	025b      	lsls	r3, r3, #9
 80040a6:	4013      	ands	r3, r2
 80040a8:	d008      	beq.n	80040bc <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	0049      	lsls	r1, r1, #1
 80040b8:	430a      	orrs	r2, r1
 80040ba:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ce:	2180      	movs	r1, #128	; 0x80
 80040d0:	0049      	lsls	r1, r1, #1
 80040d2:	430a      	orrs	r2, r1
 80040d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2101      	movs	r1, #1
 80040e2:	430a      	orrs	r2, r1
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	e00a      	b.n	80040fe <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2280      	movs	r2, #128	; 0x80
 80040ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2224      	movs	r2, #36	; 0x24
 80040f2:	2100      	movs	r1, #0
 80040f4:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80040f6:	2317      	movs	r3, #23
 80040f8:	18fb      	adds	r3, r7, r3
 80040fa:	2201      	movs	r2, #1
 80040fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80040fe:	2317      	movs	r3, #23
 8004100:	18fb      	adds	r3, r7, r3
 8004102:	781b      	ldrb	r3, [r3, #0]
}
 8004104:	0018      	movs	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	b006      	add	sp, #24
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e050      	b.n	80041c0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2225      	movs	r2, #37	; 0x25
 8004122:	5c9b      	ldrb	r3, [r3, r2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d008      	beq.n	800413c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2204      	movs	r2, #4
 800412e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2224      	movs	r2, #36	; 0x24
 8004134:	2100      	movs	r1, #0
 8004136:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e041      	b.n	80041c0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681a      	ldr	r2, [r3, #0]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	210e      	movs	r1, #14
 8004148:	438a      	bics	r2, r1
 800414a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	491c      	ldr	r1, [pc, #112]	; (80041c8 <HAL_DMA_Abort+0xbc>)
 8004158:	400a      	ands	r2, r1
 800415a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800416c:	4b17      	ldr	r3, [pc, #92]	; (80041cc <HAL_DMA_Abort+0xc0>)
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	221c      	movs	r2, #28
 8004176:	4013      	ands	r3, r2
 8004178:	2201      	movs	r2, #1
 800417a:	409a      	lsls	r2, r3
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <HAL_DMA_Abort+0xc0>)
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800418a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004190:	2b00      	cmp	r3, #0
 8004192:	d00c      	beq.n	80041ae <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800419e:	490a      	ldr	r1, [pc, #40]	; (80041c8 <HAL_DMA_Abort+0xbc>)
 80041a0:	400a      	ands	r2, r1
 80041a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80041ac:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2225      	movs	r2, #37	; 0x25
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2224      	movs	r2, #36	; 0x24
 80041ba:	2100      	movs	r1, #0
 80041bc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	0018      	movs	r0, r3
 80041c2:	46bd      	mov	sp, r7
 80041c4:	b002      	add	sp, #8
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	fffffeff 	.word	0xfffffeff
 80041cc:	40020000 	.word	0x40020000

080041d0 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d8:	210f      	movs	r1, #15
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2225      	movs	r2, #37	; 0x25
 80041e4:	5c9b      	ldrb	r3, [r3, r2]
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d006      	beq.n	80041fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2204      	movs	r2, #4
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80041f2:	187b      	adds	r3, r7, r1
 80041f4:	2201      	movs	r2, #1
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e049      	b.n	800428e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	210e      	movs	r1, #14
 8004206:	438a      	bics	r2, r1
 8004208:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004224:	491d      	ldr	r1, [pc, #116]	; (800429c <HAL_DMA_Abort_IT+0xcc>)
 8004226:	400a      	ands	r2, r1
 8004228:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_DMA_Abort_IT+0xd0>)
 800422c:	6859      	ldr	r1, [r3, #4]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004232:	221c      	movs	r2, #28
 8004234:	4013      	ands	r3, r2
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_DMA_Abort_IT+0xd0>)
 800423c:	430a      	orrs	r2, r1
 800423e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004248:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425c:	490f      	ldr	r1, [pc, #60]	; (800429c <HAL_DMA_Abort_IT+0xcc>)
 800425e:	400a      	ands	r2, r1
 8004260:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800426a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2225      	movs	r2, #37	; 0x25
 8004270:	2101      	movs	r1, #1
 8004272:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2224      	movs	r2, #36	; 0x24
 8004278:	2100      	movs	r1, #0
 800427a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	0010      	movs	r0, r2
 800428c:	4798      	blx	r3
    }
  }
  return status;
 800428e:	230f      	movs	r3, #15
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	781b      	ldrb	r3, [r3, #0]
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b004      	add	sp, #16
 800429a:	bd80      	pop	{r7, pc}
 800429c:	fffffeff 	.word	0xfffffeff
 80042a0:	40020000 	.word	0x40020000

080042a4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80042ac:	4b55      	ldr	r3, [pc, #340]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	221c      	movs	r2, #28
 80042c0:	4013      	ands	r3, r2
 80042c2:	2204      	movs	r2, #4
 80042c4:	409a      	lsls	r2, r3
 80042c6:	0013      	movs	r3, r2
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4013      	ands	r3, r2
 80042cc:	d027      	beq.n	800431e <HAL_DMA_IRQHandler+0x7a>
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	2204      	movs	r2, #4
 80042d2:	4013      	ands	r3, r2
 80042d4:	d023      	beq.n	800431e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2220      	movs	r2, #32
 80042de:	4013      	ands	r3, r2
 80042e0:	d107      	bne.n	80042f2 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2104      	movs	r1, #4
 80042ee:	438a      	bics	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80042f2:	4b44      	ldr	r3, [pc, #272]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 80042f4:	6859      	ldr	r1, [r3, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	221c      	movs	r2, #28
 80042fc:	4013      	ands	r3, r2
 80042fe:	2204      	movs	r2, #4
 8004300:	409a      	lsls	r2, r3
 8004302:	4b40      	ldr	r3, [pc, #256]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800430c:	2b00      	cmp	r3, #0
 800430e:	d100      	bne.n	8004312 <HAL_DMA_IRQHandler+0x6e>
 8004310:	e073      	b.n	80043fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	0010      	movs	r0, r2
 800431a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800431c:	e06d      	b.n	80043fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	221c      	movs	r2, #28
 8004324:	4013      	ands	r3, r2
 8004326:	2202      	movs	r2, #2
 8004328:	409a      	lsls	r2, r3
 800432a:	0013      	movs	r3, r2
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4013      	ands	r3, r2
 8004330:	d02e      	beq.n	8004390 <HAL_DMA_IRQHandler+0xec>
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2202      	movs	r2, #2
 8004336:	4013      	ands	r3, r2
 8004338:	d02a      	beq.n	8004390 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2220      	movs	r2, #32
 8004342:	4013      	ands	r3, r2
 8004344:	d10b      	bne.n	800435e <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	210a      	movs	r1, #10
 8004352:	438a      	bics	r2, r1
 8004354:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2225      	movs	r2, #37	; 0x25
 800435a:	2101      	movs	r1, #1
 800435c:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800435e:	4b29      	ldr	r3, [pc, #164]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	221c      	movs	r2, #28
 8004368:	4013      	ands	r3, r2
 800436a:	2202      	movs	r2, #2
 800436c:	409a      	lsls	r2, r3
 800436e:	4b25      	ldr	r3, [pc, #148]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 8004370:	430a      	orrs	r2, r1
 8004372:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2224      	movs	r2, #36	; 0x24
 8004378:	2100      	movs	r1, #0
 800437a:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d03a      	beq.n	80043fa <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	0010      	movs	r0, r2
 800438c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800438e:	e034      	b.n	80043fa <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004394:	221c      	movs	r2, #28
 8004396:	4013      	ands	r3, r2
 8004398:	2208      	movs	r2, #8
 800439a:	409a      	lsls	r2, r3
 800439c:	0013      	movs	r3, r2
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4013      	ands	r3, r2
 80043a2:	d02b      	beq.n	80043fc <HAL_DMA_IRQHandler+0x158>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2208      	movs	r2, #8
 80043a8:	4013      	ands	r3, r2
 80043aa:	d027      	beq.n	80043fc <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	210e      	movs	r1, #14
 80043b8:	438a      	bics	r2, r1
 80043ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c4:	221c      	movs	r2, #28
 80043c6:	4013      	ands	r3, r2
 80043c8:	2201      	movs	r2, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	4b0d      	ldr	r3, [pc, #52]	; (8004404 <HAL_DMA_IRQHandler+0x160>)
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2201      	movs	r2, #1
 80043d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2225      	movs	r2, #37	; 0x25
 80043dc:	2101      	movs	r1, #1
 80043de:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2224      	movs	r2, #36	; 0x24
 80043e4:	2100      	movs	r1, #0
 80043e6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d005      	beq.n	80043fc <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	0010      	movs	r0, r2
 80043f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	46c0      	nop			; (mov r8, r8)
}
 80043fe:	46bd      	mov	sp, r7
 8004400:	b004      	add	sp, #16
 8004402:	bd80      	pop	{r7, pc}
 8004404:	40020000 	.word	0x40020000

08004408 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
 8004414:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800441e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004424:	2b00      	cmp	r3, #0
 8004426:	d004      	beq.n	8004432 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004430:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004432:	4b14      	ldr	r3, [pc, #80]	; (8004484 <DMA_SetConfig+0x7c>)
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	221c      	movs	r2, #28
 800443c:	4013      	ands	r3, r2
 800443e:	2201      	movs	r2, #1
 8004440:	409a      	lsls	r2, r3
 8004442:	4b10      	ldr	r3, [pc, #64]	; (8004484 <DMA_SetConfig+0x7c>)
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	2b10      	cmp	r3, #16
 8004456:	d108      	bne.n	800446a <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68ba      	ldr	r2, [r7, #8]
 8004466:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004468:	e007      	b.n	800447a <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	60da      	str	r2, [r3, #12]
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	46bd      	mov	sp, r7
 800447e:	b004      	add	sp, #16
 8004480:	bd80      	pop	{r7, pc}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	40020000 	.word	0x40020000

08004488 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	4a10      	ldr	r2, [pc, #64]	; (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8004498:	4694      	mov	ip, r2
 800449a:	4463      	add	r3, ip
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	001a      	movs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	001a      	movs	r2, r3
 80044aa:	23ff      	movs	r3, #255	; 0xff
 80044ac:	4013      	ands	r3, r2
 80044ae:	3b08      	subs	r3, #8
 80044b0:	2114      	movs	r1, #20
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7fb fe2e 	bl	8000114 <__udivsi3>
 80044b8:	0003      	movs	r3, r0
 80044ba:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a07      	ldr	r2, [pc, #28]	; (80044dc <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80044c0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	221f      	movs	r2, #31
 80044c6:	4013      	ands	r3, r2
 80044c8:	2201      	movs	r2, #1
 80044ca:	409a      	lsls	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80044d0:	46c0      	nop			; (mov r8, r8)
 80044d2:	46bd      	mov	sp, r7
 80044d4:	b004      	add	sp, #16
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	10008200 	.word	0x10008200
 80044dc:	40020880 	.word	0x40020880

080044e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	223f      	movs	r2, #63	; 0x3f
 80044ee:	4013      	ands	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4a0a      	ldr	r2, [pc, #40]	; (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f6:	4694      	mov	ip, r2
 80044f8:	4463      	add	r3, ip
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	001a      	movs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a07      	ldr	r2, [pc, #28]	; (8004524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	3b01      	subs	r3, #1
 800450c:	2203      	movs	r2, #3
 800450e:	4013      	ands	r3, r2
 8004510:	2201      	movs	r2, #1
 8004512:	409a      	lsls	r2, r3
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004518:	46c0      	nop			; (mov r8, r8)
 800451a:	46bd      	mov	sp, r7
 800451c:	b004      	add	sp, #16
 800451e:	bd80      	pop	{r7, pc}
 8004520:	1000823f 	.word	0x1000823f
 8004524:	40020940 	.word	0x40020940

08004528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004536:	e147      	b.n	80047c8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2101      	movs	r1, #1
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	4091      	lsls	r1, r2
 8004542:	000a      	movs	r2, r1
 8004544:	4013      	ands	r3, r2
 8004546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d100      	bne.n	8004550 <HAL_GPIO_Init+0x28>
 800454e:	e138      	b.n	80047c2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	2203      	movs	r2, #3
 8004556:	4013      	ands	r3, r2
 8004558:	2b01      	cmp	r3, #1
 800455a:	d005      	beq.n	8004568 <HAL_GPIO_Init+0x40>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2203      	movs	r2, #3
 8004562:	4013      	ands	r3, r2
 8004564:	2b02      	cmp	r3, #2
 8004566:	d130      	bne.n	80045ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	2203      	movs	r2, #3
 8004574:	409a      	lsls	r2, r3
 8004576:	0013      	movs	r3, r2
 8004578:	43da      	mvns	r2, r3
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	005b      	lsls	r3, r3, #1
 8004588:	409a      	lsls	r2, r3
 800458a:	0013      	movs	r3, r2
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	4313      	orrs	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800459e:	2201      	movs	r2, #1
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	409a      	lsls	r2, r3
 80045a4:	0013      	movs	r3, r2
 80045a6:	43da      	mvns	r2, r3
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	4013      	ands	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	091b      	lsrs	r3, r3, #4
 80045b4:	2201      	movs	r2, #1
 80045b6:	401a      	ands	r2, r3
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	409a      	lsls	r2, r3
 80045bc:	0013      	movs	r3, r2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2203      	movs	r2, #3
 80045d0:	4013      	ands	r3, r2
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d017      	beq.n	8004606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	409a      	lsls	r2, r3
 80045e4:	0013      	movs	r3, r2
 80045e6:	43da      	mvns	r2, r3
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	4013      	ands	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	689a      	ldr	r2, [r3, #8]
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	409a      	lsls	r2, r3
 80045f8:	0013      	movs	r3, r2
 80045fa:	693a      	ldr	r2, [r7, #16]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2203      	movs	r2, #3
 800460c:	4013      	ands	r3, r2
 800460e:	2b02      	cmp	r3, #2
 8004610:	d123      	bne.n	800465a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	08da      	lsrs	r2, r3, #3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	3208      	adds	r2, #8
 800461a:	0092      	lsls	r2, r2, #2
 800461c:	58d3      	ldr	r3, [r2, r3]
 800461e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2207      	movs	r2, #7
 8004624:	4013      	ands	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	220f      	movs	r2, #15
 800462a:	409a      	lsls	r2, r3
 800462c:	0013      	movs	r3, r2
 800462e:	43da      	mvns	r2, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4013      	ands	r3, r2
 8004634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	691a      	ldr	r2, [r3, #16]
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	2107      	movs	r1, #7
 800463e:	400b      	ands	r3, r1
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	409a      	lsls	r2, r3
 8004644:	0013      	movs	r3, r2
 8004646:	693a      	ldr	r2, [r7, #16]
 8004648:	4313      	orrs	r3, r2
 800464a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	08da      	lsrs	r2, r3, #3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	3208      	adds	r2, #8
 8004654:	0092      	lsls	r2, r2, #2
 8004656:	6939      	ldr	r1, [r7, #16]
 8004658:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	2203      	movs	r2, #3
 8004666:	409a      	lsls	r2, r3
 8004668:	0013      	movs	r3, r2
 800466a:	43da      	mvns	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4013      	ands	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2203      	movs	r2, #3
 8004678:	401a      	ands	r2, r3
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	005b      	lsls	r3, r3, #1
 800467e:	409a      	lsls	r2, r3
 8004680:	0013      	movs	r3, r2
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	685a      	ldr	r2, [r3, #4]
 8004692:	23c0      	movs	r3, #192	; 0xc0
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	4013      	ands	r3, r2
 8004698:	d100      	bne.n	800469c <HAL_GPIO_Init+0x174>
 800469a:	e092      	b.n	80047c2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800469c:	4a50      	ldr	r2, [pc, #320]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	3318      	adds	r3, #24
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	589b      	ldr	r3, [r3, r2]
 80046a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	2203      	movs	r2, #3
 80046ae:	4013      	ands	r3, r2
 80046b0:	00db      	lsls	r3, r3, #3
 80046b2:	220f      	movs	r2, #15
 80046b4:	409a      	lsls	r2, r3
 80046b6:	0013      	movs	r3, r2
 80046b8:	43da      	mvns	r2, r3
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	23a0      	movs	r3, #160	; 0xa0
 80046c4:	05db      	lsls	r3, r3, #23
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d013      	beq.n	80046f2 <HAL_GPIO_Init+0x1ca>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a45      	ldr	r2, [pc, #276]	; (80047e4 <HAL_GPIO_Init+0x2bc>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d00d      	beq.n	80046ee <HAL_GPIO_Init+0x1c6>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a44      	ldr	r2, [pc, #272]	; (80047e8 <HAL_GPIO_Init+0x2c0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d007      	beq.n	80046ea <HAL_GPIO_Init+0x1c2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a43      	ldr	r2, [pc, #268]	; (80047ec <HAL_GPIO_Init+0x2c4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d101      	bne.n	80046e6 <HAL_GPIO_Init+0x1be>
 80046e2:	2303      	movs	r3, #3
 80046e4:	e006      	b.n	80046f4 <HAL_GPIO_Init+0x1cc>
 80046e6:	2305      	movs	r3, #5
 80046e8:	e004      	b.n	80046f4 <HAL_GPIO_Init+0x1cc>
 80046ea:	2302      	movs	r3, #2
 80046ec:	e002      	b.n	80046f4 <HAL_GPIO_Init+0x1cc>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <HAL_GPIO_Init+0x1cc>
 80046f2:	2300      	movs	r3, #0
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	2103      	movs	r1, #3
 80046f8:	400a      	ands	r2, r1
 80046fa:	00d2      	lsls	r2, r2, #3
 80046fc:	4093      	lsls	r3, r2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004704:	4936      	ldr	r1, [pc, #216]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	089b      	lsrs	r3, r3, #2
 800470a:	3318      	adds	r3, #24
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004712:	4a33      	ldr	r2, [pc, #204]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	58d3      	ldr	r3, [r2, r3]
 8004718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	43da      	mvns	r2, r3
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	4013      	ands	r3, r2
 8004722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	685a      	ldr	r2, [r3, #4]
 8004728:	2380      	movs	r3, #128	; 0x80
 800472a:	025b      	lsls	r3, r3, #9
 800472c:	4013      	ands	r3, r2
 800472e:	d003      	beq.n	8004738 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	4313      	orrs	r3, r2
 8004736:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004738:	4929      	ldr	r1, [pc, #164]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 800473a:	2280      	movs	r2, #128	; 0x80
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8004740:	4a27      	ldr	r2, [pc, #156]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004742:	2384      	movs	r3, #132	; 0x84
 8004744:	58d3      	ldr	r3, [r2, r3]
 8004746:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	43da      	mvns	r2, r3
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4013      	ands	r3, r2
 8004750:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	029b      	lsls	r3, r3, #10
 800475a:	4013      	ands	r3, r2
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	4313      	orrs	r3, r2
 8004764:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004766:	491e      	ldr	r1, [pc, #120]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004768:	2284      	movs	r2, #132	; 0x84
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800476e:	4b1c      	ldr	r3, [pc, #112]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	43da      	mvns	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4013      	ands	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685a      	ldr	r2, [r3, #4]
 8004782:	2380      	movs	r3, #128	; 0x80
 8004784:	035b      	lsls	r3, r3, #13
 8004786:	4013      	ands	r3, r2
 8004788:	d003      	beq.n	8004792 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004792:	4b13      	ldr	r3, [pc, #76]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004798:	4b11      	ldr	r3, [pc, #68]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	43da      	mvns	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	4013      	ands	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	2380      	movs	r3, #128	; 0x80
 80047ae:	039b      	lsls	r3, r3, #14
 80047b0:	4013      	ands	r3, r2
 80047b2:	d003      	beq.n	80047bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	4313      	orrs	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047bc:	4b08      	ldr	r3, [pc, #32]	; (80047e0 <HAL_GPIO_Init+0x2b8>)
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	3301      	adds	r3, #1
 80047c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	40da      	lsrs	r2, r3
 80047d0:	1e13      	subs	r3, r2, #0
 80047d2:	d000      	beq.n	80047d6 <HAL_GPIO_Init+0x2ae>
 80047d4:	e6b0      	b.n	8004538 <HAL_GPIO_Init+0x10>
  }
}
 80047d6:	46c0      	nop			; (mov r8, r8)
 80047d8:	46c0      	nop			; (mov r8, r8)
 80047da:	46bd      	mov	sp, r7
 80047dc:	b006      	add	sp, #24
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021800 	.word	0x40021800
 80047e4:	50000400 	.word	0x50000400
 80047e8:	50000800 	.word	0x50000800
 80047ec:	50000c00 	.word	0x50000c00

080047f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	000a      	movs	r2, r1
 80047fa:	1cbb      	adds	r3, r7, #2
 80047fc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	1cba      	adds	r2, r7, #2
 8004804:	8812      	ldrh	r2, [r2, #0]
 8004806:	4013      	ands	r3, r2
 8004808:	d004      	beq.n	8004814 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800480a:	230f      	movs	r3, #15
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2201      	movs	r2, #1
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e003      	b.n	800481c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004814:	230f      	movs	r3, #15
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2200      	movs	r2, #0
 800481a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800481c:	230f      	movs	r3, #15
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b004      	add	sp, #16
 8004828:	bd80      	pop	{r7, pc}

0800482a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b082      	sub	sp, #8
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	0008      	movs	r0, r1
 8004834:	0011      	movs	r1, r2
 8004836:	1cbb      	adds	r3, r7, #2
 8004838:	1c02      	adds	r2, r0, #0
 800483a:	801a      	strh	r2, [r3, #0]
 800483c:	1c7b      	adds	r3, r7, #1
 800483e:	1c0a      	adds	r2, r1, #0
 8004840:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004842:	1c7b      	adds	r3, r7, #1
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d004      	beq.n	8004854 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800484a:	1cbb      	adds	r3, r7, #2
 800484c:	881a      	ldrh	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004852:	e003      	b.n	800485c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004854:	1cbb      	adds	r3, r7, #2
 8004856:	881a      	ldrh	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e082      	b.n	800497c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2241      	movs	r2, #65	; 0x41
 800487a:	5c9b      	ldrb	r3, [r3, r2]
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2240      	movs	r2, #64	; 0x40
 8004886:	2100      	movs	r1, #0
 8004888:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	0018      	movs	r0, r3
 800488e:	f7fe f957 	bl	8002b40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2241      	movs	r2, #65	; 0x41
 8004896:	2124      	movs	r1, #36	; 0x24
 8004898:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	438a      	bics	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685a      	ldr	r2, [r3, #4]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4934      	ldr	r1, [pc, #208]	; (8004984 <HAL_I2C_Init+0x120>)
 80048b4:	400a      	ands	r2, r1
 80048b6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	689a      	ldr	r2, [r3, #8]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4931      	ldr	r1, [pc, #196]	; (8004988 <HAL_I2C_Init+0x124>)
 80048c4:	400a      	ands	r2, r1
 80048c6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d108      	bne.n	80048e2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2180      	movs	r1, #128	; 0x80
 80048da:	0209      	lsls	r1, r1, #8
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]
 80048e0:	e007      	b.n	80048f2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2184      	movs	r1, #132	; 0x84
 80048ec:	0209      	lsls	r1, r1, #8
 80048ee:	430a      	orrs	r2, r1
 80048f0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d104      	bne.n	8004904 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2280      	movs	r2, #128	; 0x80
 8004900:	0112      	lsls	r2, r2, #4
 8004902:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	491f      	ldr	r1, [pc, #124]	; (800498c <HAL_I2C_Init+0x128>)
 8004910:	430a      	orrs	r2, r1
 8004912:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68da      	ldr	r2, [r3, #12]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	491a      	ldr	r1, [pc, #104]	; (8004988 <HAL_I2C_Init+0x124>)
 8004920:	400a      	ands	r2, r1
 8004922:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	431a      	orrs	r2, r3
 800492e:	0011      	movs	r1, r2
                             (hi2c->Init.OwnAddress2Masks << 8));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	69d9      	ldr	r1, [r3, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a1a      	ldr	r2, [r3, #32]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	430a      	orrs	r2, r1
 800495c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2241      	movs	r2, #65	; 0x41
 8004968:	2120      	movs	r1, #32
 800496a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2242      	movs	r2, #66	; 0x42
 8004976:	2100      	movs	r1, #0
 8004978:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	0018      	movs	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	b002      	add	sp, #8
 8004982:	bd80      	pop	{r7, pc}
 8004984:	f0ffffff 	.word	0xf0ffffff
 8004988:	ffff7fff 	.word	0xffff7fff
 800498c:	02008000 	.word	0x02008000

08004990 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size, uint32_t Timeout)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b089      	sub	sp, #36	; 0x24
 8004994:	af02      	add	r7, sp, #8
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	0008      	movs	r0, r1
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	0019      	movs	r1, r3
 800499e:	230a      	movs	r3, #10
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	1c02      	adds	r2, r0, #0
 80049a4:	801a      	strh	r2, [r3, #0]
 80049a6:	2308      	movs	r3, #8
 80049a8:	18fb      	adds	r3, r7, r3
 80049aa:	1c0a      	adds	r2, r1, #0
 80049ac:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2241      	movs	r2, #65	; 0x41
 80049b2:	5c9b      	ldrb	r3, [r3, r2]
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b20      	cmp	r3, #32
 80049b8:	d000      	beq.n	80049bc <HAL_I2C_Master_Transmit+0x2c>
 80049ba:	e0e7      	b.n	8004b8c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2240      	movs	r2, #64	; 0x40
 80049c0:	5c9b      	ldrb	r3, [r3, r2]
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d101      	bne.n	80049ca <HAL_I2C_Master_Transmit+0x3a>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e0e1      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2240      	movs	r2, #64	; 0x40
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049d2:	f7fe fb03 	bl	8002fdc <HAL_GetTick>
 80049d6:	0003      	movs	r3, r0
 80049d8:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049da:	2380      	movs	r3, #128	; 0x80
 80049dc:	0219      	lsls	r1, r3, #8
 80049de:	68f8      	ldr	r0, [r7, #12]
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	9300      	str	r3, [sp, #0]
 80049e4:	2319      	movs	r3, #25
 80049e6:	2201      	movs	r2, #1
 80049e8:	f000 f8fc 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 80049ec:	1e03      	subs	r3, r0, #0
 80049ee:	d001      	beq.n	80049f4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0cc      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2241      	movs	r2, #65	; 0x41
 80049f8:	2121      	movs	r1, #33	; 0x21
 80049fa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2242      	movs	r2, #66	; 0x42
 8004a00:	2110      	movs	r1, #16
 8004a02:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2200      	movs	r2, #0
 8004a08:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2208      	movs	r2, #8
 8004a14:	18ba      	adds	r2, r7, r2
 8004a16:	8812      	ldrh	r2, [r2, #0]
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	2bff      	cmp	r3, #255	; 0xff
 8004a28:	d911      	bls.n	8004a4e <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	22ff      	movs	r2, #255	; 0xff
 8004a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	045c      	lsls	r4, r3, #17
 8004a3a:	230a      	movs	r3, #10
 8004a3c:	18fb      	adds	r3, r7, r3
 8004a3e:	8819      	ldrh	r1, [r3, #0]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	4b55      	ldr	r3, [pc, #340]	; (8004b98 <HAL_I2C_Master_Transmit+0x208>)
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	0023      	movs	r3, r4
 8004a48:	f000 fa00 	bl	8004e4c <I2C_TransferConfig>
 8004a4c:	e075      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
                            I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	2380      	movs	r3, #128	; 0x80
 8004a60:	049c      	lsls	r4, r3, #18
 8004a62:	230a      	movs	r3, #10
 8004a64:	18fb      	adds	r3, r7, r3
 8004a66:	8819      	ldrh	r1, [r3, #0]
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	4b4b      	ldr	r3, [pc, #300]	; (8004b98 <HAL_I2C_Master_Transmit+0x208>)
 8004a6c:	9300      	str	r3, [sp, #0]
 8004a6e:	0023      	movs	r3, r4
 8004a70:	f000 f9ec 	bl	8004e4c <I2C_TransferConfig>
                            I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004a74:	e061      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	0018      	movs	r0, r3
 8004a7e:	f000 f8f0 	bl	8004c62 <I2C_WaitOnTXISFlagUntilTimeout>
 8004a82:	1e03      	subs	r3, r0, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e081      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	781a      	ldrb	r2, [r3, #0]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d03a      	beq.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d136      	bne.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004acc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	0013      	movs	r3, r2
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2180      	movs	r1, #128	; 0x80
 8004ada:	f000 f883 	bl	8004be4 <I2C_WaitOnFlagUntilTimeout>
 8004ade:	1e03      	subs	r3, r0, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e053      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	2bff      	cmp	r3, #255	; 0xff
 8004aee:	d911      	bls.n	8004b14 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	22ff      	movs	r2, #255	; 0xff
 8004af4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afa:	b2da      	uxtb	r2, r3
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	045c      	lsls	r4, r3, #17
 8004b00:	230a      	movs	r3, #10
 8004b02:	18fb      	adds	r3, r7, r3
 8004b04:	8819      	ldrh	r1, [r3, #0]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	2300      	movs	r3, #0
 8004b0a:	9300      	str	r3, [sp, #0]
 8004b0c:	0023      	movs	r3, r4
 8004b0e:	f000 f99d 	bl	8004e4c <I2C_TransferConfig>
 8004b12:	e012      	b.n	8004b3a <HAL_I2C_Master_Transmit+0x1aa>
                                I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	2380      	movs	r3, #128	; 0x80
 8004b26:	049c      	lsls	r4, r3, #18
 8004b28:	230a      	movs	r3, #10
 8004b2a:	18fb      	adds	r3, r7, r3
 8004b2c:	8819      	ldrh	r1, [r3, #0]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	2300      	movs	r3, #0
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	0023      	movs	r3, r4
 8004b36:	f000 f989 	bl	8004e4c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d198      	bne.n	8004a76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f000 f8c8 	bl	8004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b50:	1e03      	subs	r3, r0, #0
 8004b52:	d001      	beq.n	8004b58 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e01a      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2220      	movs	r2, #32
 8004b5e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	490c      	ldr	r1, [pc, #48]	; (8004b9c <HAL_I2C_Master_Transmit+0x20c>)
 8004b6c:	400a      	ands	r2, r1
 8004b6e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2241      	movs	r2, #65	; 0x41
 8004b74:	2120      	movs	r1, #32
 8004b76:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2242      	movs	r2, #66	; 0x42
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2240      	movs	r2, #64	; 0x40
 8004b84:	2100      	movs	r1, #0
 8004b86:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	e000      	b.n	8004b8e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
  }
}
 8004b8e:	0018      	movs	r0, r3
 8004b90:	46bd      	mov	sp, r7
 8004b92:	b007      	add	sp, #28
 8004b94:	bd90      	pop	{r4, r7, pc}
 8004b96:	46c0      	nop			; (mov r8, r8)
 8004b98:	80002000 	.word	0x80002000
 8004b9c:	fe00e800 	.word	0xfe00e800

08004ba0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b02      	cmp	r3, #2
 8004bb4:	d103      	bne.n	8004bbe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d007      	beq.n	8004bdc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	619a      	str	r2, [r3, #24]
  }
}
 8004bdc:	46c0      	nop			; (mov r8, r8)
 8004bde:	46bd      	mov	sp, r7
 8004be0:	b002      	add	sp, #8
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	1dfb      	adds	r3, r7, #7
 8004bf2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bf4:	e021      	b.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	d01e      	beq.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bfc:	f7fe f9ee 	bl	8002fdc <HAL_GetTick>
 8004c00:	0002      	movs	r2, r0
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	683a      	ldr	r2, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d113      	bne.n	8004c3a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c16:	2220      	movs	r2, #32
 8004c18:	431a      	orrs	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2241      	movs	r2, #65	; 0x41
 8004c22:	2120      	movs	r1, #32
 8004c24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2242      	movs	r2, #66	; 0x42
 8004c2a:	2100      	movs	r1, #0
 8004c2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	2240      	movs	r2, #64	; 0x40
 8004c32:	2100      	movs	r1, #0
 8004c34:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e00f      	b.n	8004c5a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	4013      	ands	r3, r2
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	425a      	negs	r2, r3
 8004c4a:	4153      	adcs	r3, r2
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	001a      	movs	r2, r3
 8004c50:	1dfb      	adds	r3, r7, #7
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d0ce      	beq.n	8004bf6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	0018      	movs	r0, r3
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	b004      	add	sp, #16
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b084      	sub	sp, #16
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c6e:	e02b      	b.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	0018      	movs	r0, r3
 8004c78:	f000 f86e 	bl	8004d58 <I2C_IsAcknowledgeFailed>
 8004c7c:	1e03      	subs	r3, r0, #0
 8004c7e:	d001      	beq.n	8004c84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	e029      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	3301      	adds	r3, #1
 8004c88:	d01e      	beq.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c8a:	f7fe f9a7 	bl	8002fdc <HAL_GetTick>
 8004c8e:	0002      	movs	r2, r0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d302      	bcc.n	8004ca0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d113      	bne.n	8004cc8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2241      	movs	r2, #65	; 0x41
 8004cb0:	2120      	movs	r1, #32
 8004cb2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2242      	movs	r2, #66	; 0x42
 8004cb8:	2100      	movs	r1, #0
 8004cba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	2100      	movs	r1, #0
 8004cc2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e007      	b.n	8004cd8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699b      	ldr	r3, [r3, #24]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d1cc      	bne.n	8004c70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	0018      	movs	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	b004      	add	sp, #16
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                           uint32_t Tickstart)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cec:	e028      	b.n	8004d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	68b9      	ldr	r1, [r7, #8]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f000 f82f 	bl	8004d58 <I2C_IsAcknowledgeFailed>
 8004cfa:	1e03      	subs	r3, r0, #0
 8004cfc:	d001      	beq.n	8004d02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e026      	b.n	8004d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fe f96b 	bl	8002fdc <HAL_GetTick>
 8004d06:	0002      	movs	r2, r0
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	68ba      	ldr	r2, [r7, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d113      	bne.n	8004d40 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2241      	movs	r2, #65	; 0x41
 8004d28:	2120      	movs	r1, #32
 8004d2a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2242      	movs	r2, #66	; 0x42
 8004d30:	2100      	movs	r1, #0
 8004d32:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2240      	movs	r2, #64	; 0x40
 8004d38:	2100      	movs	r1, #0
 8004d3a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e007      	b.n	8004d50 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2220      	movs	r2, #32
 8004d48:	4013      	ands	r3, r2
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d1cf      	bne.n	8004cee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	0018      	movs	r0, r3
 8004d52:	46bd      	mov	sp, r7
 8004d54:	b004      	add	sp, #16
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	60b9      	str	r1, [r7, #8]
 8004d62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2210      	movs	r2, #16
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b10      	cmp	r3, #16
 8004d70:	d164      	bne.n	8004e3c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	2380      	movs	r3, #128	; 0x80
 8004d7a:	049b      	lsls	r3, r3, #18
 8004d7c:	401a      	ands	r2, r3
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	049b      	lsls	r3, r3, #18
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d02b      	beq.n	8004dde <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2180      	movs	r1, #128	; 0x80
 8004d92:	01c9      	lsls	r1, r1, #7
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d98:	e021      	b.n	8004dde <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	d01e      	beq.n	8004dde <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004da0:	f7fe f91c 	bl	8002fdc <HAL_GetTick>
 8004da4:	0002      	movs	r2, r0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d302      	bcc.n	8004db6 <I2C_IsAcknowledgeFailed+0x5e>
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d113      	bne.n	8004dde <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	2220      	movs	r2, #32
 8004dbc:	431a      	orrs	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2241      	movs	r2, #65	; 0x41
 8004dc6:	2120      	movs	r1, #32
 8004dc8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2242      	movs	r2, #66	; 0x42
 8004dce:	2100      	movs	r1, #0
 8004dd0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2240      	movs	r2, #64	; 0x40
 8004dd6:	2100      	movs	r1, #0
 8004dd8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e02f      	b.n	8004e3e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	699b      	ldr	r3, [r3, #24]
 8004de4:	2220      	movs	r2, #32
 8004de6:	4013      	ands	r3, r2
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d1d6      	bne.n	8004d9a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2210      	movs	r2, #16
 8004df2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	0018      	movs	r0, r3
 8004e00:	f7ff fece 	bl	8004ba0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	490e      	ldr	r1, [pc, #56]	; (8004e48 <I2C_IsAcknowledgeFailed+0xf0>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e18:	2204      	movs	r2, #4
 8004e1a:	431a      	orrs	r2, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2241      	movs	r2, #65	; 0x41
 8004e24:	2120      	movs	r1, #32
 8004e26:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2242      	movs	r2, #66	; 0x42
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2240      	movs	r2, #64	; 0x40
 8004e34:	2100      	movs	r1, #0
 8004e36:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	0018      	movs	r0, r3
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	fe00e800 	.word	0xfe00e800

08004e4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	0008      	movs	r0, r1
 8004e56:	0011      	movs	r1, r2
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	240a      	movs	r4, #10
 8004e5c:	193b      	adds	r3, r7, r4
 8004e5e:	1c02      	adds	r2, r0, #0
 8004e60:	801a      	strh	r2, [r3, #0]
 8004e62:	2009      	movs	r0, #9
 8004e64:	183b      	adds	r3, r7, r0
 8004e66:	1c0a      	adds	r2, r1, #0
 8004e68:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	6a3a      	ldr	r2, [r7, #32]
 8004e72:	0d51      	lsrs	r1, r2, #21
 8004e74:	2280      	movs	r2, #128	; 0x80
 8004e76:	00d2      	lsls	r2, r2, #3
 8004e78:	400a      	ands	r2, r1
 8004e7a:	490e      	ldr	r1, [pc, #56]	; (8004eb4 <I2C_TransferConfig+0x68>)
 8004e7c:	430a      	orrs	r2, r1
 8004e7e:	43d2      	mvns	r2, r2
 8004e80:	401a      	ands	r2, r3
 8004e82:	0011      	movs	r1, r2
 8004e84:	193b      	adds	r3, r7, r4
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	059b      	lsls	r3, r3, #22
 8004e8a:	0d9a      	lsrs	r2, r3, #22
 8004e8c:	183b      	adds	r3, r7, r0
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	0418      	lsls	r0, r3, #16
 8004e92:	23ff      	movs	r3, #255	; 0xff
 8004e94:	041b      	lsls	r3, r3, #16
 8004e96:	4003      	ands	r3, r0
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	431a      	orrs	r2, r3
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                 I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004eaa:	46c0      	nop			; (mov r8, r8)
 8004eac:	46bd      	mov	sp, r7
 8004eae:	b005      	add	sp, #20
 8004eb0:	bd90      	pop	{r4, r7, pc}
 8004eb2:	46c0      	nop			; (mov r8, r8)
 8004eb4:	03ff63ff 	.word	0x03ff63ff

08004eb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2241      	movs	r2, #65	; 0x41
 8004ec6:	5c9b      	ldrb	r3, [r3, r2]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d138      	bne.n	8004f40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2240      	movs	r2, #64	; 0x40
 8004ed2:	5c9b      	ldrb	r3, [r3, r2]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e032      	b.n	8004f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2240      	movs	r2, #64	; 0x40
 8004ee0:	2101      	movs	r1, #1
 8004ee2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2241      	movs	r2, #65	; 0x41
 8004ee8:	2124      	movs	r1, #36	; 0x24
 8004eea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	438a      	bics	r2, r1
 8004efa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4911      	ldr	r1, [pc, #68]	; (8004f4c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004f08:	400a      	ands	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	6819      	ldr	r1, [r3, #0]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2101      	movs	r1, #1
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2241      	movs	r2, #65	; 0x41
 8004f30:	2120      	movs	r1, #32
 8004f32:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2240      	movs	r2, #64	; 0x40
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e000      	b.n	8004f42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f40:	2302      	movs	r3, #2
  }
}
 8004f42:	0018      	movs	r0, r3
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b002      	add	sp, #8
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	ffffefff 	.word	0xffffefff

08004f50 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2241      	movs	r2, #65	; 0x41
 8004f5e:	5c9b      	ldrb	r3, [r3, r2]
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b20      	cmp	r3, #32
 8004f64:	d139      	bne.n	8004fda <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2240      	movs	r2, #64	; 0x40
 8004f6a:	5c9b      	ldrb	r3, [r3, r2]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e033      	b.n	8004fdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2240      	movs	r2, #64	; 0x40
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2241      	movs	r2, #65	; 0x41
 8004f80:	2124      	movs	r1, #36	; 0x24
 8004f82:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	438a      	bics	r2, r1
 8004f92:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4a11      	ldr	r2, [pc, #68]	; (8004fe4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	021b      	lsls	r3, r3, #8
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681a      	ldr	r2, [r3, #0]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	2101      	movs	r1, #1
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2241      	movs	r2, #65	; 0x41
 8004fca:	2120      	movs	r1, #32
 8004fcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	e000      	b.n	8004fdc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004fda:	2302      	movs	r3, #2
  }
}
 8004fdc:	0018      	movs	r0, r3
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	b004      	add	sp, #16
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	fffff0ff 	.word	0xfffff0ff

08004fe8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	0019      	movs	r1, r3
 8004ffa:	4b17      	ldr	r3, [pc, #92]	; (8005058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	430a      	orrs	r2, r1
 8005000:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	2380      	movs	r3, #128	; 0x80
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	429a      	cmp	r2, r3
 800500a:	d11f      	bne.n	800504c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800500c:	4b14      	ldr	r3, [pc, #80]	; (8005060 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	0013      	movs	r3, r2
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	189b      	adds	r3, r3, r2
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	4912      	ldr	r1, [pc, #72]	; (8005064 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800501a:	0018      	movs	r0, r3
 800501c:	f7fb f87a 	bl	8000114 <__udivsi3>
 8005020:	0003      	movs	r3, r0
 8005022:	3301      	adds	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005026:	e008      	b.n	800503a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d003      	beq.n	8005036 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3b01      	subs	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	e001      	b.n	800503a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	e009      	b.n	800504e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800503a:	4b07      	ldr	r3, [pc, #28]	; (8005058 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800503c:	695a      	ldr	r2, [r3, #20]
 800503e:	2380      	movs	r3, #128	; 0x80
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	401a      	ands	r2, r3
 8005044:	2380      	movs	r3, #128	; 0x80
 8005046:	00db      	lsls	r3, r3, #3
 8005048:	429a      	cmp	r2, r3
 800504a:	d0ed      	beq.n	8005028 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	0018      	movs	r0, r3
 8005050:	46bd      	mov	sp, r7
 8005052:	b004      	add	sp, #16
 8005054:	bd80      	pop	{r7, pc}
 8005056:	46c0      	nop			; (mov r8, r8)
 8005058:	40007000 	.word	0x40007000
 800505c:	fffff9ff 	.word	0xfffff9ff
 8005060:	20000000 	.word	0x20000000
 8005064:	000f4240 	.word	0x000f4240

08005068 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <LL_RCC_GetAPB1Prescaler+0x14>)
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	23e0      	movs	r3, #224	; 0xe0
 8005072:	01db      	lsls	r3, r3, #7
 8005074:	4013      	ands	r3, r2
}
 8005076:	0018      	movs	r0, r3
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40021000 	.word	0x40021000

08005080 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b088      	sub	sp, #32
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e2f9      	b.n	8005686 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	2201      	movs	r2, #1
 8005098:	4013      	ands	r3, r2
 800509a:	d100      	bne.n	800509e <HAL_RCC_OscConfig+0x1e>
 800509c:	e07c      	b.n	8005198 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800509e:	4bc3      	ldr	r3, [pc, #780]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	2238      	movs	r2, #56	; 0x38
 80050a4:	4013      	ands	r3, r2
 80050a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050a8:	4bc0      	ldr	r3, [pc, #768]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	2203      	movs	r2, #3
 80050ae:	4013      	ands	r3, r2
 80050b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	2b10      	cmp	r3, #16
 80050b6:	d102      	bne.n	80050be <HAL_RCC_OscConfig+0x3e>
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	2b03      	cmp	r3, #3
 80050bc:	d002      	beq.n	80050c4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	2b08      	cmp	r3, #8
 80050c2:	d10b      	bne.n	80050dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c4:	4bb9      	ldr	r3, [pc, #740]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	2380      	movs	r3, #128	; 0x80
 80050ca:	029b      	lsls	r3, r3, #10
 80050cc:	4013      	ands	r3, r2
 80050ce:	d062      	beq.n	8005196 <HAL_RCC_OscConfig+0x116>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d15e      	bne.n	8005196 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e2d4      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685a      	ldr	r2, [r3, #4]
 80050e0:	2380      	movs	r3, #128	; 0x80
 80050e2:	025b      	lsls	r3, r3, #9
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d107      	bne.n	80050f8 <HAL_RCC_OscConfig+0x78>
 80050e8:	4bb0      	ldr	r3, [pc, #704]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4baf      	ldr	r3, [pc, #700]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	0249      	lsls	r1, r1, #9
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
 80050f6:	e020      	b.n	800513a <HAL_RCC_OscConfig+0xba>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	23a0      	movs	r3, #160	; 0xa0
 80050fe:	02db      	lsls	r3, r3, #11
 8005100:	429a      	cmp	r2, r3
 8005102:	d10e      	bne.n	8005122 <HAL_RCC_OscConfig+0xa2>
 8005104:	4ba9      	ldr	r3, [pc, #676]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4ba8      	ldr	r3, [pc, #672]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800510a:	2180      	movs	r1, #128	; 0x80
 800510c:	02c9      	lsls	r1, r1, #11
 800510e:	430a      	orrs	r2, r1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	4ba6      	ldr	r3, [pc, #664]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	4ba5      	ldr	r3, [pc, #660]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005118:	2180      	movs	r1, #128	; 0x80
 800511a:	0249      	lsls	r1, r1, #9
 800511c:	430a      	orrs	r2, r1
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	e00b      	b.n	800513a <HAL_RCC_OscConfig+0xba>
 8005122:	4ba2      	ldr	r3, [pc, #648]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	4ba1      	ldr	r3, [pc, #644]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005128:	49a1      	ldr	r1, [pc, #644]	; (80053b0 <HAL_RCC_OscConfig+0x330>)
 800512a:	400a      	ands	r2, r1
 800512c:	601a      	str	r2, [r3, #0]
 800512e:	4b9f      	ldr	r3, [pc, #636]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4b9e      	ldr	r3, [pc, #632]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005134:	499f      	ldr	r1, [pc, #636]	; (80053b4 <HAL_RCC_OscConfig+0x334>)
 8005136:	400a      	ands	r2, r1
 8005138:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d014      	beq.n	800516c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005142:	f7fd ff4b 	bl	8002fdc <HAL_GetTick>
 8005146:	0003      	movs	r3, r0
 8005148:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800514c:	f7fd ff46 	bl	8002fdc <HAL_GetTick>
 8005150:	0002      	movs	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b64      	cmp	r3, #100	; 0x64
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e293      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800515e:	4b93      	ldr	r3, [pc, #588]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	2380      	movs	r3, #128	; 0x80
 8005164:	029b      	lsls	r3, r3, #10
 8005166:	4013      	ands	r3, r2
 8005168:	d0f0      	beq.n	800514c <HAL_RCC_OscConfig+0xcc>
 800516a:	e015      	b.n	8005198 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fd ff36 	bl	8002fdc <HAL_GetTick>
 8005170:	0003      	movs	r3, r0
 8005172:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005174:	e008      	b.n	8005188 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005176:	f7fd ff31 	bl	8002fdc <HAL_GetTick>
 800517a:	0002      	movs	r2, r0
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b64      	cmp	r3, #100	; 0x64
 8005182:	d901      	bls.n	8005188 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005184:	2303      	movs	r3, #3
 8005186:	e27e      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005188:	4b88      	ldr	r3, [pc, #544]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	029b      	lsls	r3, r3, #10
 8005190:	4013      	ands	r3, r2
 8005192:	d1f0      	bne.n	8005176 <HAL_RCC_OscConfig+0xf6>
 8005194:	e000      	b.n	8005198 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005196:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2202      	movs	r2, #2
 800519e:	4013      	ands	r3, r2
 80051a0:	d100      	bne.n	80051a4 <HAL_RCC_OscConfig+0x124>
 80051a2:	e099      	b.n	80052d8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051a4:	4b81      	ldr	r3, [pc, #516]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2238      	movs	r2, #56	; 0x38
 80051aa:	4013      	ands	r3, r2
 80051ac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80051ae:	4b7f      	ldr	r3, [pc, #508]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4013      	ands	r3, r2
 80051b6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80051b8:	69bb      	ldr	r3, [r7, #24]
 80051ba:	2b10      	cmp	r3, #16
 80051bc:	d102      	bne.n	80051c4 <HAL_RCC_OscConfig+0x144>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d002      	beq.n	80051ca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d135      	bne.n	8005236 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051ca:	4b78      	ldr	r3, [pc, #480]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	00db      	lsls	r3, r3, #3
 80051d2:	4013      	ands	r3, r2
 80051d4:	d005      	beq.n	80051e2 <HAL_RCC_OscConfig+0x162>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d101      	bne.n	80051e2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e251      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051e2:	4b72      	ldr	r3, [pc, #456]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	4a74      	ldr	r2, [pc, #464]	; (80053b8 <HAL_RCC_OscConfig+0x338>)
 80051e8:	4013      	ands	r3, r2
 80051ea:	0019      	movs	r1, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	695b      	ldr	r3, [r3, #20]
 80051f0:	021a      	lsls	r2, r3, #8
 80051f2:	4b6e      	ldr	r3, [pc, #440]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80051f4:	430a      	orrs	r2, r1
 80051f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051f8:	69bb      	ldr	r3, [r7, #24]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d112      	bne.n	8005224 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80051fe:	4b6b      	ldr	r3, [pc, #428]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a6e      	ldr	r2, [pc, #440]	; (80053bc <HAL_RCC_OscConfig+0x33c>)
 8005204:	4013      	ands	r3, r2
 8005206:	0019      	movs	r1, r3
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	691a      	ldr	r2, [r3, #16]
 800520c:	4b67      	ldr	r3, [pc, #412]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800520e:	430a      	orrs	r2, r1
 8005210:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8005212:	4b66      	ldr	r3, [pc, #408]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0adb      	lsrs	r3, r3, #11
 8005218:	2207      	movs	r2, #7
 800521a:	4013      	ands	r3, r2
 800521c:	4a68      	ldr	r2, [pc, #416]	; (80053c0 <HAL_RCC_OscConfig+0x340>)
 800521e:	40da      	lsrs	r2, r3
 8005220:	4b68      	ldr	r3, [pc, #416]	; (80053c4 <HAL_RCC_OscConfig+0x344>)
 8005222:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005224:	4b68      	ldr	r3, [pc, #416]	; (80053c8 <HAL_RCC_OscConfig+0x348>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	0018      	movs	r0, r3
 800522a:	f7fd fe7b 	bl	8002f24 <HAL_InitTick>
 800522e:	1e03      	subs	r3, r0, #0
 8005230:	d051      	beq.n	80052d6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e227      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d030      	beq.n	80052a0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800523e:	4b5b      	ldr	r3, [pc, #364]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a5e      	ldr	r2, [pc, #376]	; (80053bc <HAL_RCC_OscConfig+0x33c>)
 8005244:	4013      	ands	r3, r2
 8005246:	0019      	movs	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	691a      	ldr	r2, [r3, #16]
 800524c:	4b57      	ldr	r3, [pc, #348]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800524e:	430a      	orrs	r2, r1
 8005250:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8005252:	4b56      	ldr	r3, [pc, #344]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b55      	ldr	r3, [pc, #340]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	0049      	lsls	r1, r1, #1
 800525c:	430a      	orrs	r2, r1
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005260:	f7fd febc 	bl	8002fdc <HAL_GetTick>
 8005264:	0003      	movs	r3, r0
 8005266:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005268:	e008      	b.n	800527c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800526a:	f7fd feb7 	bl	8002fdc <HAL_GetTick>
 800526e:	0002      	movs	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	2b02      	cmp	r3, #2
 8005276:	d901      	bls.n	800527c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8005278:	2303      	movs	r3, #3
 800527a:	e204      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800527c:	4b4b      	ldr	r3, [pc, #300]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	2380      	movs	r3, #128	; 0x80
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4013      	ands	r3, r2
 8005286:	d0f0      	beq.n	800526a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005288:	4b48      	ldr	r3, [pc, #288]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a4a      	ldr	r2, [pc, #296]	; (80053b8 <HAL_RCC_OscConfig+0x338>)
 800528e:	4013      	ands	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	021a      	lsls	r2, r3, #8
 8005298:	4b44      	ldr	r3, [pc, #272]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	e01b      	b.n	80052d8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80052a0:	4b42      	ldr	r3, [pc, #264]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	4b41      	ldr	r3, [pc, #260]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80052a6:	4949      	ldr	r1, [pc, #292]	; (80053cc <HAL_RCC_OscConfig+0x34c>)
 80052a8:	400a      	ands	r2, r1
 80052aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ac:	f7fd fe96 	bl	8002fdc <HAL_GetTick>
 80052b0:	0003      	movs	r3, r0
 80052b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b4:	e008      	b.n	80052c8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052b6:	f7fd fe91 	bl	8002fdc <HAL_GetTick>
 80052ba:	0002      	movs	r2, r0
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d901      	bls.n	80052c8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e1de      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c8:	4b38      	ldr	r3, [pc, #224]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	2380      	movs	r3, #128	; 0x80
 80052ce:	00db      	lsls	r3, r3, #3
 80052d0:	4013      	ands	r3, r2
 80052d2:	d1f0      	bne.n	80052b6 <HAL_RCC_OscConfig+0x236>
 80052d4:	e000      	b.n	80052d8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	4013      	ands	r3, r2
 80052e0:	d047      	beq.n	8005372 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80052e2:	4b32      	ldr	r3, [pc, #200]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	2238      	movs	r2, #56	; 0x38
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b18      	cmp	r3, #24
 80052ec:	d10a      	bne.n	8005304 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 80052f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f2:	2202      	movs	r2, #2
 80052f4:	4013      	ands	r3, r2
 80052f6:	d03c      	beq.n	8005372 <HAL_RCC_OscConfig+0x2f2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d138      	bne.n	8005372 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005300:	2301      	movs	r3, #1
 8005302:	e1c0      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d019      	beq.n	8005340 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800530e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005310:	4b26      	ldr	r3, [pc, #152]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005312:	2101      	movs	r1, #1
 8005314:	430a      	orrs	r2, r1
 8005316:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005318:	f7fd fe60 	bl	8002fdc <HAL_GetTick>
 800531c:	0003      	movs	r3, r0
 800531e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005320:	e008      	b.n	8005334 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005322:	f7fd fe5b 	bl	8002fdc <HAL_GetTick>
 8005326:	0002      	movs	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	2b02      	cmp	r3, #2
 800532e:	d901      	bls.n	8005334 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005330:	2303      	movs	r3, #3
 8005332:	e1a8      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005334:	4b1d      	ldr	r3, [pc, #116]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005336:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005338:	2202      	movs	r2, #2
 800533a:	4013      	ands	r3, r2
 800533c:	d0f1      	beq.n	8005322 <HAL_RCC_OscConfig+0x2a2>
 800533e:	e018      	b.n	8005372 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8005340:	4b1a      	ldr	r3, [pc, #104]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005342:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005344:	4b19      	ldr	r3, [pc, #100]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800534c:	f7fd fe46 	bl	8002fdc <HAL_GetTick>
 8005350:	0003      	movs	r3, r0
 8005352:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005356:	f7fd fe41 	bl	8002fdc <HAL_GetTick>
 800535a:	0002      	movs	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b02      	cmp	r3, #2
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e18e      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 800536a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800536c:	2202      	movs	r2, #2
 800536e:	4013      	ands	r3, r2
 8005370:	d1f1      	bne.n	8005356 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2204      	movs	r2, #4
 8005378:	4013      	ands	r3, r2
 800537a:	d100      	bne.n	800537e <HAL_RCC_OscConfig+0x2fe>
 800537c:	e0c6      	b.n	800550c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800537e:	231f      	movs	r3, #31
 8005380:	18fb      	adds	r3, r7, r3
 8005382:	2200      	movs	r2, #0
 8005384:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	2238      	movs	r2, #56	; 0x38
 800538c:	4013      	ands	r3, r2
 800538e:	2b20      	cmp	r3, #32
 8005390:	d11e      	bne.n	80053d0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8005392:	4b06      	ldr	r3, [pc, #24]	; (80053ac <HAL_RCC_OscConfig+0x32c>)
 8005394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005396:	2202      	movs	r2, #2
 8005398:	4013      	ands	r3, r2
 800539a:	d100      	bne.n	800539e <HAL_RCC_OscConfig+0x31e>
 800539c:	e0b6      	b.n	800550c <HAL_RCC_OscConfig+0x48c>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d000      	beq.n	80053a8 <HAL_RCC_OscConfig+0x328>
 80053a6:	e0b1      	b.n	800550c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e16c      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
 80053ac:	40021000 	.word	0x40021000
 80053b0:	fffeffff 	.word	0xfffeffff
 80053b4:	fffbffff 	.word	0xfffbffff
 80053b8:	ffff80ff 	.word	0xffff80ff
 80053bc:	ffffc7ff 	.word	0xffffc7ff
 80053c0:	00f42400 	.word	0x00f42400
 80053c4:	20000000 	.word	0x20000000
 80053c8:	20000004 	.word	0x20000004
 80053cc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053d0:	4baf      	ldr	r3, [pc, #700]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80053d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	055b      	lsls	r3, r3, #21
 80053d8:	4013      	ands	r3, r2
 80053da:	d101      	bne.n	80053e0 <HAL_RCC_OscConfig+0x360>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <HAL_RCC_OscConfig+0x362>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d011      	beq.n	800540a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80053e6:	4baa      	ldr	r3, [pc, #680]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80053e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ea:	4ba9      	ldr	r3, [pc, #676]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80053ec:	2180      	movs	r1, #128	; 0x80
 80053ee:	0549      	lsls	r1, r1, #21
 80053f0:	430a      	orrs	r2, r1
 80053f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80053f4:	4ba6      	ldr	r3, [pc, #664]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80053f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	055b      	lsls	r3, r3, #21
 80053fc:	4013      	ands	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005402:	231f      	movs	r3, #31
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800540a:	4ba2      	ldr	r3, [pc, #648]	; (8005694 <HAL_RCC_OscConfig+0x614>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	005b      	lsls	r3, r3, #1
 8005412:	4013      	ands	r3, r2
 8005414:	d11a      	bne.n	800544c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005416:	4b9f      	ldr	r3, [pc, #636]	; (8005694 <HAL_RCC_OscConfig+0x614>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b9e      	ldr	r3, [pc, #632]	; (8005694 <HAL_RCC_OscConfig+0x614>)
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	0049      	lsls	r1, r1, #1
 8005420:	430a      	orrs	r2, r1
 8005422:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005424:	f7fd fdda 	bl	8002fdc <HAL_GetTick>
 8005428:	0003      	movs	r3, r0
 800542a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800542c:	e008      	b.n	8005440 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800542e:	f7fd fdd5 	bl	8002fdc <HAL_GetTick>
 8005432:	0002      	movs	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d901      	bls.n	8005440 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e122      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005440:	4b94      	ldr	r3, [pc, #592]	; (8005694 <HAL_RCC_OscConfig+0x614>)
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	4013      	ands	r3, r2
 800544a:	d0f0      	beq.n	800542e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	2b01      	cmp	r3, #1
 8005452:	d106      	bne.n	8005462 <HAL_RCC_OscConfig+0x3e2>
 8005454:	4b8e      	ldr	r3, [pc, #568]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005456:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005458:	4b8d      	ldr	r3, [pc, #564]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800545a:	2101      	movs	r1, #1
 800545c:	430a      	orrs	r2, r1
 800545e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005460:	e01c      	b.n	800549c <HAL_RCC_OscConfig+0x41c>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	2b05      	cmp	r3, #5
 8005468:	d10c      	bne.n	8005484 <HAL_RCC_OscConfig+0x404>
 800546a:	4b89      	ldr	r3, [pc, #548]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800546c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800546e:	4b88      	ldr	r3, [pc, #544]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005470:	2104      	movs	r1, #4
 8005472:	430a      	orrs	r2, r1
 8005474:	65da      	str	r2, [r3, #92]	; 0x5c
 8005476:	4b86      	ldr	r3, [pc, #536]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005478:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800547a:	4b85      	ldr	r3, [pc, #532]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800547c:	2101      	movs	r1, #1
 800547e:	430a      	orrs	r2, r1
 8005480:	65da      	str	r2, [r3, #92]	; 0x5c
 8005482:	e00b      	b.n	800549c <HAL_RCC_OscConfig+0x41c>
 8005484:	4b82      	ldr	r3, [pc, #520]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005488:	4b81      	ldr	r3, [pc, #516]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800548a:	2101      	movs	r1, #1
 800548c:	438a      	bics	r2, r1
 800548e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005490:	4b7f      	ldr	r3, [pc, #508]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005492:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005494:	4b7e      	ldr	r3, [pc, #504]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005496:	2104      	movs	r1, #4
 8005498:	438a      	bics	r2, r1
 800549a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d014      	beq.n	80054ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054a4:	f7fd fd9a 	bl	8002fdc <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054ac:	e009      	b.n	80054c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054ae:	f7fd fd95 	bl	8002fdc <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	4a77      	ldr	r2, [pc, #476]	; (8005698 <HAL_RCC_OscConfig+0x618>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e0e1      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c2:	4b73      	ldr	r3, [pc, #460]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80054c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c6:	2202      	movs	r2, #2
 80054c8:	4013      	ands	r3, r2
 80054ca:	d0f0      	beq.n	80054ae <HAL_RCC_OscConfig+0x42e>
 80054cc:	e013      	b.n	80054f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054ce:	f7fd fd85 	bl	8002fdc <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054d6:	e009      	b.n	80054ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d8:	f7fd fd80 	bl	8002fdc <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4a6d      	ldr	r2, [pc, #436]	; (8005698 <HAL_RCC_OscConfig+0x618>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e0cc      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054ec:	4b68      	ldr	r3, [pc, #416]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80054ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054f0:	2202      	movs	r2, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80054f6:	231f      	movs	r3, #31
 80054f8:	18fb      	adds	r3, r7, r3
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d105      	bne.n	800550c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005500:	4b63      	ldr	r3, [pc, #396]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005504:	4b62      	ldr	r3, [pc, #392]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005506:	4965      	ldr	r1, [pc, #404]	; (800569c <HAL_RCC_OscConfig+0x61c>)
 8005508:	400a      	ands	r2, r1
 800550a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d100      	bne.n	8005516 <HAL_RCC_OscConfig+0x496>
 8005514:	e0b6      	b.n	8005684 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005516:	4b5e      	ldr	r3, [pc, #376]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	2238      	movs	r2, #56	; 0x38
 800551c:	4013      	ands	r3, r2
 800551e:	2b10      	cmp	r3, #16
 8005520:	d100      	bne.n	8005524 <HAL_RCC_OscConfig+0x4a4>
 8005522:	e07e      	b.n	8005622 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d153      	bne.n	80055d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800552c:	4b58      	ldr	r3, [pc, #352]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005532:	495b      	ldr	r1, [pc, #364]	; (80056a0 <HAL_RCC_OscConfig+0x620>)
 8005534:	400a      	ands	r2, r1
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fd fd50 	bl	8002fdc <HAL_GetTick>
 800553c:	0003      	movs	r3, r0
 800553e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005540:	e008      	b.n	8005554 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005542:	f7fd fd4b 	bl	8002fdc <HAL_GetTick>
 8005546:	0002      	movs	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	2b02      	cmp	r3, #2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e098      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005554:	4b4e      	ldr	r3, [pc, #312]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	2380      	movs	r3, #128	; 0x80
 800555a:	049b      	lsls	r3, r3, #18
 800555c:	4013      	ands	r3, r2
 800555e:	d1f0      	bne.n	8005542 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005560:	4b4b      	ldr	r3, [pc, #300]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	4a4f      	ldr	r2, [pc, #316]	; (80056a4 <HAL_RCC_OscConfig+0x624>)
 8005566:	4013      	ands	r3, r2
 8005568:	0019      	movs	r1, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1a      	ldr	r2, [r3, #32]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005578:	021b      	lsls	r3, r3, #8
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005580:	431a      	orrs	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	431a      	orrs	r2, r3
 8005588:	4b41      	ldr	r3, [pc, #260]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800558a:	430a      	orrs	r2, r1
 800558c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif /* RCC_PLLQ_SUPPORT */
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800558e:	4b40      	ldr	r3, [pc, #256]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005594:	2180      	movs	r1, #128	; 0x80
 8005596:	0449      	lsls	r1, r1, #17
 8005598:	430a      	orrs	r2, r1
 800559a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800559c:	4b3c      	ldr	r3, [pc, #240]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	4b3b      	ldr	r3, [pc, #236]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055a2:	2180      	movs	r1, #128	; 0x80
 80055a4:	0549      	lsls	r1, r1, #21
 80055a6:	430a      	orrs	r2, r1
 80055a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fd fd17 	bl	8002fdc <HAL_GetTick>
 80055ae:	0003      	movs	r3, r0
 80055b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055b4:	f7fd fd12 	bl	8002fdc <HAL_GetTick>
 80055b8:	0002      	movs	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e05f      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055c6:	4b32      	ldr	r3, [pc, #200]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	049b      	lsls	r3, r3, #18
 80055ce:	4013      	ands	r3, r2
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0x534>
 80055d2:	e057      	b.n	8005684 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055d4:	4b2e      	ldr	r3, [pc, #184]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b2d      	ldr	r3, [pc, #180]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055da:	4931      	ldr	r1, [pc, #196]	; (80056a0 <HAL_RCC_OscConfig+0x620>)
 80055dc:	400a      	ands	r2, r1
 80055de:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 80055e0:	4b2b      	ldr	r3, [pc, #172]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	4b2a      	ldr	r3, [pc, #168]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055e6:	2103      	movs	r1, #3
 80055e8:	438a      	bics	r2, r1
 80055ea:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80055ec:	4b28      	ldr	r3, [pc, #160]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055ee:	68da      	ldr	r2, [r3, #12]
 80055f0:	4b27      	ldr	r3, [pc, #156]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 80055f2:	492d      	ldr	r1, [pc, #180]	; (80056a8 <HAL_RCC_OscConfig+0x628>)
 80055f4:	400a      	ands	r2, r1
 80055f6:	60da      	str	r2, [r3, #12]
#endif /* RCC_PLLQ_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f8:	f7fd fcf0 	bl	8002fdc <HAL_GetTick>
 80055fc:	0003      	movs	r3, r0
 80055fe:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005600:	e008      	b.n	8005614 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005602:	f7fd fceb 	bl	8002fdc <HAL_GetTick>
 8005606:	0002      	movs	r2, r0
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	2b02      	cmp	r3, #2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e038      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005614:	4b1e      	ldr	r3, [pc, #120]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	2380      	movs	r3, #128	; 0x80
 800561a:	049b      	lsls	r3, r3, #18
 800561c:	4013      	ands	r3, r2
 800561e:	d1f0      	bne.n	8005602 <HAL_RCC_OscConfig+0x582>
 8005620:	e030      	b.n	8005684 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d101      	bne.n	800562e <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	e02b      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800562e:	4b18      	ldr	r3, [pc, #96]	; (8005690 <HAL_RCC_OscConfig+0x610>)
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2203      	movs	r2, #3
 8005638:	401a      	ands	r2, r3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	429a      	cmp	r2, r3
 8005640:	d11e      	bne.n	8005680 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	2270      	movs	r2, #112	; 0x70
 8005646:	401a      	ands	r2, r3
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800564c:	429a      	cmp	r2, r3
 800564e:	d117      	bne.n	8005680 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005650:	697a      	ldr	r2, [r7, #20]
 8005652:	23fe      	movs	r3, #254	; 0xfe
 8005654:	01db      	lsls	r3, r3, #7
 8005656:	401a      	ands	r2, r3
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800565e:	429a      	cmp	r2, r3
 8005660:	d10e      	bne.n	8005680 <HAL_RCC_OscConfig+0x600>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	23f8      	movs	r3, #248	; 0xf8
 8005666:	039b      	lsls	r3, r3, #14
 8005668:	401a      	ands	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800566e:	429a      	cmp	r2, r3
 8005670:	d106      	bne.n	8005680 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005672:	697b      	ldr	r3, [r7, #20]
 8005674:	0f5b      	lsrs	r3, r3, #29
 8005676:	075a      	lsls	r2, r3, #29
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800567c:	429a      	cmp	r2, r3
 800567e:	d001      	beq.n	8005684 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e000      	b.n	8005686 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	0018      	movs	r0, r3
 8005688:	46bd      	mov	sp, r7
 800568a:	b008      	add	sp, #32
 800568c:	bd80      	pop	{r7, pc}
 800568e:	46c0      	nop			; (mov r8, r8)
 8005690:	40021000 	.word	0x40021000
 8005694:	40007000 	.word	0x40007000
 8005698:	00001388 	.word	0x00001388
 800569c:	efffffff 	.word	0xefffffff
 80056a0:	feffffff 	.word	0xfeffffff
 80056a4:	1fc1808c 	.word	0x1fc1808c
 80056a8:	effeffff 	.word	0xeffeffff

080056ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e0e9      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80056c0:	4b76      	ldr	r3, [pc, #472]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	2207      	movs	r2, #7
 80056c6:	4013      	ands	r3, r2
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d91e      	bls.n	800570c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b73      	ldr	r3, [pc, #460]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2207      	movs	r2, #7
 80056d4:	4393      	bics	r3, r2
 80056d6:	0019      	movs	r1, r3
 80056d8:	4b70      	ldr	r3, [pc, #448]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 80056da:	683a      	ldr	r2, [r7, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056e0:	f7fd fc7c 	bl	8002fdc <HAL_GetTick>
 80056e4:	0003      	movs	r3, r0
 80056e6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056e8:	e009      	b.n	80056fe <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056ea:	f7fd fc77 	bl	8002fdc <HAL_GetTick>
 80056ee:	0002      	movs	r2, r0
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	4a6a      	ldr	r2, [pc, #424]	; (80058a0 <HAL_RCC_ClockConfig+0x1f4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d901      	bls.n	80056fe <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	e0ca      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80056fe:	4b67      	ldr	r3, [pc, #412]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	2207      	movs	r2, #7
 8005704:	4013      	ands	r3, r2
 8005706:	683a      	ldr	r2, [r7, #0]
 8005708:	429a      	cmp	r2, r3
 800570a:	d1ee      	bne.n	80056ea <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2202      	movs	r2, #2
 8005712:	4013      	ands	r3, r2
 8005714:	d015      	beq.n	8005742 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2204      	movs	r2, #4
 800571c:	4013      	ands	r3, r2
 800571e:	d006      	beq.n	800572e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005720:	4b60      	ldr	r3, [pc, #384]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	4b5f      	ldr	r3, [pc, #380]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005726:	21e0      	movs	r1, #224	; 0xe0
 8005728:	01c9      	lsls	r1, r1, #7
 800572a:	430a      	orrs	r2, r1
 800572c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572e:	4b5d      	ldr	r3, [pc, #372]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	4a5d      	ldr	r2, [pc, #372]	; (80058a8 <HAL_RCC_ClockConfig+0x1fc>)
 8005734:	4013      	ands	r3, r2
 8005736:	0019      	movs	r1, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 800573e:	430a      	orrs	r2, r1
 8005740:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2201      	movs	r2, #1
 8005748:	4013      	ands	r3, r2
 800574a:	d057      	beq.n	80057fc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d107      	bne.n	8005764 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005754:	4b53      	ldr	r3, [pc, #332]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	2380      	movs	r3, #128	; 0x80
 800575a:	029b      	lsls	r3, r3, #10
 800575c:	4013      	ands	r3, r2
 800575e:	d12b      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005760:	2301      	movs	r3, #1
 8005762:	e097      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	2b02      	cmp	r3, #2
 800576a:	d107      	bne.n	800577c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800576c:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	2380      	movs	r3, #128	; 0x80
 8005772:	049b      	lsls	r3, r3, #18
 8005774:	4013      	ands	r3, r2
 8005776:	d11f      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005778:	2301      	movs	r3, #1
 800577a:	e08b      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d107      	bne.n	8005794 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005784:	4b47      	ldr	r3, [pc, #284]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2380      	movs	r3, #128	; 0x80
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4013      	ands	r3, r2
 800578e:	d113      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e07f      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d106      	bne.n	80057aa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579c:	4b41      	ldr	r3, [pc, #260]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	2202      	movs	r2, #2
 80057a2:	4013      	ands	r3, r2
 80057a4:	d108      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e074      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057aa:	4b3e      	ldr	r3, [pc, #248]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ae:	2202      	movs	r2, #2
 80057b0:	4013      	ands	r3, r2
 80057b2:	d101      	bne.n	80057b8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e06d      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80057b8:	4b3a      	ldr	r3, [pc, #232]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2207      	movs	r2, #7
 80057be:	4393      	bics	r3, r2
 80057c0:	0019      	movs	r1, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685a      	ldr	r2, [r3, #4]
 80057c6:	4b37      	ldr	r3, [pc, #220]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 80057c8:	430a      	orrs	r2, r1
 80057ca:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057cc:	f7fd fc06 	bl	8002fdc <HAL_GetTick>
 80057d0:	0003      	movs	r3, r0
 80057d2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057d4:	e009      	b.n	80057ea <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057d6:	f7fd fc01 	bl	8002fdc <HAL_GetTick>
 80057da:	0002      	movs	r2, r0
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	4a2f      	ldr	r2, [pc, #188]	; (80058a0 <HAL_RCC_ClockConfig+0x1f4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e054      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057ea:	4b2e      	ldr	r3, [pc, #184]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	2238      	movs	r2, #56	; 0x38
 80057f0:	401a      	ands	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	00db      	lsls	r3, r3, #3
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d1ec      	bne.n	80057d6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80057fc:	4b27      	ldr	r3, [pc, #156]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2207      	movs	r2, #7
 8005802:	4013      	ands	r3, r2
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	429a      	cmp	r2, r3
 8005808:	d21e      	bcs.n	8005848 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800580a:	4b24      	ldr	r3, [pc, #144]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2207      	movs	r2, #7
 8005810:	4393      	bics	r3, r2
 8005812:	0019      	movs	r1, r3
 8005814:	4b21      	ldr	r3, [pc, #132]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800581c:	f7fd fbde 	bl	8002fdc <HAL_GetTick>
 8005820:	0003      	movs	r3, r0
 8005822:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005824:	e009      	b.n	800583a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005826:	f7fd fbd9 	bl	8002fdc <HAL_GetTick>
 800582a:	0002      	movs	r2, r0
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	4a1b      	ldr	r2, [pc, #108]	; (80058a0 <HAL_RCC_ClockConfig+0x1f4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d901      	bls.n	800583a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e02c      	b.n	8005894 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800583a:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_RCC_ClockConfig+0x1f0>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2207      	movs	r2, #7
 8005840:	4013      	ands	r3, r2
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	429a      	cmp	r2, r3
 8005846:	d1ee      	bne.n	8005826 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2204      	movs	r2, #4
 800584e:	4013      	ands	r3, r2
 8005850:	d009      	beq.n	8005866 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005852:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <HAL_RCC_ClockConfig+0x200>)
 8005858:	4013      	ands	r3, r2
 800585a:	0019      	movs	r1, r3
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	4b10      	ldr	r3, [pc, #64]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 8005862:	430a      	orrs	r2, r1
 8005864:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005866:	f000 f829 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800586a:	0001      	movs	r1, r0
 800586c:	4b0d      	ldr	r3, [pc, #52]	; (80058a4 <HAL_RCC_ClockConfig+0x1f8>)
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	0a1b      	lsrs	r3, r3, #8
 8005872:	220f      	movs	r2, #15
 8005874:	401a      	ands	r2, r3
 8005876:	4b0e      	ldr	r3, [pc, #56]	; (80058b0 <HAL_RCC_ClockConfig+0x204>)
 8005878:	0092      	lsls	r2, r2, #2
 800587a:	58d3      	ldr	r3, [r2, r3]
 800587c:	221f      	movs	r2, #31
 800587e:	4013      	ands	r3, r2
 8005880:	000a      	movs	r2, r1
 8005882:	40da      	lsrs	r2, r3
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCC_ClockConfig+0x208>)
 8005886:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005888:	4b0b      	ldr	r3, [pc, #44]	; (80058b8 <HAL_RCC_ClockConfig+0x20c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	0018      	movs	r0, r3
 800588e:	f7fd fb49 	bl	8002f24 <HAL_InitTick>
 8005892:	0003      	movs	r3, r0
}
 8005894:	0018      	movs	r0, r3
 8005896:	46bd      	mov	sp, r7
 8005898:	b004      	add	sp, #16
 800589a:	bd80      	pop	{r7, pc}
 800589c:	40022000 	.word	0x40022000
 80058a0:	00001388 	.word	0x00001388
 80058a4:	40021000 	.word	0x40021000
 80058a8:	fffff0ff 	.word	0xfffff0ff
 80058ac:	ffff8fff 	.word	0xffff8fff
 80058b0:	080091b8 	.word	0x080091b8
 80058b4:	20000000 	.word	0x20000000
 80058b8:	20000004 	.word	0x20000004

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80058c2:	4b3c      	ldr	r3, [pc, #240]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2238      	movs	r2, #56	; 0x38
 80058c8:	4013      	ands	r3, r2
 80058ca:	d10f      	bne.n	80058ec <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80058cc:	4b39      	ldr	r3, [pc, #228]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	0adb      	lsrs	r3, r3, #11
 80058d2:	2207      	movs	r2, #7
 80058d4:	4013      	ands	r3, r2
 80058d6:	2201      	movs	r2, #1
 80058d8:	409a      	lsls	r2, r3
 80058da:	0013      	movs	r3, r2
 80058dc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80058de:	6839      	ldr	r1, [r7, #0]
 80058e0:	4835      	ldr	r0, [pc, #212]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 80058e2:	f7fa fc17 	bl	8000114 <__udivsi3>
 80058e6:	0003      	movs	r3, r0
 80058e8:	613b      	str	r3, [r7, #16]
 80058ea:	e05d      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80058ec:	4b31      	ldr	r3, [pc, #196]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	2238      	movs	r2, #56	; 0x38
 80058f2:	4013      	ands	r3, r2
 80058f4:	2b08      	cmp	r3, #8
 80058f6:	d102      	bne.n	80058fe <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80058f8:	4b30      	ldr	r3, [pc, #192]	; (80059bc <HAL_RCC_GetSysClockFreq+0x100>)
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	e054      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058fe:	4b2d      	ldr	r3, [pc, #180]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	2238      	movs	r2, #56	; 0x38
 8005904:	4013      	ands	r3, r2
 8005906:	2b10      	cmp	r3, #16
 8005908:	d138      	bne.n	800597c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800590a:	4b2a      	ldr	r3, [pc, #168]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	2203      	movs	r2, #3
 8005910:	4013      	ands	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005914:	4b27      	ldr	r3, [pc, #156]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	091b      	lsrs	r3, r3, #4
 800591a:	2207      	movs	r2, #7
 800591c:	4013      	ands	r3, r2
 800591e:	3301      	adds	r3, #1
 8005920:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2b03      	cmp	r3, #3
 8005926:	d10d      	bne.n	8005944 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005928:	68b9      	ldr	r1, [r7, #8]
 800592a:	4824      	ldr	r0, [pc, #144]	; (80059bc <HAL_RCC_GetSysClockFreq+0x100>)
 800592c:	f7fa fbf2 	bl	8000114 <__udivsi3>
 8005930:	0003      	movs	r3, r0
 8005932:	0019      	movs	r1, r3
 8005934:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	227f      	movs	r2, #127	; 0x7f
 800593c:	4013      	ands	r3, r2
 800593e:	434b      	muls	r3, r1
 8005940:	617b      	str	r3, [r7, #20]
        break;
 8005942:	e00d      	b.n	8005960 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	481c      	ldr	r0, [pc, #112]	; (80059b8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005948:	f7fa fbe4 	bl	8000114 <__udivsi3>
 800594c:	0003      	movs	r3, r0
 800594e:	0019      	movs	r1, r3
 8005950:	4b18      	ldr	r3, [pc, #96]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	0a1b      	lsrs	r3, r3, #8
 8005956:	227f      	movs	r2, #127	; 0x7f
 8005958:	4013      	ands	r3, r2
 800595a:	434b      	muls	r3, r1
 800595c:	617b      	str	r3, [r7, #20]
        break;
 800595e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005960:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	0f5b      	lsrs	r3, r3, #29
 8005966:	2207      	movs	r2, #7
 8005968:	4013      	ands	r3, r2
 800596a:	3301      	adds	r3, #1
 800596c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	6978      	ldr	r0, [r7, #20]
 8005972:	f7fa fbcf 	bl	8000114 <__udivsi3>
 8005976:	0003      	movs	r3, r0
 8005978:	613b      	str	r3, [r7, #16]
 800597a:	e015      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800597c:	4b0d      	ldr	r3, [pc, #52]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	2238      	movs	r2, #56	; 0x38
 8005982:	4013      	ands	r3, r2
 8005984:	2b20      	cmp	r3, #32
 8005986:	d103      	bne.n	8005990 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005988:	2380      	movs	r3, #128	; 0x80
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	613b      	str	r3, [r7, #16]
 800598e:	e00b      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005990:	4b08      	ldr	r3, [pc, #32]	; (80059b4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2238      	movs	r2, #56	; 0x38
 8005996:	4013      	ands	r3, r2
 8005998:	2b18      	cmp	r3, #24
 800599a:	d103      	bne.n	80059a4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800599c:	23fa      	movs	r3, #250	; 0xfa
 800599e:	01db      	lsls	r3, r3, #7
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	e001      	b.n	80059a8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80059a4:	2300      	movs	r3, #0
 80059a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80059a8:	693b      	ldr	r3, [r7, #16]
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b006      	add	sp, #24
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	40021000 	.word	0x40021000
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	007a1200 	.word	0x007a1200

080059c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80059c6:	681b      	ldr	r3, [r3, #0]
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	46c0      	nop			; (mov r8, r8)
 80059d0:	20000000 	.word	0x20000000

080059d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059d4:	b5b0      	push	{r4, r5, r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80059d8:	f7ff fff2 	bl	80059c0 <HAL_RCC_GetHCLKFreq>
 80059dc:	0004      	movs	r4, r0
 80059de:	f7ff fb43 	bl	8005068 <LL_RCC_GetAPB1Prescaler>
 80059e2:	0003      	movs	r3, r0
 80059e4:	0b1a      	lsrs	r2, r3, #12
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80059e8:	0092      	lsls	r2, r2, #2
 80059ea:	58d3      	ldr	r3, [r2, r3]
 80059ec:	221f      	movs	r2, #31
 80059ee:	4013      	ands	r3, r2
 80059f0:	40dc      	lsrs	r4, r3
 80059f2:	0023      	movs	r3, r4
}
 80059f4:	0018      	movs	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bdb0      	pop	{r4, r5, r7, pc}
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	080091f8 	.word	0x080091f8

08005a00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b086      	sub	sp, #24
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005a08:	2313      	movs	r3, #19
 8005a0a:	18fb      	adds	r3, r7, r3
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a10:	2312      	movs	r3, #18
 8005a12:	18fb      	adds	r3, r7, r3
 8005a14:	2200      	movs	r2, #0
 8005a16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	029b      	lsls	r3, r3, #10
 8005a20:	4013      	ands	r3, r2
 8005a22:	d100      	bne.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005a24:	e0a3      	b.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a26:	2011      	movs	r0, #17
 8005a28:	183b      	adds	r3, r7, r0
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a2e:	4b7f      	ldr	r3, [pc, #508]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	055b      	lsls	r3, r3, #21
 8005a36:	4013      	ands	r3, r2
 8005a38:	d110      	bne.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a3a:	4b7c      	ldr	r3, [pc, #496]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005a3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a3e:	4b7b      	ldr	r3, [pc, #492]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005a40:	2180      	movs	r1, #128	; 0x80
 8005a42:	0549      	lsls	r1, r1, #21
 8005a44:	430a      	orrs	r2, r1
 8005a46:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a48:	4b78      	ldr	r3, [pc, #480]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005a4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a4c:	2380      	movs	r3, #128	; 0x80
 8005a4e:	055b      	lsls	r3, r3, #21
 8005a50:	4013      	ands	r3, r2
 8005a52:	60bb      	str	r3, [r7, #8]
 8005a54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a5c:	4b74      	ldr	r3, [pc, #464]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	4b73      	ldr	r3, [pc, #460]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005a62:	2180      	movs	r1, #128	; 0x80
 8005a64:	0049      	lsls	r1, r1, #1
 8005a66:	430a      	orrs	r2, r1
 8005a68:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a6a:	f7fd fab7 	bl	8002fdc <HAL_GetTick>
 8005a6e:	0003      	movs	r3, r0
 8005a70:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a72:	e00b      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a74:	f7fd fab2 	bl	8002fdc <HAL_GetTick>
 8005a78:	0002      	movs	r2, r0
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	1ad3      	subs	r3, r2, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d904      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005a82:	2313      	movs	r3, #19
 8005a84:	18fb      	adds	r3, r7, r3
 8005a86:	2203      	movs	r2, #3
 8005a88:	701a      	strb	r2, [r3, #0]
        break;
 8005a8a:	e005      	b.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a8c:	4b68      	ldr	r3, [pc, #416]	; (8005c30 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	2380      	movs	r3, #128	; 0x80
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	4013      	ands	r3, r2
 8005a96:	d0ed      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005a98:	2313      	movs	r3, #19
 8005a9a:	18fb      	adds	r3, r7, r3
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d154      	bne.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005aa2:	4b62      	ldr	r3, [pc, #392]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005aa4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aa6:	23c0      	movs	r3, #192	; 0xc0
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4013      	ands	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d019      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	695b      	ldr	r3, [r3, #20]
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d014      	beq.n	8005ae8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005abe:	4b5b      	ldr	r3, [pc, #364]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac2:	4a5c      	ldr	r2, [pc, #368]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005ac8:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005aca:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005acc:	4b57      	ldr	r3, [pc, #348]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ace:	2180      	movs	r1, #128	; 0x80
 8005ad0:	0249      	lsls	r1, r1, #9
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad6:	4b55      	ldr	r3, [pc, #340]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ad8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ada:	4b54      	ldr	r3, [pc, #336]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005adc:	4956      	ldr	r1, [pc, #344]	; (8005c38 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8005ade:	400a      	ands	r2, r1
 8005ae0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ae2:	4b52      	ldr	r3, [pc, #328]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	2201      	movs	r2, #1
 8005aec:	4013      	ands	r3, r2
 8005aee:	d016      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fa74 	bl	8002fdc <HAL_GetTick>
 8005af4:	0003      	movs	r3, r0
 8005af6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005af8:	e00c      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afa:	f7fd fa6f 	bl	8002fdc <HAL_GetTick>
 8005afe:	0002      	movs	r2, r0
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	4a4d      	ldr	r2, [pc, #308]	; (8005c3c <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d904      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005b0a:	2313      	movs	r3, #19
 8005b0c:	18fb      	adds	r3, r7, r3
 8005b0e:	2203      	movs	r2, #3
 8005b10:	701a      	strb	r2, [r3, #0]
            break;
 8005b12:	e004      	b.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b14:	4b45      	ldr	r3, [pc, #276]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b18:	2202      	movs	r2, #2
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	d0ed      	beq.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005b1e:	2313      	movs	r3, #19
 8005b20:	18fb      	adds	r3, r7, r3
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10a      	bne.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b28:	4b40      	ldr	r3, [pc, #256]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	4a41      	ldr	r2, [pc, #260]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	0019      	movs	r1, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	695a      	ldr	r2, [r3, #20]
 8005b36:	4b3d      	ldr	r3, [pc, #244]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005b3c:	e00c      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b3e:	2312      	movs	r3, #18
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	2213      	movs	r2, #19
 8005b44:	18ba      	adds	r2, r7, r2
 8005b46:	7812      	ldrb	r2, [r2, #0]
 8005b48:	701a      	strb	r2, [r3, #0]
 8005b4a:	e005      	b.n	8005b58 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b4c:	2312      	movs	r3, #18
 8005b4e:	18fb      	adds	r3, r7, r3
 8005b50:	2213      	movs	r2, #19
 8005b52:	18ba      	adds	r2, r7, r2
 8005b54:	7812      	ldrb	r2, [r2, #0]
 8005b56:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b58:	2311      	movs	r3, #17
 8005b5a:	18fb      	adds	r3, r7, r3
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d105      	bne.n	8005b6e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b62:	4b32      	ldr	r3, [pc, #200]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b66:	4b31      	ldr	r3, [pc, #196]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b68:	4935      	ldr	r1, [pc, #212]	; (8005c40 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2201      	movs	r2, #1
 8005b74:	4013      	ands	r3, r2
 8005b76:	d009      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b7c:	2203      	movs	r2, #3
 8005b7e:	4393      	bics	r3, r2
 8005b80:	0019      	movs	r1, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	685a      	ldr	r2, [r3, #4]
 8005b86:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b88:	430a      	orrs	r2, r1
 8005b8a:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2220      	movs	r2, #32
 8005b92:	4013      	ands	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b96:	4b25      	ldr	r3, [pc, #148]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b9a:	4a2a      	ldr	r2, [pc, #168]	; (8005c44 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	0019      	movs	r1, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689a      	ldr	r2, [r3, #8]
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	2380      	movs	r3, #128	; 0x80
 8005bb0:	01db      	lsls	r3, r3, #7
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	d015      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	0899      	lsrs	r1, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	691a      	ldr	r2, [r3, #16]
 8005bc2:	4b1a      	ldr	r3, [pc, #104]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bc4:	430a      	orrs	r2, r1
 8005bc6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	691a      	ldr	r2, [r3, #16]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	05db      	lsls	r3, r3, #23
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d106      	bne.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bd6:	68da      	ldr	r2, [r3, #12]
 8005bd8:	4b14      	ldr	r3, [pc, #80]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bda:	2180      	movs	r1, #128	; 0x80
 8005bdc:	0249      	lsls	r1, r1, #9
 8005bde:	430a      	orrs	r2, r1
 8005be0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	011b      	lsls	r3, r3, #4
 8005bea:	4013      	ands	r3, r2
 8005bec:	d016      	beq.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005bee:	4b0f      	ldr	r3, [pc, #60]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bf2:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	0019      	movs	r1, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	4b0b      	ldr	r3, [pc, #44]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	2380      	movs	r3, #128	; 0x80
 8005c08:	01db      	lsls	r3, r3, #7
 8005c0a:	429a      	cmp	r2, r3
 8005c0c:	d106      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005c0e:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	4b06      	ldr	r3, [pc, #24]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8005c14:	2180      	movs	r1, #128	; 0x80
 8005c16:	0249      	lsls	r1, r1, #9
 8005c18:	430a      	orrs	r2, r1
 8005c1a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005c1c:	2312      	movs	r3, #18
 8005c1e:	18fb      	adds	r3, r7, r3
 8005c20:	781b      	ldrb	r3, [r3, #0]
}
 8005c22:	0018      	movs	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	b006      	add	sp, #24
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	46c0      	nop			; (mov r8, r8)
 8005c2c:	40021000 	.word	0x40021000
 8005c30:	40007000 	.word	0x40007000
 8005c34:	fffffcff 	.word	0xfffffcff
 8005c38:	fffeffff 	.word	0xfffeffff
 8005c3c:	00001388 	.word	0x00001388
 8005c40:	efffffff 	.word	0xefffffff
 8005c44:	ffffcfff 	.word	0xffffcfff
 8005c48:	ffff3fff 	.word	0xffff3fff

08005c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d101      	bne.n	8005c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e04a      	b.n	8005cf4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	223d      	movs	r2, #61	; 0x3d
 8005c62:	5c9b      	ldrb	r3, [r3, r2]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d107      	bne.n	8005c7a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	223c      	movs	r2, #60	; 0x3c
 8005c6e:	2100      	movs	r1, #0
 8005c70:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	0018      	movs	r0, r3
 8005c76:	f7fc ffaf 	bl	8002bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	223d      	movs	r2, #61	; 0x3d
 8005c7e:	2102      	movs	r1, #2
 8005c80:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	0019      	movs	r1, r3
 8005c8c:	0010      	movs	r0, r2
 8005c8e:	f000 faa1 	bl	80061d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2248      	movs	r2, #72	; 0x48
 8005c96:	2101      	movs	r1, #1
 8005c98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	223e      	movs	r2, #62	; 0x3e
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	5499      	strb	r1, [r3, r2]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	223f      	movs	r2, #63	; 0x3f
 8005ca6:	2101      	movs	r1, #1
 8005ca8:	5499      	strb	r1, [r3, r2]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2240      	movs	r2, #64	; 0x40
 8005cae:	2101      	movs	r1, #1
 8005cb0:	5499      	strb	r1, [r3, r2]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2241      	movs	r2, #65	; 0x41
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	5499      	strb	r1, [r3, r2]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2242      	movs	r2, #66	; 0x42
 8005cbe:	2101      	movs	r1, #1
 8005cc0:	5499      	strb	r1, [r3, r2]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2243      	movs	r2, #67	; 0x43
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2244      	movs	r2, #68	; 0x44
 8005cce:	2101      	movs	r1, #1
 8005cd0:	5499      	strb	r1, [r3, r2]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2245      	movs	r2, #69	; 0x45
 8005cd6:	2101      	movs	r1, #1
 8005cd8:	5499      	strb	r1, [r3, r2]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2246      	movs	r2, #70	; 0x46
 8005cde:	2101      	movs	r1, #1
 8005ce0:	5499      	strb	r1, [r3, r2]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2247      	movs	r2, #71	; 0x47
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	223d      	movs	r2, #61	; 0x3d
 8005cee:	2101      	movs	r1, #1
 8005cf0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b002      	add	sp, #8
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	223d      	movs	r2, #61	; 0x3d
 8005d08:	5c9b      	ldrb	r3, [r3, r2]
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d001      	beq.n	8005d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e037      	b.n	8005d84 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	223d      	movs	r2, #61	; 0x3d
 8005d18:	2102      	movs	r1, #2
 8005d1a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	2101      	movs	r1, #1
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a16      	ldr	r2, [pc, #88]	; (8005d8c <HAL_TIM_Base_Start_IT+0x90>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIM_Base_Start_IT+0x44>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <HAL_TIM_Base_Start_IT+0x94>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d116      	bne.n	8005d6e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	4a13      	ldr	r2, [pc, #76]	; (8005d94 <HAL_TIM_Base_Start_IT+0x98>)
 8005d48:	4013      	ands	r3, r2
 8005d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2b06      	cmp	r3, #6
 8005d50:	d016      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x84>
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	2380      	movs	r3, #128	; 0x80
 8005d56:	025b      	lsls	r3, r3, #9
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d011      	beq.n	8005d80 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	2101      	movs	r1, #1
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6c:	e008      	b.n	8005d80 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	430a      	orrs	r2, r1
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	e000      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	0018      	movs	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	b004      	add	sp, #16
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	00010007 	.word	0x00010007

08005d98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2202      	movs	r2, #2
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d124      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	2202      	movs	r2, #2
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b02      	cmp	r3, #2
 8005dba:	d11d      	bne.n	8005df8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2203      	movs	r2, #3
 8005dc2:	4252      	negs	r2, r2
 8005dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	2203      	movs	r2, #3
 8005dd4:	4013      	ands	r3, r2
 8005dd6:	d004      	beq.n	8005de2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	0018      	movs	r0, r3
 8005ddc:	f000 f9e2 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005de0:	e007      	b.n	8005df2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	0018      	movs	r0, r3
 8005de6:	f000 f9d5 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	0018      	movs	r0, r3
 8005dee:	f000 f9e1 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	2204      	movs	r2, #4
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d125      	bne.n	8005e52 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	4013      	ands	r3, r2
 8005e10:	2b04      	cmp	r3, #4
 8005e12:	d11e      	bne.n	8005e52 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	2205      	movs	r2, #5
 8005e1a:	4252      	negs	r2, r2
 8005e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2202      	movs	r2, #2
 8005e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699a      	ldr	r2, [r3, #24]
 8005e2a:	23c0      	movs	r3, #192	; 0xc0
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	4013      	ands	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	0018      	movs	r0, r3
 8005e36:	f000 f9b5 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005e3a:	e007      	b.n	8005e4c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	0018      	movs	r0, r3
 8005e40:	f000 f9a8 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	0018      	movs	r0, r3
 8005e48:	f000 f9b4 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2208      	movs	r2, #8
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d124      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	2208      	movs	r2, #8
 8005e68:	4013      	ands	r3, r2
 8005e6a:	2b08      	cmp	r3, #8
 8005e6c:	d11d      	bne.n	8005eaa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2209      	movs	r2, #9
 8005e74:	4252      	negs	r2, r2
 8005e76:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	2203      	movs	r2, #3
 8005e86:	4013      	ands	r3, r2
 8005e88:	d004      	beq.n	8005e94 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	0018      	movs	r0, r3
 8005e8e:	f000 f989 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005e92:	e007      	b.n	8005ea4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 f97c 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	0018      	movs	r0, r3
 8005ea0:	f000 f988 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	2210      	movs	r2, #16
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b10      	cmp	r3, #16
 8005eb6:	d125      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	2210      	movs	r2, #16
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b10      	cmp	r3, #16
 8005ec4:	d11e      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2211      	movs	r2, #17
 8005ecc:	4252      	negs	r2, r2
 8005ece:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2208      	movs	r2, #8
 8005ed4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69da      	ldr	r2, [r3, #28]
 8005edc:	23c0      	movs	r3, #192	; 0xc0
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d004      	beq.n	8005eee <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 f95c 	bl	80061a4 <HAL_TIM_IC_CaptureCallback>
 8005eec:	e007      	b.n	8005efe <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 f94f 	bl	8006194 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	0018      	movs	r0, r3
 8005efa:	f000 f95b 	bl	80061b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b01      	cmp	r3, #1
 8005f10:	d10f      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	2b01      	cmp	r3, #1
 8005f1e:	d108      	bne.n	8005f32 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2202      	movs	r2, #2
 8005f26:	4252      	negs	r2, r2
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	0018      	movs	r0, r3
 8005f2e:	f7fc fd07 	bl	8002940 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	2280      	movs	r2, #128	; 0x80
 8005f3a:	4013      	ands	r3, r2
 8005f3c:	2b80      	cmp	r3, #128	; 0x80
 8005f3e:	d10f      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68db      	ldr	r3, [r3, #12]
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b80      	cmp	r3, #128	; 0x80
 8005f4c:	d108      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2281      	movs	r2, #129	; 0x81
 8005f54:	4252      	negs	r2, r2
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	0018      	movs	r0, r3
 8005f5c:	f000 faac 	bl	80064b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691a      	ldr	r2, [r3, #16]
 8005f66:	2380      	movs	r3, #128	; 0x80
 8005f68:	005b      	lsls	r3, r3, #1
 8005f6a:	401a      	ands	r2, r3
 8005f6c:	2380      	movs	r3, #128	; 0x80
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d10e      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2280      	movs	r2, #128	; 0x80
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d107      	bne.n	8005f92 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a1c      	ldr	r2, [pc, #112]	; (8005ff8 <HAL_TIM_IRQHandler+0x260>)
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	f000 fa9b 	bl	80064c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	2240      	movs	r2, #64	; 0x40
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d10f      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	2240      	movs	r2, #64	; 0x40
 8005fa8:	4013      	ands	r3, r2
 8005faa:	2b40      	cmp	r3, #64	; 0x40
 8005fac:	d108      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2241      	movs	r2, #65	; 0x41
 8005fb4:	4252      	negs	r2, r2
 8005fb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	0018      	movs	r0, r3
 8005fbc:	f000 f902 	bl	80061c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	d10f      	bne.n	8005fee <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	4013      	ands	r3, r2
 8005fd8:	2b20      	cmp	r3, #32
 8005fda:	d108      	bne.n	8005fee <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	2221      	movs	r2, #33	; 0x21
 8005fe2:	4252      	negs	r2, r2
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f000 fa5d 	bl	80064a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fee:	46c0      	nop			; (mov r8, r8)
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b002      	add	sp, #8
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	fffffeff 	.word	0xfffffeff

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	223c      	movs	r2, #60	; 0x3c
 800600a:	5c9b      	ldrb	r3, [r3, r2]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d101      	bne.n	8006014 <HAL_TIM_ConfigClockSource+0x18>
 8006010:	2302      	movs	r3, #2
 8006012:	e0b7      	b.n	8006184 <HAL_TIM_ConfigClockSource+0x188>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	223c      	movs	r2, #60	; 0x3c
 8006018:	2101      	movs	r1, #1
 800601a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	223d      	movs	r2, #61	; 0x3d
 8006020:	2102      	movs	r1, #2
 8006022:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4a57      	ldr	r2, [pc, #348]	; (800618c <HAL_TIM_ConfigClockSource+0x190>)
 8006030:	4013      	ands	r3, r2
 8006032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	4a56      	ldr	r2, [pc, #344]	; (8006190 <HAL_TIM_ConfigClockSource+0x194>)
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2280      	movs	r2, #128	; 0x80
 800604a:	0192      	lsls	r2, r2, #6
 800604c:	4293      	cmp	r3, r2
 800604e:	d040      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0xd6>
 8006050:	2280      	movs	r2, #128	; 0x80
 8006052:	0192      	lsls	r2, r2, #6
 8006054:	4293      	cmp	r3, r2
 8006056:	d900      	bls.n	800605a <HAL_TIM_ConfigClockSource+0x5e>
 8006058:	e088      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800605a:	2280      	movs	r2, #128	; 0x80
 800605c:	0152      	lsls	r2, r2, #5
 800605e:	4293      	cmp	r3, r2
 8006060:	d100      	bne.n	8006064 <HAL_TIM_ConfigClockSource+0x68>
 8006062:	e085      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
 8006064:	2280      	movs	r2, #128	; 0x80
 8006066:	0152      	lsls	r2, r2, #5
 8006068:	4293      	cmp	r3, r2
 800606a:	d900      	bls.n	800606e <HAL_TIM_ConfigClockSource+0x72>
 800606c:	e07e      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800606e:	2b70      	cmp	r3, #112	; 0x70
 8006070:	d018      	beq.n	80060a4 <HAL_TIM_ConfigClockSource+0xa8>
 8006072:	d900      	bls.n	8006076 <HAL_TIM_ConfigClockSource+0x7a>
 8006074:	e07a      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006076:	2b60      	cmp	r3, #96	; 0x60
 8006078:	d04f      	beq.n	800611a <HAL_TIM_ConfigClockSource+0x11e>
 800607a:	d900      	bls.n	800607e <HAL_TIM_ConfigClockSource+0x82>
 800607c:	e076      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800607e:	2b50      	cmp	r3, #80	; 0x50
 8006080:	d03b      	beq.n	80060fa <HAL_TIM_ConfigClockSource+0xfe>
 8006082:	d900      	bls.n	8006086 <HAL_TIM_ConfigClockSource+0x8a>
 8006084:	e072      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d057      	beq.n	800613a <HAL_TIM_ConfigClockSource+0x13e>
 800608a:	d900      	bls.n	800608e <HAL_TIM_ConfigClockSource+0x92>
 800608c:	e06e      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800608e:	2b30      	cmp	r3, #48	; 0x30
 8006090:	d063      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 8006092:	d86b      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d060      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 8006098:	d868      	bhi.n	800616c <HAL_TIM_ConfigClockSource+0x170>
 800609a:	2b00      	cmp	r3, #0
 800609c:	d05d      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
 800609e:	2b10      	cmp	r3, #16
 80060a0:	d05b      	beq.n	800615a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80060a2:	e063      	b.n	800616c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	6899      	ldr	r1, [r3, #8]
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	68db      	ldr	r3, [r3, #12]
 80060b4:	f000 f976 	bl	80063a4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2277      	movs	r2, #119	; 0x77
 80060c4:	4313      	orrs	r3, r2
 80060c6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
      break;
 80060d0:	e04f      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6899      	ldr	r1, [r3, #8]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f000 f95f 	bl	80063a4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689a      	ldr	r2, [r3, #8]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2180      	movs	r1, #128	; 0x80
 80060f2:	01c9      	lsls	r1, r1, #7
 80060f4:	430a      	orrs	r2, r1
 80060f6:	609a      	str	r2, [r3, #8]
      break;
 80060f8:	e03b      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	6859      	ldr	r1, [r3, #4]
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	001a      	movs	r2, r3
 8006108:	f000 f8d0 	bl	80062ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	2150      	movs	r1, #80	; 0x50
 8006112:	0018      	movs	r0, r3
 8006114:	f000 f92a 	bl	800636c <TIM_ITRx_SetConfig>
      break;
 8006118:	e02b      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6818      	ldr	r0, [r3, #0]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	6859      	ldr	r1, [r3, #4]
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	001a      	movs	r2, r3
 8006128:	f000 f8ee 	bl	8006308 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2160      	movs	r1, #96	; 0x60
 8006132:	0018      	movs	r0, r3
 8006134:	f000 f91a 	bl	800636c <TIM_ITRx_SetConfig>
      break;
 8006138:	e01b      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	6859      	ldr	r1, [r3, #4]
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	001a      	movs	r2, r3
 8006148:	f000 f8b0 	bl	80062ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2140      	movs	r1, #64	; 0x40
 8006152:	0018      	movs	r0, r3
 8006154:	f000 f90a 	bl	800636c <TIM_ITRx_SetConfig>
      break;
 8006158:	e00b      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	0019      	movs	r1, r3
 8006164:	0010      	movs	r0, r2
 8006166:	f000 f901 	bl	800636c <TIM_ITRx_SetConfig>
        break;
 800616a:	e002      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800616c:	46c0      	nop			; (mov r8, r8)
 800616e:	e000      	b.n	8006172 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8006170:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	223d      	movs	r2, #61	; 0x3d
 8006176:	2101      	movs	r1, #1
 8006178:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	223c      	movs	r2, #60	; 0x3c
 800617e:	2100      	movs	r1, #0
 8006180:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	0018      	movs	r0, r3
 8006186:	46bd      	mov	sp, r7
 8006188:	b004      	add	sp, #16
 800618a:	bd80      	pop	{r7, pc}
 800618c:	ffceff88 	.word	0xffceff88
 8006190:	ffff00ff 	.word	0xffff00ff

08006194 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800619c:	46c0      	nop			; (mov r8, r8)
 800619e:	46bd      	mov	sp, r7
 80061a0:	b002      	add	sp, #8
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061ac:	46c0      	nop			; (mov r8, r8)
 80061ae:	46bd      	mov	sp, r7
 80061b0:	b002      	add	sp, #8
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061bc:	46c0      	nop			; (mov r8, r8)
 80061be:	46bd      	mov	sp, r7
 80061c0:	b002      	add	sp, #8
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b082      	sub	sp, #8
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061cc:	46c0      	nop			; (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b002      	add	sp, #8
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	4a2b      	ldr	r2, [pc, #172]	; (8006294 <TIM_Base_SetConfig+0xc0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d003      	beq.n	80061f4 <TIM_Base_SetConfig+0x20>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a2a      	ldr	r2, [pc, #168]	; (8006298 <TIM_Base_SetConfig+0xc4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d108      	bne.n	8006206 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2270      	movs	r2, #112	; 0x70
 80061f8:	4393      	bics	r3, r2
 80061fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	68fa      	ldr	r2, [r7, #12]
 8006202:	4313      	orrs	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a22      	ldr	r2, [pc, #136]	; (8006294 <TIM_Base_SetConfig+0xc0>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d00f      	beq.n	800622e <TIM_Base_SetConfig+0x5a>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a21      	ldr	r2, [pc, #132]	; (8006298 <TIM_Base_SetConfig+0xc4>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d00b      	beq.n	800622e <TIM_Base_SetConfig+0x5a>
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a20      	ldr	r2, [pc, #128]	; (800629c <TIM_Base_SetConfig+0xc8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d007      	beq.n	800622e <TIM_Base_SetConfig+0x5a>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <TIM_Base_SetConfig+0xcc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d003      	beq.n	800622e <TIM_Base_SetConfig+0x5a>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <TIM_Base_SetConfig+0xd0>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d108      	bne.n	8006240 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <TIM_Base_SetConfig+0xd4>)
 8006232:	4013      	ands	r3, r2
 8006234:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	68db      	ldr	r3, [r3, #12]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2280      	movs	r2, #128	; 0x80
 8006244:	4393      	bics	r3, r2
 8006246:	001a      	movs	r2, r3
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	4313      	orrs	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689a      	ldr	r2, [r3, #8]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a0a      	ldr	r2, [pc, #40]	; (8006294 <TIM_Base_SetConfig+0xc0>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d007      	beq.n	800627e <TIM_Base_SetConfig+0xaa>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a0b      	ldr	r2, [pc, #44]	; (80062a0 <TIM_Base_SetConfig+0xcc>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d003      	beq.n	800627e <TIM_Base_SetConfig+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a0a      	ldr	r2, [pc, #40]	; (80062a4 <TIM_Base_SetConfig+0xd0>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d103      	bne.n	8006286 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	615a      	str	r2, [r3, #20]
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	b004      	add	sp, #16
 8006292:	bd80      	pop	{r7, pc}
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40000400 	.word	0x40000400
 800629c:	40002000 	.word	0x40002000
 80062a0:	40014400 	.word	0x40014400
 80062a4:	40014800 	.word	0x40014800
 80062a8:	fffffcff 	.word	0xfffffcff

080062ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	2201      	movs	r2, #1
 80062c4:	4393      	bics	r3, r2
 80062c6:	001a      	movs	r2, r3
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	699b      	ldr	r3, [r3, #24]
 80062d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	22f0      	movs	r2, #240	; 0xf0
 80062d6:	4393      	bics	r3, r2
 80062d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	220a      	movs	r2, #10
 80062e8:	4393      	bics	r3, r2
 80062ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062ec:	697a      	ldr	r2, [r7, #20]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	693a      	ldr	r2, [r7, #16]
 80062f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	46c0      	nop			; (mov r8, r8)
 8006302:	46bd      	mov	sp, r7
 8006304:	b006      	add	sp, #24
 8006306:	bd80      	pop	{r7, pc}

08006308 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b086      	sub	sp, #24
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a1b      	ldr	r3, [r3, #32]
 8006318:	2210      	movs	r2, #16
 800631a:	4393      	bics	r3, r2
 800631c:	001a      	movs	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	699b      	ldr	r3, [r3, #24]
 8006326:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6a1b      	ldr	r3, [r3, #32]
 800632c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	4a0d      	ldr	r2, [pc, #52]	; (8006368 <TIM_TI2_ConfigInputStage+0x60>)
 8006332:	4013      	ands	r3, r2
 8006334:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	031b      	lsls	r3, r3, #12
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	22a0      	movs	r2, #160	; 0xa0
 8006344:	4393      	bics	r3, r2
 8006346:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	4313      	orrs	r3, r2
 8006350:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	693a      	ldr	r2, [r7, #16]
 800635c:	621a      	str	r2, [r3, #32]
}
 800635e:	46c0      	nop			; (mov r8, r8)
 8006360:	46bd      	mov	sp, r7
 8006362:	b006      	add	sp, #24
 8006364:	bd80      	pop	{r7, pc}
 8006366:	46c0      	nop			; (mov r8, r8)
 8006368:	ffff0fff 	.word	0xffff0fff

0800636c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <TIM_ITRx_SetConfig+0x34>)
 8006380:	4013      	ands	r3, r2
 8006382:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006384:	683a      	ldr	r2, [r7, #0]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4313      	orrs	r3, r2
 800638a:	2207      	movs	r2, #7
 800638c:	4313      	orrs	r3, r2
 800638e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	609a      	str	r2, [r3, #8]
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b004      	add	sp, #16
 800639c:	bd80      	pop	{r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	ffcfff8f 	.word	0xffcfff8f

080063a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b086      	sub	sp, #24
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	4a09      	ldr	r2, [pc, #36]	; (80063e0 <TIM_ETR_SetConfig+0x3c>)
 80063bc:	4013      	ands	r3, r2
 80063be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	021a      	lsls	r2, r3, #8
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	697a      	ldr	r2, [r7, #20]
 80063d6:	609a      	str	r2, [r3, #8]
}
 80063d8:	46c0      	nop			; (mov r8, r8)
 80063da:	46bd      	mov	sp, r7
 80063dc:	b006      	add	sp, #24
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	ffff00ff 	.word	0xffff00ff

080063e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	223c      	movs	r2, #60	; 0x3c
 80063f2:	5c9b      	ldrb	r3, [r3, r2]
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d101      	bne.n	80063fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063f8:	2302      	movs	r3, #2
 80063fa:	e04a      	b.n	8006492 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	223c      	movs	r2, #60	; 0x3c
 8006400:	2101      	movs	r1, #1
 8006402:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	223d      	movs	r2, #61	; 0x3d
 8006408:	2102      	movs	r1, #2
 800640a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a1e      	ldr	r2, [pc, #120]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a1d      	ldr	r2, [pc, #116]	; (80064a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800642a:	4013      	ands	r3, r2
 800642c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2270      	movs	r2, #112	; 0x70
 800643c:	4393      	bics	r3, r2
 800643e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4313      	orrs	r3, r2
 8006448:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a11      	ldr	r2, [pc, #68]	; (800649c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a10      	ldr	r2, [pc, #64]	; (80064a4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d10c      	bne.n	8006480 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	4393      	bics	r3, r2
 800646c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	4313      	orrs	r3, r2
 8006476:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68ba      	ldr	r2, [r7, #8]
 800647e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	223d      	movs	r2, #61	; 0x3d
 8006484:	2101      	movs	r1, #1
 8006486:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	223c      	movs	r2, #60	; 0x3c
 800648c:	2100      	movs	r1, #0
 800648e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	0018      	movs	r0, r3
 8006494:	46bd      	mov	sp, r7
 8006496:	b004      	add	sp, #16
 8006498:	bd80      	pop	{r7, pc}
 800649a:	46c0      	nop			; (mov r8, r8)
 800649c:	40012c00 	.word	0x40012c00
 80064a0:	ff0fffff 	.word	0xff0fffff
 80064a4:	40000400 	.word	0x40000400

080064a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064b0:	46c0      	nop			; (mov r8, r8)
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	46bd      	mov	sp, r7
 80064d4:	b002      	add	sp, #8
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b082      	sub	sp, #8
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d101      	bne.n	80064ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e6:	2301      	movs	r3, #1
 80064e8:	e046      	b.n	8006578 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2284      	movs	r2, #132	; 0x84
 80064ee:	589b      	ldr	r3, [r3, r2]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d107      	bne.n	8006504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2280      	movs	r2, #128	; 0x80
 80064f8:	2100      	movs	r1, #0
 80064fa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	0018      	movs	r0, r3
 8006500:	f7fc fb92 	bl	8002c28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2284      	movs	r2, #132	; 0x84
 8006508:	2124      	movs	r1, #36	; 0x24
 800650a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2101      	movs	r1, #1
 8006518:	438a      	bics	r2, r1
 800651a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	0018      	movs	r0, r3
 8006520:	f000 fc74 	bl	8006e0c <UART_SetConfig>
 8006524:	0003      	movs	r3, r0
 8006526:	2b01      	cmp	r3, #1
 8006528:	d101      	bne.n	800652e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800652a:	2301      	movs	r3, #1
 800652c:	e024      	b.n	8006578 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	0018      	movs	r0, r3
 800653a:	f000 fdd1 	bl	80070e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	490d      	ldr	r1, [pc, #52]	; (8006580 <HAL_UART_Init+0xa8>)
 800654a:	400a      	ands	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	212a      	movs	r1, #42	; 0x2a
 800655a:	438a      	bics	r2, r1
 800655c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681a      	ldr	r2, [r3, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2101      	movs	r1, #1
 800656a:	430a      	orrs	r2, r1
 800656c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	0018      	movs	r0, r3
 8006572:	f000 fe69 	bl	8007248 <UART_CheckIdleState>
 8006576:	0003      	movs	r3, r0
}
 8006578:	0018      	movs	r0, r3
 800657a:	46bd      	mov	sp, r7
 800657c:	b002      	add	sp, #8
 800657e:	bd80      	pop	{r7, pc}
 8006580:	ffffb7ff 	.word	0xffffb7ff

08006584 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b08a      	sub	sp, #40	; 0x28
 8006588:	af02      	add	r7, sp, #8
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	603b      	str	r3, [r7, #0]
 8006590:	1dbb      	adds	r3, r7, #6
 8006592:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2284      	movs	r2, #132	; 0x84
 8006598:	589b      	ldr	r3, [r3, r2]
 800659a:	2b20      	cmp	r3, #32
 800659c:	d000      	beq.n	80065a0 <HAL_UART_Transmit+0x1c>
 800659e:	e097      	b.n	80066d0 <HAL_UART_Transmit+0x14c>
  {
    if ((pData == NULL) || (Size == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_UART_Transmit+0x2a>
 80065a6:	1dbb      	adds	r3, r7, #6
 80065a8:	881b      	ldrh	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e08f      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	2380      	movs	r3, #128	; 0x80
 80065b8:	015b      	lsls	r3, r3, #5
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d109      	bne.n	80065d2 <HAL_UART_Transmit+0x4e>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d105      	bne.n	80065d2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2201      	movs	r2, #1
 80065ca:	4013      	ands	r3, r2
 80065cc:	d001      	beq.n	80065d2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80065ce:	2301      	movs	r3, #1
 80065d0:	e07f      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
      }
    }

    __HAL_LOCK(huart);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2280      	movs	r2, #128	; 0x80
 80065d6:	5c9b      	ldrb	r3, [r3, r2]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_UART_Transmit+0x5c>
 80065dc:	2302      	movs	r3, #2
 80065de:	e078      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2280      	movs	r2, #128	; 0x80
 80065e4:	2101      	movs	r1, #1
 80065e6:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	228c      	movs	r2, #140	; 0x8c
 80065ec:	2100      	movs	r1, #0
 80065ee:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2284      	movs	r2, #132	; 0x84
 80065f4:	2121      	movs	r1, #33	; 0x21
 80065f6:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065f8:	f7fc fcf0 	bl	8002fdc <HAL_GetTick>
 80065fc:	0003      	movs	r3, r0
 80065fe:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	1dba      	adds	r2, r7, #6
 8006604:	2154      	movs	r1, #84	; 0x54
 8006606:	8812      	ldrh	r2, [r2, #0]
 8006608:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	1dba      	adds	r2, r7, #6
 800660e:	2156      	movs	r1, #86	; 0x56
 8006610:	8812      	ldrh	r2, [r2, #0]
 8006612:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	689a      	ldr	r2, [r3, #8]
 8006618:	2380      	movs	r3, #128	; 0x80
 800661a:	015b      	lsls	r3, r3, #5
 800661c:	429a      	cmp	r2, r3
 800661e:	d108      	bne.n	8006632 <HAL_UART_Transmit+0xae>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	691b      	ldr	r3, [r3, #16]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d104      	bne.n	8006632 <HAL_UART_Transmit+0xae>
    {
      pdata8bits  = NULL;
 8006628:	2300      	movs	r3, #0
 800662a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	61bb      	str	r3, [r7, #24]
 8006630:	e003      	b.n	800663a <HAL_UART_Transmit+0xb6>
    }
    else
    {
      pdata8bits  = pData;
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006636:	2300      	movs	r3, #0
 8006638:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2280      	movs	r2, #128	; 0x80
 800663e:	2100      	movs	r1, #0
 8006640:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8006642:	e02c      	b.n	800669e <HAL_UART_Transmit+0x11a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	9300      	str	r3, [sp, #0]
 800664c:	0013      	movs	r3, r2
 800664e:	2200      	movs	r2, #0
 8006650:	2180      	movs	r1, #128	; 0x80
 8006652:	f000 fe43 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 8006656:	1e03      	subs	r3, r0, #0
 8006658:	d001      	beq.n	800665e <HAL_UART_Transmit+0xda>
      {
        return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e039      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
      }
      if (pdata8bits == NULL)
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10b      	bne.n	800667c <HAL_UART_Transmit+0xf8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	881b      	ldrh	r3, [r3, #0]
 8006668:	001a      	movs	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	05d2      	lsls	r2, r2, #23
 8006670:	0dd2      	lsrs	r2, r2, #23
 8006672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	3302      	adds	r3, #2
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	e007      	b.n	800668c <HAL_UART_Transmit+0x108>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	781a      	ldrb	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006686:	69fb      	ldr	r3, [r7, #28]
 8006688:	3301      	adds	r3, #1
 800668a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2256      	movs	r2, #86	; 0x56
 8006690:	5a9b      	ldrh	r3, [r3, r2]
 8006692:	b29b      	uxth	r3, r3
 8006694:	3b01      	subs	r3, #1
 8006696:	b299      	uxth	r1, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2256      	movs	r2, #86	; 0x56
 800669c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2256      	movs	r2, #86	; 0x56
 80066a2:	5a9b      	ldrh	r3, [r3, r2]
 80066a4:	b29b      	uxth	r3, r3
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1cc      	bne.n	8006644 <HAL_UART_Transmit+0xc0>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	68f8      	ldr	r0, [r7, #12]
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	0013      	movs	r3, r2
 80066b4:	2200      	movs	r2, #0
 80066b6:	2140      	movs	r1, #64	; 0x40
 80066b8:	f000 fe10 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 80066bc:	1e03      	subs	r3, r0, #0
 80066be:	d001      	beq.n	80066c4 <HAL_UART_Transmit+0x140>
    {
      return HAL_TIMEOUT;
 80066c0:	2303      	movs	r3, #3
 80066c2:	e006      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2284      	movs	r2, #132	; 0x84
 80066c8:	2120      	movs	r1, #32
 80066ca:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	e000      	b.n	80066d2 <HAL_UART_Transmit+0x14e>
  }
  else
  {
    return HAL_BUSY;
 80066d0:	2302      	movs	r3, #2
  }
}
 80066d2:	0018      	movs	r0, r3
 80066d4:	46bd      	mov	sp, r7
 80066d6:	b008      	add	sp, #32
 80066d8:	bd80      	pop	{r7, pc}

080066da <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066da:	b580      	push	{r7, lr}
 80066dc:	b088      	sub	sp, #32
 80066de:	af00      	add	r7, sp, #0
 80066e0:	60f8      	str	r0, [r7, #12]
 80066e2:	60b9      	str	r1, [r7, #8]
 80066e4:	1dbb      	adds	r3, r7, #6
 80066e6:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2288      	movs	r2, #136	; 0x88
 80066ec:	589b      	ldr	r3, [r3, r2]
 80066ee:	2b20      	cmp	r3, #32
 80066f0:	d150      	bne.n	8006794 <HAL_UART_Receive_IT+0xba>
  {
    if ((pData == NULL) || (Size == 0U))
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_UART_Receive_IT+0x26>
 80066f8:	1dbb      	adds	r3, r7, #6
 80066fa:	881b      	ldrh	r3, [r3, #0]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e048      	b.n	8006796 <HAL_UART_Receive_IT+0xbc>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	015b      	lsls	r3, r3, #5
 800670c:	429a      	cmp	r2, r3
 800670e:	d109      	bne.n	8006724 <HAL_UART_Receive_IT+0x4a>
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d105      	bne.n	8006724 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	2201      	movs	r2, #1
 800671c:	4013      	ands	r3, r2
 800671e:	d001      	beq.n	8006724 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e038      	b.n	8006796 <HAL_UART_Receive_IT+0xbc>
      }
    }

    __HAL_LOCK(huart);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2280      	movs	r2, #128	; 0x80
 8006728:	5c9b      	ldrb	r3, [r3, r2]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d101      	bne.n	8006732 <HAL_UART_Receive_IT+0x58>
 800672e:	2302      	movs	r3, #2
 8006730:	e031      	b.n	8006796 <HAL_UART_Receive_IT+0xbc>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	2101      	movs	r1, #1
 8006738:	5499      	strb	r1, [r3, r2]

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	2380      	movs	r3, #128	; 0x80
 8006748:	041b      	lsls	r3, r3, #16
 800674a:	4013      	ands	r3, r2
 800674c:	d019      	beq.n	8006782 <HAL_UART_Receive_IT+0xa8>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674e:	f3ef 8310 	mrs	r3, PRIMASK
 8006752:	613b      	str	r3, [r7, #16]
  return(result);
 8006754:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006756:	61fb      	str	r3, [r7, #28]
 8006758:	2301      	movs	r3, #1
 800675a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f383 8810 	msr	PRIMASK, r3
}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	04c9      	lsls	r1, r1, #19
 8006772:	430a      	orrs	r2, r1
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	f383 8810 	msr	PRIMASK, r3
}
 8006780:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006782:	1dbb      	adds	r3, r7, #6
 8006784:	881a      	ldrh	r2, [r3, #0]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	0018      	movs	r0, r3
 800678c:	f000 fe6e 	bl	800746c <UART_Start_Receive_IT>
 8006790:	0003      	movs	r3, r0
 8006792:	e000      	b.n	8006796 <HAL_UART_Receive_IT+0xbc>
  }
  else
  {
    return HAL_BUSY;
 8006794:	2302      	movs	r3, #2
  }
}
 8006796:	0018      	movs	r0, r3
 8006798:	46bd      	mov	sp, r7
 800679a:	b008      	add	sp, #32
 800679c:	bd80      	pop	{r7, pc}
	...

080067a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067a0:	b5b0      	push	{r4, r5, r7, lr}
 80067a2:	b0aa      	sub	sp, #168	; 0xa8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	22a4      	movs	r2, #164	; 0xa4
 80067b0:	18b9      	adds	r1, r7, r2
 80067b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	20a0      	movs	r0, #160	; 0xa0
 80067bc:	1839      	adds	r1, r7, r0
 80067be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	249c      	movs	r4, #156	; 0x9c
 80067c8:	1939      	adds	r1, r7, r4
 80067ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80067cc:	0011      	movs	r1, r2
 80067ce:	18bb      	adds	r3, r7, r2
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4aa0      	ldr	r2, [pc, #640]	; (8006a54 <HAL_UART_IRQHandler+0x2b4>)
 80067d4:	4013      	ands	r3, r2
 80067d6:	2298      	movs	r2, #152	; 0x98
 80067d8:	18bd      	adds	r5, r7, r2
 80067da:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80067dc:	18bb      	adds	r3, r7, r2
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d11a      	bne.n	800681a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067e4:	187b      	adds	r3, r7, r1
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	2220      	movs	r2, #32
 80067ea:	4013      	ands	r3, r2
 80067ec:	d015      	beq.n	800681a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ee:	183b      	adds	r3, r7, r0
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2220      	movs	r2, #32
 80067f4:	4013      	ands	r3, r2
 80067f6:	d105      	bne.n	8006804 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067f8:	193b      	adds	r3, r7, r4
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	2380      	movs	r3, #128	; 0x80
 80067fe:	055b      	lsls	r3, r3, #21
 8006800:	4013      	ands	r3, r2
 8006802:	d00a      	beq.n	800681a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006808:	2b00      	cmp	r3, #0
 800680a:	d100      	bne.n	800680e <HAL_UART_IRQHandler+0x6e>
 800680c:	e2cf      	b.n	8006dae <HAL_UART_IRQHandler+0x60e>
      {
        huart->RxISR(huart);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	0010      	movs	r0, r2
 8006816:	4798      	blx	r3
      }
      return;
 8006818:	e2c9      	b.n	8006dae <HAL_UART_IRQHandler+0x60e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800681a:	2398      	movs	r3, #152	; 0x98
 800681c:	18fb      	adds	r3, r7, r3
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d100      	bne.n	8006826 <HAL_UART_IRQHandler+0x86>
 8006824:	e11e      	b.n	8006a64 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006826:	239c      	movs	r3, #156	; 0x9c
 8006828:	18fb      	adds	r3, r7, r3
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a8a      	ldr	r2, [pc, #552]	; (8006a58 <HAL_UART_IRQHandler+0x2b8>)
 800682e:	4013      	ands	r3, r2
 8006830:	d106      	bne.n	8006840 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006832:	23a0      	movs	r3, #160	; 0xa0
 8006834:	18fb      	adds	r3, r7, r3
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a88      	ldr	r2, [pc, #544]	; (8006a5c <HAL_UART_IRQHandler+0x2bc>)
 800683a:	4013      	ands	r3, r2
 800683c:	d100      	bne.n	8006840 <HAL_UART_IRQHandler+0xa0>
 800683e:	e111      	b.n	8006a64 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006840:	23a4      	movs	r3, #164	; 0xa4
 8006842:	18fb      	adds	r3, r7, r3
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2201      	movs	r2, #1
 8006848:	4013      	ands	r3, r2
 800684a:	d012      	beq.n	8006872 <HAL_UART_IRQHandler+0xd2>
 800684c:	23a0      	movs	r3, #160	; 0xa0
 800684e:	18fb      	adds	r3, r7, r3
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	2380      	movs	r3, #128	; 0x80
 8006854:	005b      	lsls	r3, r3, #1
 8006856:	4013      	ands	r3, r2
 8006858:	d00b      	beq.n	8006872 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2201      	movs	r2, #1
 8006860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	228c      	movs	r2, #140	; 0x8c
 8006866:	589b      	ldr	r3, [r3, r2]
 8006868:	2201      	movs	r2, #1
 800686a:	431a      	orrs	r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	218c      	movs	r1, #140	; 0x8c
 8006870:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006872:	23a4      	movs	r3, #164	; 0xa4
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2202      	movs	r2, #2
 800687a:	4013      	ands	r3, r2
 800687c:	d011      	beq.n	80068a2 <HAL_UART_IRQHandler+0x102>
 800687e:	239c      	movs	r3, #156	; 0x9c
 8006880:	18fb      	adds	r3, r7, r3
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	2201      	movs	r2, #1
 8006886:	4013      	ands	r3, r2
 8006888:	d00b      	beq.n	80068a2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2202      	movs	r2, #2
 8006890:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	228c      	movs	r2, #140	; 0x8c
 8006896:	589b      	ldr	r3, [r3, r2]
 8006898:	2204      	movs	r2, #4
 800689a:	431a      	orrs	r2, r3
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	218c      	movs	r1, #140	; 0x8c
 80068a0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068a2:	23a4      	movs	r3, #164	; 0xa4
 80068a4:	18fb      	adds	r3, r7, r3
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	2204      	movs	r2, #4
 80068aa:	4013      	ands	r3, r2
 80068ac:	d011      	beq.n	80068d2 <HAL_UART_IRQHandler+0x132>
 80068ae:	239c      	movs	r3, #156	; 0x9c
 80068b0:	18fb      	adds	r3, r7, r3
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2201      	movs	r2, #1
 80068b6:	4013      	ands	r3, r2
 80068b8:	d00b      	beq.n	80068d2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2204      	movs	r2, #4
 80068c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	228c      	movs	r2, #140	; 0x8c
 80068c6:	589b      	ldr	r3, [r3, r2]
 80068c8:	2202      	movs	r2, #2
 80068ca:	431a      	orrs	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	218c      	movs	r1, #140	; 0x8c
 80068d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80068d2:	23a4      	movs	r3, #164	; 0xa4
 80068d4:	18fb      	adds	r3, r7, r3
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2208      	movs	r2, #8
 80068da:	4013      	ands	r3, r2
 80068dc:	d017      	beq.n	800690e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068de:	23a0      	movs	r3, #160	; 0xa0
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2220      	movs	r2, #32
 80068e6:	4013      	ands	r3, r2
 80068e8:	d105      	bne.n	80068f6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80068ea:	239c      	movs	r3, #156	; 0x9c
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a59      	ldr	r2, [pc, #356]	; (8006a58 <HAL_UART_IRQHandler+0x2b8>)
 80068f2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80068f4:	d00b      	beq.n	800690e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2208      	movs	r2, #8
 80068fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	228c      	movs	r2, #140	; 0x8c
 8006902:	589b      	ldr	r3, [r3, r2]
 8006904:	2208      	movs	r2, #8
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	218c      	movs	r1, #140	; 0x8c
 800690c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800690e:	23a4      	movs	r3, #164	; 0xa4
 8006910:	18fb      	adds	r3, r7, r3
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	2380      	movs	r3, #128	; 0x80
 8006916:	011b      	lsls	r3, r3, #4
 8006918:	4013      	ands	r3, r2
 800691a:	d013      	beq.n	8006944 <HAL_UART_IRQHandler+0x1a4>
 800691c:	23a0      	movs	r3, #160	; 0xa0
 800691e:	18fb      	adds	r3, r7, r3
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	2380      	movs	r3, #128	; 0x80
 8006924:	04db      	lsls	r3, r3, #19
 8006926:	4013      	ands	r3, r2
 8006928:	d00c      	beq.n	8006944 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2280      	movs	r2, #128	; 0x80
 8006930:	0112      	lsls	r2, r2, #4
 8006932:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	228c      	movs	r2, #140	; 0x8c
 8006938:	589b      	ldr	r3, [r3, r2]
 800693a:	2220      	movs	r2, #32
 800693c:	431a      	orrs	r2, r3
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	218c      	movs	r1, #140	; 0x8c
 8006942:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	228c      	movs	r2, #140	; 0x8c
 8006948:	589b      	ldr	r3, [r3, r2]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d100      	bne.n	8006950 <HAL_UART_IRQHandler+0x1b0>
 800694e:	e230      	b.n	8006db2 <HAL_UART_IRQHandler+0x612>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006950:	23a4      	movs	r3, #164	; 0xa4
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2220      	movs	r2, #32
 8006958:	4013      	ands	r3, r2
 800695a:	d015      	beq.n	8006988 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800695c:	23a0      	movs	r3, #160	; 0xa0
 800695e:	18fb      	adds	r3, r7, r3
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2220      	movs	r2, #32
 8006964:	4013      	ands	r3, r2
 8006966:	d106      	bne.n	8006976 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006968:	239c      	movs	r3, #156	; 0x9c
 800696a:	18fb      	adds	r3, r7, r3
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	2380      	movs	r3, #128	; 0x80
 8006970:	055b      	lsls	r3, r3, #21
 8006972:	4013      	ands	r3, r2
 8006974:	d008      	beq.n	8006988 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800697a:	2b00      	cmp	r3, #0
 800697c:	d004      	beq.n	8006988 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	0010      	movs	r0, r2
 8006986:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	228c      	movs	r2, #140	; 0x8c
 800698c:	589b      	ldr	r3, [r3, r2]
 800698e:	2194      	movs	r1, #148	; 0x94
 8006990:	187a      	adds	r2, r7, r1
 8006992:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2240      	movs	r2, #64	; 0x40
 800699c:	4013      	ands	r3, r2
 800699e:	2b40      	cmp	r3, #64	; 0x40
 80069a0:	d004      	beq.n	80069ac <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069a2:	187b      	adds	r3, r7, r1
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2228      	movs	r2, #40	; 0x28
 80069a8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069aa:	d047      	beq.n	8006a3c <HAL_UART_IRQHandler+0x29c>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	0018      	movs	r0, r3
 80069b0:	f000 fe68 	bl	8007684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	2240      	movs	r2, #64	; 0x40
 80069bc:	4013      	ands	r3, r2
 80069be:	2b40      	cmp	r3, #64	; 0x40
 80069c0:	d137      	bne.n	8006a32 <HAL_UART_IRQHandler+0x292>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069c2:	f3ef 8310 	mrs	r3, PRIMASK
 80069c6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80069c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069ca:	2090      	movs	r0, #144	; 0x90
 80069cc:	183a      	adds	r2, r7, r0
 80069ce:	6013      	str	r3, [r2, #0]
 80069d0:	2301      	movs	r3, #1
 80069d2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d6:	f383 8810 	msr	PRIMASK, r3
}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689a      	ldr	r2, [r3, #8]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2140      	movs	r1, #64	; 0x40
 80069e8:	438a      	bics	r2, r1
 80069ea:	609a      	str	r2, [r3, #8]
 80069ec:	183b      	adds	r3, r7, r0
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80069f4:	f383 8810 	msr	PRIMASK, r3
}
 80069f8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d012      	beq.n	8006a28 <HAL_UART_IRQHandler+0x288>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a06:	4a16      	ldr	r2, [pc, #88]	; (8006a60 <HAL_UART_IRQHandler+0x2c0>)
 8006a08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a0e:	0018      	movs	r0, r3
 8006a10:	f7fd fbde 	bl	80041d0 <HAL_DMA_Abort_IT>
 8006a14:	1e03      	subs	r3, r0, #0
 8006a16:	d01a      	beq.n	8006a4e <HAL_UART_IRQHandler+0x2ae>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a22:	0018      	movs	r0, r3
 8006a24:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a26:	e012      	b.n	8006a4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	0018      	movs	r0, r3
 8006a2c:	f000 f9da 	bl	8006de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a30:	e00d      	b.n	8006a4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	0018      	movs	r0, r3
 8006a36:	f000 f9d5 	bl	8006de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a3a:	e008      	b.n	8006a4e <HAL_UART_IRQHandler+0x2ae>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	0018      	movs	r0, r3
 8006a40:	f000 f9d0 	bl	8006de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	228c      	movs	r2, #140	; 0x8c
 8006a48:	2100      	movs	r1, #0
 8006a4a:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006a4c:	e1b1      	b.n	8006db2 <HAL_UART_IRQHandler+0x612>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4e:	46c0      	nop			; (mov r8, r8)
    return;
 8006a50:	e1af      	b.n	8006db2 <HAL_UART_IRQHandler+0x612>
 8006a52:	46c0      	nop			; (mov r8, r8)
 8006a54:	0000080f 	.word	0x0000080f
 8006a58:	10000001 	.word	0x10000001
 8006a5c:	04000120 	.word	0x04000120
 8006a60:	08007751 	.word	0x08007751

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d000      	beq.n	8006a6e <HAL_UART_IRQHandler+0x2ce>
 8006a6c:	e135      	b.n	8006cda <HAL_UART_IRQHandler+0x53a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006a6e:	23a4      	movs	r3, #164	; 0xa4
 8006a70:	18fb      	adds	r3, r7, r3
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2210      	movs	r2, #16
 8006a76:	4013      	ands	r3, r2
 8006a78:	d100      	bne.n	8006a7c <HAL_UART_IRQHandler+0x2dc>
 8006a7a:	e12e      	b.n	8006cda <HAL_UART_IRQHandler+0x53a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006a7c:	23a0      	movs	r3, #160	; 0xa0
 8006a7e:	18fb      	adds	r3, r7, r3
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2210      	movs	r2, #16
 8006a84:	4013      	ands	r3, r2
 8006a86:	d100      	bne.n	8006a8a <HAL_UART_IRQHandler+0x2ea>
 8006a88:	e127      	b.n	8006cda <HAL_UART_IRQHandler+0x53a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2210      	movs	r2, #16
 8006a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2240      	movs	r2, #64	; 0x40
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d000      	beq.n	8006aa2 <HAL_UART_IRQHandler+0x302>
 8006aa0:	e09e      	b.n	8006be0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685a      	ldr	r2, [r3, #4]
 8006aaa:	217e      	movs	r1, #126	; 0x7e
 8006aac:	187b      	adds	r3, r7, r1
 8006aae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006ab0:	187b      	adds	r3, r7, r1
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d100      	bne.n	8006aba <HAL_UART_IRQHandler+0x31a>
 8006ab8:	e17d      	b.n	8006db6 <HAL_UART_IRQHandler+0x616>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	225c      	movs	r2, #92	; 0x5c
 8006abe:	5a9b      	ldrh	r3, [r3, r2]
 8006ac0:	187a      	adds	r2, r7, r1
 8006ac2:	8812      	ldrh	r2, [r2, #0]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d300      	bcc.n	8006aca <HAL_UART_IRQHandler+0x32a>
 8006ac8:	e175      	b.n	8006db6 <HAL_UART_IRQHandler+0x616>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	187a      	adds	r2, r7, r1
 8006ace:	215e      	movs	r1, #94	; 0x5e
 8006ad0:	8812      	ldrh	r2, [r2, #0]
 8006ad2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	2220      	movs	r2, #32
 8006ade:	4013      	ands	r3, r2
 8006ae0:	d16f      	bne.n	8006bc2 <HAL_UART_IRQHandler+0x422>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ae6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aea:	67bb      	str	r3, [r7, #120]	; 0x78
 8006aec:	2301      	movs	r3, #1
 8006aee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af2:	f383 8810 	msr	PRIMASK, r3
}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	49b1      	ldr	r1, [pc, #708]	; (8006dc8 <HAL_UART_IRQHandler+0x628>)
 8006b04:	400a      	ands	r2, r1
 8006b06:	601a      	str	r2, [r3, #0]
 8006b08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b0e:	f383 8810 	msr	PRIMASK, r3
}
 8006b12:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b14:	f3ef 8310 	mrs	r3, PRIMASK
 8006b18:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1c:	677b      	str	r3, [r7, #116]	; 0x74
 8006b1e:	2301      	movs	r3, #1
 8006b20:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b24:	f383 8810 	msr	PRIMASK, r3
}
 8006b28:	46c0      	nop			; (mov r8, r8)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2101      	movs	r1, #1
 8006b36:	438a      	bics	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]
 8006b3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b3c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b40:	f383 8810 	msr	PRIMASK, r3
}
 8006b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b46:	f3ef 8310 	mrs	r3, PRIMASK
 8006b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b4e:	673b      	str	r3, [r7, #112]	; 0x70
 8006b50:	2301      	movs	r3, #1
 8006b52:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b56:	f383 8810 	msr	PRIMASK, r3
}
 8006b5a:	46c0      	nop			; (mov r8, r8)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	689a      	ldr	r2, [r3, #8]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	438a      	bics	r2, r1
 8006b6a:	609a      	str	r2, [r3, #8]
 8006b6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b6e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b72:	f383 8810 	msr	PRIMASK, r3
}
 8006b76:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2288      	movs	r2, #136	; 0x88
 8006b7c:	2120      	movs	r1, #32
 8006b7e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b86:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b90:	2301      	movs	r3, #1
 8006b92:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b96:	f383 8810 	msr	PRIMASK, r3
}
 8006b9a:	46c0      	nop			; (mov r8, r8)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2110      	movs	r1, #16
 8006ba8:	438a      	bics	r2, r1
 8006baa:	601a      	str	r2, [r3, #0]
 8006bac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006bae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bb2:	f383 8810 	msr	PRIMASK, r3
}
 8006bb6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbc:	0018      	movs	r0, r3
 8006bbe:	f7fd faa5 	bl	800410c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	225c      	movs	r2, #92	; 0x5c
 8006bc6:	5a9a      	ldrh	r2, [r3, r2]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	215e      	movs	r1, #94	; 0x5e
 8006bcc:	5a5b      	ldrh	r3, [r3, r1]
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	1ad3      	subs	r3, r2, r3
 8006bd2:	b29a      	uxth	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	0011      	movs	r1, r2
 8006bd8:	0018      	movs	r0, r3
 8006bda:	f000 f90b 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bde:	e0ea      	b.n	8006db6 <HAL_UART_IRQHandler+0x616>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	225c      	movs	r2, #92	; 0x5c
 8006be4:	5a99      	ldrh	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	225e      	movs	r2, #94	; 0x5e
 8006bea:	5a9b      	ldrh	r3, [r3, r2]
 8006bec:	b29a      	uxth	r2, r3
 8006bee:	208e      	movs	r0, #142	; 0x8e
 8006bf0:	183b      	adds	r3, r7, r0
 8006bf2:	1a8a      	subs	r2, r1, r2
 8006bf4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	225e      	movs	r2, #94	; 0x5e
 8006bfa:	5a9b      	ldrh	r3, [r3, r2]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d100      	bne.n	8006c04 <HAL_UART_IRQHandler+0x464>
 8006c02:	e0da      	b.n	8006dba <HAL_UART_IRQHandler+0x61a>
          && (nb_rx_data > 0U))
 8006c04:	183b      	adds	r3, r7, r0
 8006c06:	881b      	ldrh	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d100      	bne.n	8006c0e <HAL_UART_IRQHandler+0x46e>
 8006c0c:	e0d5      	b.n	8006dba <HAL_UART_IRQHandler+0x61a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8006c12:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c14:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c16:	2488      	movs	r4, #136	; 0x88
 8006c18:	193a      	adds	r2, r7, r4
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f383 8810 	msr	PRIMASK, r3
}
 8006c26:	46c0      	nop			; (mov r8, r8)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4966      	ldr	r1, [pc, #408]	; (8006dcc <HAL_UART_IRQHandler+0x62c>)
 8006c34:	400a      	ands	r2, r1
 8006c36:	601a      	str	r2, [r3, #0]
 8006c38:	193b      	adds	r3, r7, r4
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f383 8810 	msr	PRIMASK, r3
}
 8006c44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c46:	f3ef 8310 	mrs	r3, PRIMASK
 8006c4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c4c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c4e:	2484      	movs	r4, #132	; 0x84
 8006c50:	193a      	adds	r2, r7, r4
 8006c52:	6013      	str	r3, [r2, #0]
 8006c54:	2301      	movs	r3, #1
 8006c56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f383 8810 	msr	PRIMASK, r3
}
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689a      	ldr	r2, [r3, #8]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4959      	ldr	r1, [pc, #356]	; (8006dd0 <HAL_UART_IRQHandler+0x630>)
 8006c6c:	400a      	ands	r2, r1
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	193b      	adds	r3, r7, r4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	f383 8810 	msr	PRIMASK, r3
}
 8006c7c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2288      	movs	r2, #136	; 0x88
 8006c82:	2120      	movs	r1, #32
 8006c84:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c92:	f3ef 8310 	mrs	r3, PRIMASK
 8006c96:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c9a:	2480      	movs	r4, #128	; 0x80
 8006c9c:	193a      	adds	r2, r7, r4
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	f383 8810 	msr	PRIMASK, r3
}
 8006caa:	46c0      	nop			; (mov r8, r8)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	2110      	movs	r1, #16
 8006cb8:	438a      	bics	r2, r1
 8006cba:	601a      	str	r2, [r3, #0]
 8006cbc:	193b      	adds	r3, r7, r4
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cc4:	f383 8810 	msr	PRIMASK, r3
}
 8006cc8:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006cca:	183b      	adds	r3, r7, r0
 8006ccc:	881a      	ldrh	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	0011      	movs	r1, r2
 8006cd2:	0018      	movs	r0, r3
 8006cd4:	f000 f88e 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cd8:	e06f      	b.n	8006dba <HAL_UART_IRQHandler+0x61a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cda:	23a4      	movs	r3, #164	; 0xa4
 8006cdc:	18fb      	adds	r3, r7, r3
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	2380      	movs	r3, #128	; 0x80
 8006ce2:	035b      	lsls	r3, r3, #13
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	d010      	beq.n	8006d0a <HAL_UART_IRQHandler+0x56a>
 8006ce8:	239c      	movs	r3, #156	; 0x9c
 8006cea:	18fb      	adds	r3, r7, r3
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	2380      	movs	r3, #128	; 0x80
 8006cf0:	03db      	lsls	r3, r3, #15
 8006cf2:	4013      	ands	r3, r2
 8006cf4:	d009      	beq.n	8006d0a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2280      	movs	r2, #128	; 0x80
 8006cfc:	0352      	lsls	r2, r2, #13
 8006cfe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	0018      	movs	r0, r3
 8006d04:	f001 f9b8 	bl	8008078 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d08:	e05a      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d0a:	23a4      	movs	r3, #164	; 0xa4
 8006d0c:	18fb      	adds	r3, r7, r3
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2280      	movs	r2, #128	; 0x80
 8006d12:	4013      	ands	r3, r2
 8006d14:	d016      	beq.n	8006d44 <HAL_UART_IRQHandler+0x5a4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d16:	23a0      	movs	r3, #160	; 0xa0
 8006d18:	18fb      	adds	r3, r7, r3
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2280      	movs	r2, #128	; 0x80
 8006d1e:	4013      	ands	r3, r2
 8006d20:	d106      	bne.n	8006d30 <HAL_UART_IRQHandler+0x590>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d22:	239c      	movs	r3, #156	; 0x9c
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	2380      	movs	r3, #128	; 0x80
 8006d2a:	041b      	lsls	r3, r3, #16
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	d009      	beq.n	8006d44 <HAL_UART_IRQHandler+0x5a4>
  {
    if (huart->TxISR != NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d042      	beq.n	8006dbe <HAL_UART_IRQHandler+0x61e>
    {
      huart->TxISR(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3c:	687a      	ldr	r2, [r7, #4]
 8006d3e:	0010      	movs	r0, r2
 8006d40:	4798      	blx	r3
    }
    return;
 8006d42:	e03c      	b.n	8006dbe <HAL_UART_IRQHandler+0x61e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d44:	23a4      	movs	r3, #164	; 0xa4
 8006d46:	18fb      	adds	r3, r7, r3
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	d00a      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5c6>
 8006d50:	23a0      	movs	r3, #160	; 0xa0
 8006d52:	18fb      	adds	r3, r7, r3
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2240      	movs	r2, #64	; 0x40
 8006d58:	4013      	ands	r3, r2
 8006d5a:	d004      	beq.n	8006d66 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	0018      	movs	r0, r3
 8006d60:	f000 fd0d 	bl	800777e <UART_EndTransmit_IT>
    return;
 8006d64:	e02c      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d66:	23a4      	movs	r3, #164	; 0xa4
 8006d68:	18fb      	adds	r3, r7, r3
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	2380      	movs	r3, #128	; 0x80
 8006d6e:	041b      	lsls	r3, r3, #16
 8006d70:	4013      	ands	r3, r2
 8006d72:	d00b      	beq.n	8006d8c <HAL_UART_IRQHandler+0x5ec>
 8006d74:	23a0      	movs	r3, #160	; 0xa0
 8006d76:	18fb      	adds	r3, r7, r3
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	2380      	movs	r3, #128	; 0x80
 8006d7c:	05db      	lsls	r3, r3, #23
 8006d7e:	4013      	ands	r3, r2
 8006d80:	d004      	beq.n	8006d8c <HAL_UART_IRQHandler+0x5ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f001 f987 	bl	8008098 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d8a:	e019      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d8c:	23a4      	movs	r3, #164	; 0xa4
 8006d8e:	18fb      	adds	r3, r7, r3
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	2380      	movs	r3, #128	; 0x80
 8006d94:	045b      	lsls	r3, r3, #17
 8006d96:	4013      	ands	r3, r2
 8006d98:	d012      	beq.n	8006dc0 <HAL_UART_IRQHandler+0x620>
 8006d9a:	23a0      	movs	r3, #160	; 0xa0
 8006d9c:	18fb      	adds	r3, r7, r3
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da0d      	bge.n	8006dc0 <HAL_UART_IRQHandler+0x620>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	0018      	movs	r0, r3
 8006da8:	f001 f96e 	bl	8008088 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dac:	e008      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
      return;
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	e006      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
    return;
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	e004      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
      return;
 8006db6:	46c0      	nop			; (mov r8, r8)
 8006db8:	e002      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
      return;
 8006dba:	46c0      	nop			; (mov r8, r8)
 8006dbc:	e000      	b.n	8006dc0 <HAL_UART_IRQHandler+0x620>
    return;
 8006dbe:	46c0      	nop			; (mov r8, r8)
  }
}
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	b02a      	add	sp, #168	; 0xa8
 8006dc4:	bdb0      	pop	{r4, r5, r7, pc}
 8006dc6:	46c0      	nop			; (mov r8, r8)
 8006dc8:	fffffeff 	.word	0xfffffeff
 8006dcc:	fffffedf 	.word	0xfffffedf
 8006dd0:	effffffe 	.word	0xeffffffe

08006dd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ddc:	46c0      	nop			; (mov r8, r8)
 8006dde:	46bd      	mov	sp, r7
 8006de0:	b002      	add	sp, #8
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b082      	sub	sp, #8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b002      	add	sp, #8
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b082      	sub	sp, #8
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	000a      	movs	r2, r1
 8006dfe:	1cbb      	adds	r3, r7, #2
 8006e00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e02:	46c0      	nop			; (mov r8, r8)
 8006e04:	46bd      	mov	sp, r7
 8006e06:	b002      	add	sp, #8
 8006e08:	bd80      	pop	{r7, pc}
	...

08006e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b088      	sub	sp, #32
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e14:	231a      	movs	r3, #26
 8006e16:	18fb      	adds	r3, r7, r3
 8006e18:	2200      	movs	r2, #0
 8006e1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	691b      	ldr	r3, [r3, #16]
 8006e24:	431a      	orrs	r2, r3
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	695b      	ldr	r3, [r3, #20]
 8006e2a:	431a      	orrs	r2, r3
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	69db      	ldr	r3, [r3, #28]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4aa1      	ldr	r2, [pc, #644]	; (80070c0 <UART_SetConfig+0x2b4>)
 8006e3c:	4013      	ands	r3, r2
 8006e3e:	0019      	movs	r1, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	69fa      	ldr	r2, [r7, #28]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	4a9c      	ldr	r2, [pc, #624]	; (80070c4 <UART_SetConfig+0x2b8>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	0019      	movs	r1, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	69fa      	ldr	r2, [r7, #28]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	4a93      	ldr	r2, [pc, #588]	; (80070c8 <UART_SetConfig+0x2bc>)
 8006e7a:	4013      	ands	r3, r2
 8006e7c:	0019      	movs	r1, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69fa      	ldr	r2, [r7, #28]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8e:	220f      	movs	r2, #15
 8006e90:	4393      	bics	r3, r2
 8006e92:	0019      	movs	r1, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	430a      	orrs	r2, r1
 8006e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4a89      	ldr	r2, [pc, #548]	; (80070cc <UART_SetConfig+0x2c0>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d127      	bne.n	8006efa <UART_SetConfig+0xee>
 8006eaa:	4b89      	ldr	r3, [pc, #548]	; (80070d0 <UART_SetConfig+0x2c4>)
 8006eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006eae:	2203      	movs	r2, #3
 8006eb0:	4013      	ands	r3, r2
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d017      	beq.n	8006ee6 <UART_SetConfig+0xda>
 8006eb6:	d81b      	bhi.n	8006ef0 <UART_SetConfig+0xe4>
 8006eb8:	2b02      	cmp	r3, #2
 8006eba:	d00a      	beq.n	8006ed2 <UART_SetConfig+0xc6>
 8006ebc:	d818      	bhi.n	8006ef0 <UART_SetConfig+0xe4>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <UART_SetConfig+0xbc>
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d00a      	beq.n	8006edc <UART_SetConfig+0xd0>
 8006ec6:	e013      	b.n	8006ef0 <UART_SetConfig+0xe4>
 8006ec8:	231b      	movs	r3, #27
 8006eca:	18fb      	adds	r3, r7, r3
 8006ecc:	2200      	movs	r2, #0
 8006ece:	701a      	strb	r2, [r3, #0]
 8006ed0:	e021      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006ed2:	231b      	movs	r3, #27
 8006ed4:	18fb      	adds	r3, r7, r3
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	e01c      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006edc:	231b      	movs	r3, #27
 8006ede:	18fb      	adds	r3, r7, r3
 8006ee0:	2204      	movs	r2, #4
 8006ee2:	701a      	strb	r2, [r3, #0]
 8006ee4:	e017      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006ee6:	231b      	movs	r3, #27
 8006ee8:	18fb      	adds	r3, r7, r3
 8006eea:	2208      	movs	r2, #8
 8006eec:	701a      	strb	r2, [r3, #0]
 8006eee:	e012      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006ef0:	231b      	movs	r3, #27
 8006ef2:	18fb      	adds	r3, r7, r3
 8006ef4:	2210      	movs	r2, #16
 8006ef6:	701a      	strb	r2, [r3, #0]
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	4a75      	ldr	r2, [pc, #468]	; (80070d4 <UART_SetConfig+0x2c8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d104      	bne.n	8006f0e <UART_SetConfig+0x102>
 8006f04:	231b      	movs	r3, #27
 8006f06:	18fb      	adds	r3, r7, r3
 8006f08:	2200      	movs	r2, #0
 8006f0a:	701a      	strb	r2, [r3, #0]
 8006f0c:	e003      	b.n	8006f16 <UART_SetConfig+0x10a>
 8006f0e:	231b      	movs	r3, #27
 8006f10:	18fb      	adds	r3, r7, r3
 8006f12:	2210      	movs	r2, #16
 8006f14:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	2380      	movs	r3, #128	; 0x80
 8006f1c:	021b      	lsls	r3, r3, #8
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d000      	beq.n	8006f24 <UART_SetConfig+0x118>
 8006f22:	e066      	b.n	8006ff2 <UART_SetConfig+0x1e6>
  {
    switch (clocksource)
 8006f24:	231b      	movs	r3, #27
 8006f26:	18fb      	adds	r3, r7, r3
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	2b08      	cmp	r3, #8
 8006f2c:	d015      	beq.n	8006f5a <UART_SetConfig+0x14e>
 8006f2e:	dc18      	bgt.n	8006f62 <UART_SetConfig+0x156>
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d00d      	beq.n	8006f50 <UART_SetConfig+0x144>
 8006f34:	dc15      	bgt.n	8006f62 <UART_SetConfig+0x156>
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d002      	beq.n	8006f40 <UART_SetConfig+0x134>
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d005      	beq.n	8006f4a <UART_SetConfig+0x13e>
 8006f3e:	e010      	b.n	8006f62 <UART_SetConfig+0x156>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f40:	f7fe fd48 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8006f44:	0003      	movs	r3, r0
 8006f46:	617b      	str	r3, [r7, #20]
        break;
 8006f48:	e012      	b.n	8006f70 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f4a:	4b63      	ldr	r3, [pc, #396]	; (80070d8 <UART_SetConfig+0x2cc>)
 8006f4c:	617b      	str	r3, [r7, #20]
        break;
 8006f4e:	e00f      	b.n	8006f70 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f50:	f7fe fcb4 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8006f54:	0003      	movs	r3, r0
 8006f56:	617b      	str	r3, [r7, #20]
        break;
 8006f58:	e00a      	b.n	8006f70 <UART_SetConfig+0x164>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	021b      	lsls	r3, r3, #8
 8006f5e:	617b      	str	r3, [r7, #20]
        break;
 8006f60:	e006      	b.n	8006f70 <UART_SetConfig+0x164>
      default:
        pclk = 0U;
 8006f62:	2300      	movs	r3, #0
 8006f64:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006f66:	231a      	movs	r3, #26
 8006f68:	18fb      	adds	r3, r7, r3
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	701a      	strb	r2, [r3, #0]
        break;
 8006f6e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d100      	bne.n	8006f78 <UART_SetConfig+0x16c>
 8006f76:	e08e      	b.n	8007096 <UART_SetConfig+0x28a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f7c:	4b57      	ldr	r3, [pc, #348]	; (80070dc <UART_SetConfig+0x2d0>)
 8006f7e:	0052      	lsls	r2, r2, #1
 8006f80:	5ad3      	ldrh	r3, [r2, r3]
 8006f82:	0019      	movs	r1, r3
 8006f84:	6978      	ldr	r0, [r7, #20]
 8006f86:	f7f9 f8c5 	bl	8000114 <__udivsi3>
 8006f8a:	0003      	movs	r3, r0
 8006f8c:	005a      	lsls	r2, r3, #1
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	085b      	lsrs	r3, r3, #1
 8006f94:	18d2      	adds	r2, r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	0019      	movs	r1, r3
 8006f9c:	0010      	movs	r0, r2
 8006f9e:	f7f9 f8b9 	bl	8000114 <__udivsi3>
 8006fa2:	0003      	movs	r3, r0
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	2b0f      	cmp	r3, #15
 8006fac:	d91c      	bls.n	8006fe8 <UART_SetConfig+0x1dc>
 8006fae:	693a      	ldr	r2, [r7, #16]
 8006fb0:	2380      	movs	r3, #128	; 0x80
 8006fb2:	025b      	lsls	r3, r3, #9
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d217      	bcs.n	8006fe8 <UART_SetConfig+0x1dc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	b29a      	uxth	r2, r3
 8006fbc:	200e      	movs	r0, #14
 8006fbe:	183b      	adds	r3, r7, r0
 8006fc0:	210f      	movs	r1, #15
 8006fc2:	438a      	bics	r2, r1
 8006fc4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	085b      	lsrs	r3, r3, #1
 8006fca:	b29b      	uxth	r3, r3
 8006fcc:	2207      	movs	r2, #7
 8006fce:	4013      	ands	r3, r2
 8006fd0:	b299      	uxth	r1, r3
 8006fd2:	183b      	adds	r3, r7, r0
 8006fd4:	183a      	adds	r2, r7, r0
 8006fd6:	8812      	ldrh	r2, [r2, #0]
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	183a      	adds	r2, r7, r0
 8006fe2:	8812      	ldrh	r2, [r2, #0]
 8006fe4:	60da      	str	r2, [r3, #12]
 8006fe6:	e056      	b.n	8007096 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 8006fe8:	231a      	movs	r3, #26
 8006fea:	18fb      	adds	r3, r7, r3
 8006fec:	2201      	movs	r2, #1
 8006fee:	701a      	strb	r2, [r3, #0]
 8006ff0:	e051      	b.n	8007096 <UART_SetConfig+0x28a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006ff2:	231b      	movs	r3, #27
 8006ff4:	18fb      	adds	r3, r7, r3
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d015      	beq.n	8007028 <UART_SetConfig+0x21c>
 8006ffc:	dc18      	bgt.n	8007030 <UART_SetConfig+0x224>
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d00d      	beq.n	800701e <UART_SetConfig+0x212>
 8007002:	dc15      	bgt.n	8007030 <UART_SetConfig+0x224>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <UART_SetConfig+0x202>
 8007008:	2b02      	cmp	r3, #2
 800700a:	d005      	beq.n	8007018 <UART_SetConfig+0x20c>
 800700c:	e010      	b.n	8007030 <UART_SetConfig+0x224>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800700e:	f7fe fce1 	bl	80059d4 <HAL_RCC_GetPCLK1Freq>
 8007012:	0003      	movs	r3, r0
 8007014:	617b      	str	r3, [r7, #20]
        break;
 8007016:	e012      	b.n	800703e <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007018:	4b2f      	ldr	r3, [pc, #188]	; (80070d8 <UART_SetConfig+0x2cc>)
 800701a:	617b      	str	r3, [r7, #20]
        break;
 800701c:	e00f      	b.n	800703e <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800701e:	f7fe fc4d 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 8007022:	0003      	movs	r3, r0
 8007024:	617b      	str	r3, [r7, #20]
        break;
 8007026:	e00a      	b.n	800703e <UART_SetConfig+0x232>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007028:	2380      	movs	r3, #128	; 0x80
 800702a:	021b      	lsls	r3, r3, #8
 800702c:	617b      	str	r3, [r7, #20]
        break;
 800702e:	e006      	b.n	800703e <UART_SetConfig+0x232>
      default:
        pclk = 0U;
 8007030:	2300      	movs	r3, #0
 8007032:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007034:	231a      	movs	r3, #26
 8007036:	18fb      	adds	r3, r7, r3
 8007038:	2201      	movs	r2, #1
 800703a:	701a      	strb	r2, [r3, #0]
        break;
 800703c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d028      	beq.n	8007096 <UART_SetConfig+0x28a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007048:	4b24      	ldr	r3, [pc, #144]	; (80070dc <UART_SetConfig+0x2d0>)
 800704a:	0052      	lsls	r2, r2, #1
 800704c:	5ad3      	ldrh	r3, [r2, r3]
 800704e:	0019      	movs	r1, r3
 8007050:	6978      	ldr	r0, [r7, #20]
 8007052:	f7f9 f85f 	bl	8000114 <__udivsi3>
 8007056:	0003      	movs	r3, r0
 8007058:	001a      	movs	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	085b      	lsrs	r3, r3, #1
 8007060:	18d2      	adds	r2, r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	0019      	movs	r1, r3
 8007068:	0010      	movs	r0, r2
 800706a:	f7f9 f853 	bl	8000114 <__udivsi3>
 800706e:	0003      	movs	r3, r0
 8007070:	b29b      	uxth	r3, r3
 8007072:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d909      	bls.n	800708e <UART_SetConfig+0x282>
 800707a:	693a      	ldr	r2, [r7, #16]
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	025b      	lsls	r3, r3, #9
 8007080:	429a      	cmp	r2, r3
 8007082:	d204      	bcs.n	800708e <UART_SetConfig+0x282>
      {
        huart->Instance->BRR = usartdiv;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	693a      	ldr	r2, [r7, #16]
 800708a:	60da      	str	r2, [r3, #12]
 800708c:	e003      	b.n	8007096 <UART_SetConfig+0x28a>
      }
      else
      {
        ret = HAL_ERROR;
 800708e:	231a      	movs	r3, #26
 8007090:	18fb      	adds	r3, r7, r3
 8007092:	2201      	movs	r2, #1
 8007094:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	226a      	movs	r2, #106	; 0x6a
 800709a:	2101      	movs	r1, #1
 800709c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2268      	movs	r2, #104	; 0x68
 80070a2:	2101      	movs	r1, #1
 80070a4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	2200      	movs	r2, #0
 80070b0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80070b2:	231a      	movs	r3, #26
 80070b4:	18fb      	adds	r3, r7, r3
 80070b6:	781b      	ldrb	r3, [r3, #0]
}
 80070b8:	0018      	movs	r0, r3
 80070ba:	46bd      	mov	sp, r7
 80070bc:	b008      	add	sp, #32
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	cfff69f3 	.word	0xcfff69f3
 80070c4:	ffffcfff 	.word	0xffffcfff
 80070c8:	11fff4ff 	.word	0x11fff4ff
 80070cc:	40013800 	.word	0x40013800
 80070d0:	40021000 	.word	0x40021000
 80070d4:	40004400 	.word	0x40004400
 80070d8:	00f42400 	.word	0x00f42400
 80070dc:	08009218 	.word	0x08009218

080070e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ec:	2201      	movs	r2, #1
 80070ee:	4013      	ands	r3, r2
 80070f0:	d00b      	beq.n	800710a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	685b      	ldr	r3, [r3, #4]
 80070f8:	4a4a      	ldr	r2, [pc, #296]	; (8007224 <UART_AdvFeatureConfig+0x144>)
 80070fa:	4013      	ands	r3, r2
 80070fc:	0019      	movs	r1, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	430a      	orrs	r2, r1
 8007108:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710e:	2202      	movs	r2, #2
 8007110:	4013      	ands	r3, r2
 8007112:	d00b      	beq.n	800712c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	4a43      	ldr	r2, [pc, #268]	; (8007228 <UART_AdvFeatureConfig+0x148>)
 800711c:	4013      	ands	r3, r2
 800711e:	0019      	movs	r1, r3
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	430a      	orrs	r2, r1
 800712a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007130:	2204      	movs	r2, #4
 8007132:	4013      	ands	r3, r2
 8007134:	d00b      	beq.n	800714e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	4a3b      	ldr	r2, [pc, #236]	; (800722c <UART_AdvFeatureConfig+0x14c>)
 800713e:	4013      	ands	r3, r2
 8007140:	0019      	movs	r1, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	430a      	orrs	r2, r1
 800714c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	2208      	movs	r2, #8
 8007154:	4013      	ands	r3, r2
 8007156:	d00b      	beq.n	8007170 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	4a34      	ldr	r2, [pc, #208]	; (8007230 <UART_AdvFeatureConfig+0x150>)
 8007160:	4013      	ands	r3, r2
 8007162:	0019      	movs	r1, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	430a      	orrs	r2, r1
 800716e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007174:	2210      	movs	r2, #16
 8007176:	4013      	ands	r3, r2
 8007178:	d00b      	beq.n	8007192 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	4a2c      	ldr	r2, [pc, #176]	; (8007234 <UART_AdvFeatureConfig+0x154>)
 8007182:	4013      	ands	r3, r2
 8007184:	0019      	movs	r1, r3
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	430a      	orrs	r2, r1
 8007190:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007196:	2220      	movs	r2, #32
 8007198:	4013      	ands	r3, r2
 800719a:	d00b      	beq.n	80071b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	4a25      	ldr	r2, [pc, #148]	; (8007238 <UART_AdvFeatureConfig+0x158>)
 80071a4:	4013      	ands	r3, r2
 80071a6:	0019      	movs	r1, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b8:	2240      	movs	r2, #64	; 0x40
 80071ba:	4013      	ands	r3, r2
 80071bc:	d01d      	beq.n	80071fa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <UART_AdvFeatureConfig+0x15c>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	0019      	movs	r1, r3
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80071da:	2380      	movs	r3, #128	; 0x80
 80071dc:	035b      	lsls	r3, r3, #13
 80071de:	429a      	cmp	r2, r3
 80071e0:	d10b      	bne.n	80071fa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	4a15      	ldr	r2, [pc, #84]	; (8007240 <UART_AdvFeatureConfig+0x160>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	0019      	movs	r1, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	430a      	orrs	r2, r1
 80071f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	2280      	movs	r2, #128	; 0x80
 8007200:	4013      	ands	r3, r2
 8007202:	d00b      	beq.n	800721c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	4a0e      	ldr	r2, [pc, #56]	; (8007244 <UART_AdvFeatureConfig+0x164>)
 800720c:	4013      	ands	r3, r2
 800720e:	0019      	movs	r1, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	430a      	orrs	r2, r1
 800721a:	605a      	str	r2, [r3, #4]
  }
}
 800721c:	46c0      	nop			; (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b002      	add	sp, #8
 8007222:	bd80      	pop	{r7, pc}
 8007224:	fffdffff 	.word	0xfffdffff
 8007228:	fffeffff 	.word	0xfffeffff
 800722c:	fffbffff 	.word	0xfffbffff
 8007230:	ffff7fff 	.word	0xffff7fff
 8007234:	ffffefff 	.word	0xffffefff
 8007238:	ffffdfff 	.word	0xffffdfff
 800723c:	ffefffff 	.word	0xffefffff
 8007240:	ff9fffff 	.word	0xff9fffff
 8007244:	fff7ffff 	.word	0xfff7ffff

08007248 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b086      	sub	sp, #24
 800724c:	af02      	add	r7, sp, #8
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	228c      	movs	r2, #140	; 0x8c
 8007254:	2100      	movs	r1, #0
 8007256:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007258:	f7fb fec0 	bl	8002fdc <HAL_GetTick>
 800725c:	0003      	movs	r3, r0
 800725e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	2208      	movs	r2, #8
 8007268:	4013      	ands	r3, r2
 800726a:	2b08      	cmp	r3, #8
 800726c:	d10c      	bne.n	8007288 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2280      	movs	r2, #128	; 0x80
 8007272:	0391      	lsls	r1, r2, #14
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	4a18      	ldr	r2, [pc, #96]	; (80072d8 <UART_CheckIdleState+0x90>)
 8007278:	9200      	str	r2, [sp, #0]
 800727a:	2200      	movs	r2, #0
 800727c:	f000 f82e 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 8007280:	1e03      	subs	r3, r0, #0
 8007282:	d001      	beq.n	8007288 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007284:	2303      	movs	r3, #3
 8007286:	e023      	b.n	80072d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2204      	movs	r2, #4
 8007290:	4013      	ands	r3, r2
 8007292:	2b04      	cmp	r3, #4
 8007294:	d10c      	bne.n	80072b0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2280      	movs	r2, #128	; 0x80
 800729a:	03d1      	lsls	r1, r2, #15
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	4a0e      	ldr	r2, [pc, #56]	; (80072d8 <UART_CheckIdleState+0x90>)
 80072a0:	9200      	str	r2, [sp, #0]
 80072a2:	2200      	movs	r2, #0
 80072a4:	f000 f81a 	bl	80072dc <UART_WaitOnFlagUntilTimeout>
 80072a8:	1e03      	subs	r3, r0, #0
 80072aa:	d001      	beq.n	80072b0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e00f      	b.n	80072d0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2284      	movs	r2, #132	; 0x84
 80072b4:	2120      	movs	r1, #32
 80072b6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2288      	movs	r2, #136	; 0x88
 80072bc:	2120      	movs	r1, #32
 80072be:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2280      	movs	r2, #128	; 0x80
 80072ca:	2100      	movs	r1, #0
 80072cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	0018      	movs	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b004      	add	sp, #16
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	01ffffff 	.word	0x01ffffff

080072dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b094      	sub	sp, #80	; 0x50
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	603b      	str	r3, [r7, #0]
 80072e8:	1dfb      	adds	r3, r7, #7
 80072ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ec:	e0a7      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f0:	3301      	adds	r3, #1
 80072f2:	d100      	bne.n	80072f6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80072f4:	e0a3      	b.n	800743e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072f6:	f7fb fe71 	bl	8002fdc <HAL_GetTick>
 80072fa:	0002      	movs	r2, r0
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	1ad3      	subs	r3, r2, r3
 8007300:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007302:	429a      	cmp	r2, r3
 8007304:	d302      	bcc.n	800730c <UART_WaitOnFlagUntilTimeout+0x30>
 8007306:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007308:	2b00      	cmp	r3, #0
 800730a:	d13f      	bne.n	800738c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800730c:	f3ef 8310 	mrs	r3, PRIMASK
 8007310:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007314:	647b      	str	r3, [r7, #68]	; 0x44
 8007316:	2301      	movs	r3, #1
 8007318:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	f383 8810 	msr	PRIMASK, r3
}
 8007320:	46c0      	nop			; (mov r8, r8)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681a      	ldr	r2, [r3, #0]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	494e      	ldr	r1, [pc, #312]	; (8007468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800732e:	400a      	ands	r2, r1
 8007330:	601a      	str	r2, [r3, #0]
 8007332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007334:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	f383 8810 	msr	PRIMASK, r3
}
 800733c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800733e:	f3ef 8310 	mrs	r3, PRIMASK
 8007342:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007346:	643b      	str	r3, [r7, #64]	; 0x40
 8007348:	2301      	movs	r3, #1
 800734a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800734e:	f383 8810 	msr	PRIMASK, r3
}
 8007352:	46c0      	nop			; (mov r8, r8)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2101      	movs	r1, #1
 8007360:	438a      	bics	r2, r1
 8007362:	609a      	str	r2, [r3, #8]
 8007364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007366:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800736a:	f383 8810 	msr	PRIMASK, r3
}
 800736e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2284      	movs	r2, #132	; 0x84
 8007374:	2120      	movs	r1, #32
 8007376:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	2288      	movs	r2, #136	; 0x88
 800737c:	2120      	movs	r1, #32
 800737e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2280      	movs	r2, #128	; 0x80
 8007384:	2100      	movs	r1, #0
 8007386:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007388:	2303      	movs	r3, #3
 800738a:	e069      	b.n	8007460 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2204      	movs	r2, #4
 8007394:	4013      	ands	r3, r2
 8007396:	d052      	beq.n	800743e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	2380      	movs	r3, #128	; 0x80
 80073a0:	011b      	lsls	r3, r3, #4
 80073a2:	401a      	ands	r2, r3
 80073a4:	2380      	movs	r3, #128	; 0x80
 80073a6:	011b      	lsls	r3, r3, #4
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d148      	bne.n	800743e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2280      	movs	r2, #128	; 0x80
 80073b2:	0112      	lsls	r2, r2, #4
 80073b4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073b6:	f3ef 8310 	mrs	r3, PRIMASK
 80073ba:	613b      	str	r3, [r7, #16]
  return(result);
 80073bc:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073c0:	2301      	movs	r3, #1
 80073c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	f383 8810 	msr	PRIMASK, r3
}
 80073ca:	46c0      	nop			; (mov r8, r8)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4924      	ldr	r1, [pc, #144]	; (8007468 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80073d8:	400a      	ands	r2, r1
 80073da:	601a      	str	r2, [r3, #0]
 80073dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073de:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e0:	69bb      	ldr	r3, [r7, #24]
 80073e2:	f383 8810 	msr	PRIMASK, r3
}
 80073e6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073e8:	f3ef 8310 	mrs	r3, PRIMASK
 80073ec:	61fb      	str	r3, [r7, #28]
  return(result);
 80073ee:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80073f2:	2301      	movs	r3, #1
 80073f4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	f383 8810 	msr	PRIMASK, r3
}
 80073fc:	46c0      	nop			; (mov r8, r8)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	689a      	ldr	r2, [r3, #8]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	2101      	movs	r1, #1
 800740a:	438a      	bics	r2, r1
 800740c:	609a      	str	r2, [r3, #8]
 800740e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	f383 8810 	msr	PRIMASK, r3
}
 8007418:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2284      	movs	r2, #132	; 0x84
 800741e:	2120      	movs	r1, #32
 8007420:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2288      	movs	r2, #136	; 0x88
 8007426:	2120      	movs	r1, #32
 8007428:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	228c      	movs	r2, #140	; 0x8c
 800742e:	2120      	movs	r1, #32
 8007430:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	2280      	movs	r2, #128	; 0x80
 8007436:	2100      	movs	r1, #0
 8007438:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e010      	b.n	8007460 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	69db      	ldr	r3, [r3, #28]
 8007444:	68ba      	ldr	r2, [r7, #8]
 8007446:	4013      	ands	r3, r2
 8007448:	68ba      	ldr	r2, [r7, #8]
 800744a:	1ad3      	subs	r3, r2, r3
 800744c:	425a      	negs	r2, r3
 800744e:	4153      	adcs	r3, r2
 8007450:	b2db      	uxtb	r3, r3
 8007452:	001a      	movs	r2, r3
 8007454:	1dfb      	adds	r3, r7, #7
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	429a      	cmp	r2, r3
 800745a:	d100      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0x182>
 800745c:	e747      	b.n	80072ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800745e:	2300      	movs	r3, #0
}
 8007460:	0018      	movs	r0, r3
 8007462:	46bd      	mov	sp, r7
 8007464:	b014      	add	sp, #80	; 0x50
 8007466:	bd80      	pop	{r7, pc}
 8007468:	fffffe5f 	.word	0xfffffe5f

0800746c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b094      	sub	sp, #80	; 0x50
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	1dbb      	adds	r3, r7, #6
 8007478:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	68ba      	ldr	r2, [r7, #8]
 800747e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	1dba      	adds	r2, r7, #6
 8007484:	215c      	movs	r1, #92	; 0x5c
 8007486:	8812      	ldrh	r2, [r2, #0]
 8007488:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1dba      	adds	r2, r7, #6
 800748e:	215e      	movs	r1, #94	; 0x5e
 8007490:	8812      	ldrh	r2, [r2, #0]
 8007492:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	2200      	movs	r2, #0
 8007498:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	689a      	ldr	r2, [r3, #8]
 800749e:	2380      	movs	r3, #128	; 0x80
 80074a0:	015b      	lsls	r3, r3, #5
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d10d      	bne.n	80074c2 <UART_Start_Receive_IT+0x56>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d104      	bne.n	80074b8 <UART_Start_Receive_IT+0x4c>
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2260      	movs	r2, #96	; 0x60
 80074b2:	496f      	ldr	r1, [pc, #444]	; (8007670 <UART_Start_Receive_IT+0x204>)
 80074b4:	5299      	strh	r1, [r3, r2]
 80074b6:	e02e      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2260      	movs	r2, #96	; 0x60
 80074bc:	21ff      	movs	r1, #255	; 0xff
 80074be:	5299      	strh	r1, [r3, r2]
 80074c0:	e029      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d10d      	bne.n	80074e6 <UART_Start_Receive_IT+0x7a>
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d104      	bne.n	80074dc <UART_Start_Receive_IT+0x70>
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2260      	movs	r2, #96	; 0x60
 80074d6:	21ff      	movs	r1, #255	; 0xff
 80074d8:	5299      	strh	r1, [r3, r2]
 80074da:	e01c      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2260      	movs	r2, #96	; 0x60
 80074e0:	217f      	movs	r1, #127	; 0x7f
 80074e2:	5299      	strh	r1, [r3, r2]
 80074e4:	e017      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	2380      	movs	r3, #128	; 0x80
 80074ec:	055b      	lsls	r3, r3, #21
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d10d      	bne.n	800750e <UART_Start_Receive_IT+0xa2>
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	691b      	ldr	r3, [r3, #16]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <UART_Start_Receive_IT+0x98>
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2260      	movs	r2, #96	; 0x60
 80074fe:	217f      	movs	r1, #127	; 0x7f
 8007500:	5299      	strh	r1, [r3, r2]
 8007502:	e008      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2260      	movs	r2, #96	; 0x60
 8007508:	213f      	movs	r1, #63	; 0x3f
 800750a:	5299      	strh	r1, [r3, r2]
 800750c:	e003      	b.n	8007516 <UART_Start_Receive_IT+0xaa>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	2260      	movs	r2, #96	; 0x60
 8007512:	2100      	movs	r1, #0
 8007514:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	228c      	movs	r2, #140	; 0x8c
 800751a:	2100      	movs	r1, #0
 800751c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2288      	movs	r2, #136	; 0x88
 8007522:	2122      	movs	r1, #34	; 0x22
 8007524:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007526:	f3ef 8310 	mrs	r3, PRIMASK
 800752a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800752c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007530:	2301      	movs	r3, #1
 8007532:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	f383 8810 	msr	PRIMASK, r3
}
 800753a:	46c0      	nop			; (mov r8, r8)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	689a      	ldr	r2, [r3, #8]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2101      	movs	r1, #1
 8007548:	430a      	orrs	r2, r1
 800754a:	609a      	str	r2, [r3, #8]
 800754c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007552:	f383 8810 	msr	PRIMASK, r3
}
 8007556:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800755c:	2380      	movs	r3, #128	; 0x80
 800755e:	059b      	lsls	r3, r3, #22
 8007560:	429a      	cmp	r2, r3
 8007562:	d150      	bne.n	8007606 <UART_Start_Receive_IT+0x19a>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2268      	movs	r2, #104	; 0x68
 8007568:	5a9b      	ldrh	r3, [r3, r2]
 800756a:	1dba      	adds	r2, r7, #6
 800756c:	8812      	ldrh	r2, [r2, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d349      	bcc.n	8007606 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	689a      	ldr	r2, [r3, #8]
 8007576:	2380      	movs	r3, #128	; 0x80
 8007578:	015b      	lsls	r3, r3, #5
 800757a:	429a      	cmp	r2, r3
 800757c:	d107      	bne.n	800758e <UART_Start_Receive_IT+0x122>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d103      	bne.n	800758e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a3a      	ldr	r2, [pc, #232]	; (8007674 <UART_Start_Receive_IT+0x208>)
 800758a:	671a      	str	r2, [r3, #112]	; 0x70
 800758c:	e002      	b.n	8007594 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	4a39      	ldr	r2, [pc, #228]	; (8007678 <UART_Start_Receive_IT+0x20c>)
 8007592:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2280      	movs	r2, #128	; 0x80
 8007598:	2100      	movs	r1, #0
 800759a:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800759c:	f3ef 8310 	mrs	r3, PRIMASK
 80075a0:	61fb      	str	r3, [r7, #28]
  return(result);
 80075a2:	69fb      	ldr	r3, [r7, #28]

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80075a6:	2301      	movs	r3, #1
 80075a8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	6a3b      	ldr	r3, [r7, #32]
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	46c0      	nop			; (mov r8, r8)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2180      	movs	r1, #128	; 0x80
 80075be:	0049      	lsls	r1, r1, #1
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]
 80075c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ca:	f383 8810 	msr	PRIMASK, r3
}
 80075ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d0:	f3ef 8310 	mrs	r3, PRIMASK
 80075d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80075d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80075d8:	647b      	str	r3, [r7, #68]	; 0x44
 80075da:	2301      	movs	r3, #1
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075e0:	f383 8810 	msr	PRIMASK, r3
}
 80075e4:	46c0      	nop			; (mov r8, r8)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2180      	movs	r1, #128	; 0x80
 80075f2:	0549      	lsls	r1, r1, #21
 80075f4:	430a      	orrs	r2, r1
 80075f6:	609a      	str	r2, [r3, #8]
 80075f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075fe:	f383 8810 	msr	PRIMASK, r3
}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	e02e      	b.n	8007664 <UART_Start_Receive_IT+0x1f8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	2380      	movs	r3, #128	; 0x80
 800760c:	015b      	lsls	r3, r3, #5
 800760e:	429a      	cmp	r2, r3
 8007610:	d107      	bne.n	8007622 <UART_Start_Receive_IT+0x1b6>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d103      	bne.n	8007622 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	4a17      	ldr	r2, [pc, #92]	; (800767c <UART_Start_Receive_IT+0x210>)
 800761e:	671a      	str	r2, [r3, #112]	; 0x70
 8007620:	e002      	b.n	8007628 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	4a16      	ldr	r2, [pc, #88]	; (8007680 <UART_Start_Receive_IT+0x214>)
 8007626:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2280      	movs	r2, #128	; 0x80
 800762c:	2100      	movs	r1, #0
 800762e:	5499      	strb	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007630:	f3ef 8310 	mrs	r3, PRIMASK
 8007634:	613b      	str	r3, [r7, #16]
  return(result);
 8007636:	693b      	ldr	r3, [r7, #16]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
 800763a:	2301      	movs	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f383 8810 	msr	PRIMASK, r3
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2190      	movs	r1, #144	; 0x90
 8007652:	0049      	lsls	r1, r1, #1
 8007654:	430a      	orrs	r2, r1
 8007656:	601a      	str	r2, [r3, #0]
 8007658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800765a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	f383 8810 	msr	PRIMASK, r3
}
 8007662:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	0018      	movs	r0, r3
 8007668:	46bd      	mov	sp, r7
 800766a:	b014      	add	sp, #80	; 0x50
 800766c:	bd80      	pop	{r7, pc}
 800766e:	46c0      	nop			; (mov r8, r8)
 8007670:	000001ff 	.word	0x000001ff
 8007674:	08007d95 	.word	0x08007d95
 8007678:	08007ab1 	.word	0x08007ab1
 800767c:	08007945 	.word	0x08007945
 8007680:	080077d9 	.word	0x080077d9

08007684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b08e      	sub	sp, #56	; 0x38
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768c:	f3ef 8310 	mrs	r3, PRIMASK
 8007690:	617b      	str	r3, [r7, #20]
  return(result);
 8007692:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
 8007696:	2301      	movs	r3, #1
 8007698:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	f383 8810 	msr	PRIMASK, r3
}
 80076a0:	46c0      	nop			; (mov r8, r8)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681a      	ldr	r2, [r3, #0]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4926      	ldr	r1, [pc, #152]	; (8007748 <UART_EndRxTransfer+0xc4>)
 80076ae:	400a      	ands	r2, r1
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f383 8810 	msr	PRIMASK, r3
}
 80076bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076be:	f3ef 8310 	mrs	r3, PRIMASK
 80076c2:	623b      	str	r3, [r7, #32]
  return(result);
 80076c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076c6:	633b      	str	r3, [r7, #48]	; 0x30
 80076c8:	2301      	movs	r3, #1
 80076ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ce:	f383 8810 	msr	PRIMASK, r3
}
 80076d2:	46c0      	nop			; (mov r8, r8)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689a      	ldr	r2, [r3, #8]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	491b      	ldr	r1, [pc, #108]	; (800774c <UART_EndRxTransfer+0xc8>)
 80076e0:	400a      	ands	r2, r1
 80076e2:	609a      	str	r2, [r3, #8]
 80076e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	f383 8810 	msr	PRIMASK, r3
}
 80076ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d118      	bne.n	800772a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f8:	f3ef 8310 	mrs	r3, PRIMASK
 80076fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007700:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007702:	2301      	movs	r3, #1
 8007704:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f383 8810 	msr	PRIMASK, r3
}
 800770c:	46c0      	nop			; (mov r8, r8)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2110      	movs	r1, #16
 800771a:	438a      	bics	r2, r1
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f383 8810 	msr	PRIMASK, r3
}
 8007728:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2288      	movs	r2, #136	; 0x88
 800772e:	2120      	movs	r1, #32
 8007730:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2200      	movs	r2, #0
 8007736:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800773e:	46c0      	nop			; (mov r8, r8)
 8007740:	46bd      	mov	sp, r7
 8007742:	b00e      	add	sp, #56	; 0x38
 8007744:	bd80      	pop	{r7, pc}
 8007746:	46c0      	nop			; (mov r8, r8)
 8007748:	fffffedf 	.word	0xfffffedf
 800774c:	effffffe 	.word	0xeffffffe

08007750 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800775c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	225e      	movs	r2, #94	; 0x5e
 8007762:	2100      	movs	r1, #0
 8007764:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2256      	movs	r2, #86	; 0x56
 800776a:	2100      	movs	r1, #0
 800776c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	0018      	movs	r0, r3
 8007772:	f7ff fb37 	bl	8006de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007776:	46c0      	nop			; (mov r8, r8)
 8007778:	46bd      	mov	sp, r7
 800777a:	b004      	add	sp, #16
 800777c:	bd80      	pop	{r7, pc}

0800777e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b086      	sub	sp, #24
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007786:	f3ef 8310 	mrs	r3, PRIMASK
 800778a:	60bb      	str	r3, [r7, #8]
  return(result);
 800778c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800778e:	617b      	str	r3, [r7, #20]
 8007790:	2301      	movs	r3, #1
 8007792:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f383 8810 	msr	PRIMASK, r3
}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	681a      	ldr	r2, [r3, #0]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2140      	movs	r1, #64	; 0x40
 80077a8:	438a      	bics	r2, r1
 80077aa:	601a      	str	r2, [r3, #0]
 80077ac:	697b      	ldr	r3, [r7, #20]
 80077ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	f383 8810 	msr	PRIMASK, r3
}
 80077b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2284      	movs	r2, #132	; 0x84
 80077bc:	2120      	movs	r1, #32
 80077be:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	0018      	movs	r0, r3
 80077ca:	f7ff fb03 	bl	8006dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077ce:	46c0      	nop			; (mov r8, r8)
 80077d0:	46bd      	mov	sp, r7
 80077d2:	b006      	add	sp, #24
 80077d4:	bd80      	pop	{r7, pc}
	...

080077d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b090      	sub	sp, #64	; 0x40
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80077e0:	203e      	movs	r0, #62	; 0x3e
 80077e2:	183b      	adds	r3, r7, r0
 80077e4:	687a      	ldr	r2, [r7, #4]
 80077e6:	2160      	movs	r1, #96	; 0x60
 80077e8:	5a52      	ldrh	r2, [r2, r1]
 80077ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2288      	movs	r2, #136	; 0x88
 80077f0:	589b      	ldr	r3, [r3, r2]
 80077f2:	2b22      	cmp	r3, #34	; 0x22
 80077f4:	d000      	beq.n	80077f8 <UART_RxISR_8BIT+0x20>
 80077f6:	e097      	b.n	8007928 <UART_RxISR_8BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077fe:	213c      	movs	r1, #60	; 0x3c
 8007800:	187b      	adds	r3, r7, r1
 8007802:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007804:	187b      	adds	r3, r7, r1
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	183b      	adds	r3, r7, r0
 800780c:	881b      	ldrh	r3, [r3, #0]
 800780e:	b2d9      	uxtb	r1, r3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007814:	400a      	ands	r2, r1
 8007816:	b2d2      	uxtb	r2, r2
 8007818:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	225e      	movs	r2, #94	; 0x5e
 8007828:	5a9b      	ldrh	r3, [r3, r2]
 800782a:	b29b      	uxth	r3, r3
 800782c:	3b01      	subs	r3, #1
 800782e:	b299      	uxth	r1, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	225e      	movs	r2, #94	; 0x5e
 8007834:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	225e      	movs	r2, #94	; 0x5e
 800783a:	5a9b      	ldrh	r3, [r3, r2]
 800783c:	b29b      	uxth	r3, r3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d000      	beq.n	8007844 <UART_RxISR_8BIT+0x6c>
 8007842:	e079      	b.n	8007938 <UART_RxISR_8BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007844:	f3ef 8310 	mrs	r3, PRIMASK
 8007848:	61bb      	str	r3, [r7, #24]
  return(result);
 800784a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800784c:	63bb      	str	r3, [r7, #56]	; 0x38
 800784e:	2301      	movs	r3, #1
 8007850:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007852:	69fb      	ldr	r3, [r7, #28]
 8007854:	f383 8810 	msr	PRIMASK, r3
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4936      	ldr	r1, [pc, #216]	; (8007940 <UART_RxISR_8BIT+0x168>)
 8007866:	400a      	ands	r2, r1
 8007868:	601a      	str	r2, [r3, #0]
 800786a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800786e:	6a3b      	ldr	r3, [r7, #32]
 8007870:	f383 8810 	msr	PRIMASK, r3
}
 8007874:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800787c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800787e:	637b      	str	r3, [r7, #52]	; 0x34
 8007880:	2301      	movs	r3, #1
 8007882:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	689a      	ldr	r2, [r3, #8]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	2101      	movs	r1, #1
 8007898:	438a      	bics	r2, r1
 800789a:	609a      	str	r2, [r3, #8]
 800789c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a2:	f383 8810 	msr	PRIMASK, r3
}
 80078a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2288      	movs	r2, #136	; 0x88
 80078ac:	2120      	movs	r1, #32
 80078ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d12f      	bne.n	800791e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c4:	f3ef 8310 	mrs	r3, PRIMASK
 80078c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80078ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078cc:	633b      	str	r3, [r7, #48]	; 0x30
 80078ce:	2301      	movs	r3, #1
 80078d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d2:	693b      	ldr	r3, [r7, #16]
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	46c0      	nop			; (mov r8, r8)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2110      	movs	r1, #16
 80078e6:	438a      	bics	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f383 8810 	msr	PRIMASK, r3
}
 80078f4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	2210      	movs	r2, #16
 80078fe:	4013      	ands	r3, r2
 8007900:	2b10      	cmp	r3, #16
 8007902:	d103      	bne.n	800790c <UART_RxISR_8BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2210      	movs	r2, #16
 800790a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	225c      	movs	r2, #92	; 0x5c
 8007910:	5a9a      	ldrh	r2, [r3, r2]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	0011      	movs	r1, r2
 8007916:	0018      	movs	r0, r3
 8007918:	f7ff fa6c 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800791c:	e00c      	b.n	8007938 <UART_RxISR_8BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	0018      	movs	r0, r3
 8007922:	f7fb f827 	bl	8002974 <HAL_UART_RxCpltCallback>
}
 8007926:	e007      	b.n	8007938 <UART_RxISR_8BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	699a      	ldr	r2, [r3, #24]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	2108      	movs	r1, #8
 8007934:	430a      	orrs	r2, r1
 8007936:	619a      	str	r2, [r3, #24]
}
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46bd      	mov	sp, r7
 800793c:	b010      	add	sp, #64	; 0x40
 800793e:	bd80      	pop	{r7, pc}
 8007940:	fffffedf 	.word	0xfffffedf

08007944 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b090      	sub	sp, #64	; 0x40
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800794c:	203e      	movs	r0, #62	; 0x3e
 800794e:	183b      	adds	r3, r7, r0
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	2160      	movs	r1, #96	; 0x60
 8007954:	5a52      	ldrh	r2, [r2, r1]
 8007956:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2288      	movs	r2, #136	; 0x88
 800795c:	589b      	ldr	r3, [r3, r2]
 800795e:	2b22      	cmp	r3, #34	; 0x22
 8007960:	d000      	beq.n	8007964 <UART_RxISR_16BIT+0x20>
 8007962:	e097      	b.n	8007a94 <UART_RxISR_16BIT+0x150>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800796a:	213c      	movs	r1, #60	; 0x3c
 800796c:	187b      	adds	r3, r7, r1
 800796e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007976:	187b      	adds	r3, r7, r1
 8007978:	183a      	adds	r2, r7, r0
 800797a:	881b      	ldrh	r3, [r3, #0]
 800797c:	8812      	ldrh	r2, [r2, #0]
 800797e:	4013      	ands	r3, r2
 8007980:	b29a      	uxth	r2, r3
 8007982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007984:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	1c9a      	adds	r2, r3, #2
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	225e      	movs	r2, #94	; 0x5e
 8007994:	5a9b      	ldrh	r3, [r3, r2]
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b299      	uxth	r1, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	225e      	movs	r2, #94	; 0x5e
 80079a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	225e      	movs	r2, #94	; 0x5e
 80079a6:	5a9b      	ldrh	r3, [r3, r2]
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d000      	beq.n	80079b0 <UART_RxISR_16BIT+0x6c>
 80079ae:	e079      	b.n	8007aa4 <UART_RxISR_16BIT+0x160>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079b0:	f3ef 8310 	mrs	r3, PRIMASK
 80079b4:	617b      	str	r3, [r7, #20]
  return(result);
 80079b6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	637b      	str	r3, [r7, #52]	; 0x34
 80079ba:	2301      	movs	r3, #1
 80079bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f383 8810 	msr	PRIMASK, r3
}
 80079c4:	46c0      	nop			; (mov r8, r8)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4936      	ldr	r1, [pc, #216]	; (8007aac <UART_RxISR_16BIT+0x168>)
 80079d2:	400a      	ands	r2, r1
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079d8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079da:	69fb      	ldr	r3, [r7, #28]
 80079dc:	f383 8810 	msr	PRIMASK, r3
}
 80079e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079e2:	f3ef 8310 	mrs	r3, PRIMASK
 80079e6:	623b      	str	r3, [r7, #32]
  return(result);
 80079e8:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	633b      	str	r3, [r7, #48]	; 0x30
 80079ec:	2301      	movs	r3, #1
 80079ee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	2101      	movs	r1, #1
 8007a04:	438a      	bics	r2, r1
 8007a06:	609a      	str	r2, [r3, #8]
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2288      	movs	r2, #136	; 0x88
 8007a18:	2120      	movs	r1, #32
 8007a1a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a26:	2b01      	cmp	r3, #1
 8007a28:	d12f      	bne.n	8007a8a <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a30:	f3ef 8310 	mrs	r3, PRIMASK
 8007a34:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a36:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f383 8810 	msr	PRIMASK, r3
}
 8007a44:	46c0      	nop			; (mov r8, r8)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681a      	ldr	r2, [r3, #0]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2110      	movs	r1, #16
 8007a52:	438a      	bics	r2, r1
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	69db      	ldr	r3, [r3, #28]
 8007a68:	2210      	movs	r2, #16
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	2b10      	cmp	r3, #16
 8007a6e:	d103      	bne.n	8007a78 <UART_RxISR_16BIT+0x134>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	2210      	movs	r2, #16
 8007a76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	225c      	movs	r2, #92	; 0x5c
 8007a7c:	5a9a      	ldrh	r2, [r3, r2]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	0011      	movs	r1, r2
 8007a82:	0018      	movs	r0, r3
 8007a84:	f7ff f9b6 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a88:	e00c      	b.n	8007aa4 <UART_RxISR_16BIT+0x160>
        HAL_UART_RxCpltCallback(huart);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	0018      	movs	r0, r3
 8007a8e:	f7fa ff71 	bl	8002974 <HAL_UART_RxCpltCallback>
}
 8007a92:	e007      	b.n	8007aa4 <UART_RxISR_16BIT+0x160>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2108      	movs	r1, #8
 8007aa0:	430a      	orrs	r2, r1
 8007aa2:	619a      	str	r2, [r3, #24]
}
 8007aa4:	46c0      	nop			; (mov r8, r8)
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	b010      	add	sp, #64	; 0x40
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	fffffedf 	.word	0xfffffedf

08007ab0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b09c      	sub	sp, #112	; 0x70
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ab8:	236a      	movs	r3, #106	; 0x6a
 8007aba:	18fb      	adds	r3, r7, r3
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	2160      	movs	r1, #96	; 0x60
 8007ac0:	5a52      	ldrh	r2, [r2, r1]
 8007ac2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2288      	movs	r2, #136	; 0x88
 8007ae0:	589b      	ldr	r3, [r3, r2]
 8007ae2:	2b22      	cmp	r3, #34	; 0x22
 8007ae4:	d000      	beq.n	8007ae8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007ae6:	e141      	b.n	8007d6c <UART_RxISR_8BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007ae8:	235e      	movs	r3, #94	; 0x5e
 8007aea:	18fb      	adds	r3, r7, r3
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	2168      	movs	r1, #104	; 0x68
 8007af0:	5a52      	ldrh	r2, [r2, r1]
 8007af2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007af4:	e0e8      	b.n	8007cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007afc:	215c      	movs	r1, #92	; 0x5c
 8007afe:	187b      	adds	r3, r7, r1
 8007b00:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b02:	187b      	adds	r3, r7, r1
 8007b04:	881b      	ldrh	r3, [r3, #0]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	236a      	movs	r3, #106	; 0x6a
 8007b0a:	18fb      	adds	r3, r7, r3
 8007b0c:	881b      	ldrh	r3, [r3, #0]
 8007b0e:	b2d9      	uxtb	r1, r3
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	400a      	ands	r2, r1
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	225e      	movs	r2, #94	; 0x5e
 8007b28:	5a9b      	ldrh	r3, [r3, r2]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b299      	uxth	r1, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	225e      	movs	r2, #94	; 0x5e
 8007b34:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	69db      	ldr	r3, [r3, #28]
 8007b3c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b40:	2207      	movs	r2, #7
 8007b42:	4013      	ands	r3, r2
 8007b44:	d049      	beq.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b48:	2201      	movs	r2, #1
 8007b4a:	4013      	ands	r3, r2
 8007b4c:	d010      	beq.n	8007b70 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007b4e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007b50:	2380      	movs	r3, #128	; 0x80
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4013      	ands	r3, r2
 8007b56:	d00b      	beq.n	8007b70 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	228c      	movs	r2, #140	; 0x8c
 8007b64:	589b      	ldr	r3, [r3, r2]
 8007b66:	2201      	movs	r2, #1
 8007b68:	431a      	orrs	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	218c      	movs	r1, #140	; 0x8c
 8007b6e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b72:	2202      	movs	r2, #2
 8007b74:	4013      	ands	r3, r2
 8007b76:	d00f      	beq.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4013      	ands	r3, r2
 8007b7e:	d00b      	beq.n	8007b98 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2202      	movs	r2, #2
 8007b86:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	228c      	movs	r2, #140	; 0x8c
 8007b8c:	589b      	ldr	r3, [r3, r2]
 8007b8e:	2204      	movs	r2, #4
 8007b90:	431a      	orrs	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	218c      	movs	r1, #140	; 0x8c
 8007b96:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d00f      	beq.n	8007bc0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007ba0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d00b      	beq.n	8007bc0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2204      	movs	r2, #4
 8007bae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	228c      	movs	r2, #140	; 0x8c
 8007bb4:	589b      	ldr	r3, [r3, r2]
 8007bb6:	2202      	movs	r2, #2
 8007bb8:	431a      	orrs	r2, r3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	218c      	movs	r1, #140	; 0x8c
 8007bbe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	228c      	movs	r2, #140	; 0x8c
 8007bc4:	589b      	ldr	r3, [r3, r2]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d007      	beq.n	8007bda <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	0018      	movs	r0, r3
 8007bce:	f7ff f909 	bl	8006de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	228c      	movs	r2, #140	; 0x8c
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	225e      	movs	r2, #94	; 0x5e
 8007bde:	5a9b      	ldrh	r3, [r3, r2]
 8007be0:	b29b      	uxth	r3, r3
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d170      	bne.n	8007cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007be6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf6:	f383 8810 	msr	PRIMASK, r3
}
 8007bfa:	46c0      	nop			; (mov r8, r8)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	495f      	ldr	r1, [pc, #380]	; (8007d84 <UART_RxISR_8BIT_FIFOEN+0x2d4>)
 8007c08:	400a      	ands	r2, r1
 8007c0a:	601a      	str	r2, [r3, #0]
 8007c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	f383 8810 	msr	PRIMASK, r3
}
 8007c16:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c18:	f3ef 8310 	mrs	r3, PRIMASK
 8007c1c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c20:	657b      	str	r3, [r7, #84]	; 0x54
 8007c22:	2301      	movs	r3, #1
 8007c24:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c28:	f383 8810 	msr	PRIMASK, r3
}
 8007c2c:	46c0      	nop			; (mov r8, r8)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689a      	ldr	r2, [r3, #8]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4953      	ldr	r1, [pc, #332]	; (8007d88 <UART_RxISR_8BIT_FIFOEN+0x2d8>)
 8007c3a:	400a      	ands	r2, r1
 8007c3c:	609a      	str	r2, [r3, #8]
 8007c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c40:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c44:	f383 8810 	msr	PRIMASK, r3
}
 8007c48:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2288      	movs	r2, #136	; 0x88
 8007c4e:	2120      	movs	r1, #32
 8007c50:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d12f      	bne.n	8007cc0 <UART_RxISR_8BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c66:	f3ef 8310 	mrs	r3, PRIMASK
 8007c6a:	623b      	str	r3, [r7, #32]
  return(result);
 8007c6c:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c6e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c70:	2301      	movs	r3, #1
 8007c72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c76:	f383 8810 	msr	PRIMASK, r3
}
 8007c7a:	46c0      	nop			; (mov r8, r8)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2110      	movs	r1, #16
 8007c88:	438a      	bics	r2, r1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c92:	f383 8810 	msr	PRIMASK, r3
}
 8007c96:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	2b10      	cmp	r3, #16
 8007ca4:	d103      	bne.n	8007cae <UART_RxISR_8BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2210      	movs	r2, #16
 8007cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	225c      	movs	r2, #92	; 0x5c
 8007cb2:	5a9a      	ldrh	r2, [r3, r2]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	0011      	movs	r1, r2
 8007cb8:	0018      	movs	r0, r3
 8007cba:	f7ff f89b 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
 8007cbe:	e003      	b.n	8007cc8 <UART_RxISR_8BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	0018      	movs	r0, r3
 8007cc4:	f7fa fe56 	bl	8002974 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cc8:	235e      	movs	r3, #94	; 0x5e
 8007cca:	18fb      	adds	r3, r7, r3
 8007ccc:	881b      	ldrh	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0x22c>
 8007cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cd4:	2220      	movs	r2, #32
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d000      	beq.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0x22c>
 8007cda:	e70c      	b.n	8007af6 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007cdc:	204e      	movs	r0, #78	; 0x4e
 8007cde:	183b      	adds	r3, r7, r0
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	215e      	movs	r1, #94	; 0x5e
 8007ce4:	5a52      	ldrh	r2, [r2, r1]
 8007ce6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007ce8:	0001      	movs	r1, r0
 8007cea:	187b      	adds	r3, r7, r1
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d044      	beq.n	8007d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2268      	movs	r2, #104	; 0x68
 8007cf6:	5a9b      	ldrh	r3, [r3, r2]
 8007cf8:	187a      	adds	r2, r7, r1
 8007cfa:	8812      	ldrh	r2, [r2, #0]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d23d      	bcs.n	8007d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d00:	f3ef 8310 	mrs	r3, PRIMASK
 8007d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d06:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d08:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	f383 8810 	msr	PRIMASK, r3
}
 8007d14:	46c0      	nop			; (mov r8, r8)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	689a      	ldr	r2, [r3, #8]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	491a      	ldr	r1, [pc, #104]	; (8007d8c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007d22:	400a      	ands	r2, r1
 8007d24:	609a      	str	r2, [r3, #8]
 8007d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	f383 8810 	msr	PRIMASK, r3
}
 8007d30:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	4a16      	ldr	r2, [pc, #88]	; (8007d90 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007d36:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d38:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8007d3e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d40:	647b      	str	r3, [r7, #68]	; 0x44
 8007d42:	2301      	movs	r3, #1
 8007d44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d46:	69bb      	ldr	r3, [r7, #24]
 8007d48:	f383 8810 	msr	PRIMASK, r3
}
 8007d4c:	46c0      	nop			; (mov r8, r8)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	2120      	movs	r1, #32
 8007d5a:	430a      	orrs	r2, r1
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d62:	69fb      	ldr	r3, [r7, #28]
 8007d64:	f383 8810 	msr	PRIMASK, r3
}
 8007d68:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d6a:	e007      	b.n	8007d7c <UART_RxISR_8BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	699a      	ldr	r2, [r3, #24]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	2108      	movs	r1, #8
 8007d78:	430a      	orrs	r2, r1
 8007d7a:	619a      	str	r2, [r3, #24]
}
 8007d7c:	46c0      	nop			; (mov r8, r8)
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	b01c      	add	sp, #112	; 0x70
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	fffffeff 	.word	0xfffffeff
 8007d88:	effffffe 	.word	0xeffffffe
 8007d8c:	efffffff 	.word	0xefffffff
 8007d90:	080077d9 	.word	0x080077d9

08007d94 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b09e      	sub	sp, #120	; 0x78
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007d9c:	2372      	movs	r3, #114	; 0x72
 8007d9e:	18fb      	adds	r3, r7, r3
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	2160      	movs	r1, #96	; 0x60
 8007da4:	5a52      	ldrh	r2, [r2, r1]
 8007da6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	69db      	ldr	r3, [r3, #28]
 8007dae:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2288      	movs	r2, #136	; 0x88
 8007dc4:	589b      	ldr	r3, [r3, r2]
 8007dc6:	2b22      	cmp	r3, #34	; 0x22
 8007dc8:	d000      	beq.n	8007dcc <UART_RxISR_16BIT_FIFOEN+0x38>
 8007dca:	e141      	b.n	8008050 <UART_RxISR_16BIT_FIFOEN+0x2bc>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007dcc:	2366      	movs	r3, #102	; 0x66
 8007dce:	18fb      	adds	r3, r7, r3
 8007dd0:	687a      	ldr	r2, [r7, #4]
 8007dd2:	2168      	movs	r1, #104	; 0x68
 8007dd4:	5a52      	ldrh	r2, [r2, r1]
 8007dd6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dd8:	e0e8      	b.n	8007fac <UART_RxISR_16BIT_FIFOEN+0x218>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007de0:	2164      	movs	r1, #100	; 0x64
 8007de2:	187b      	adds	r3, r7, r1
 8007de4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dea:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007dec:	187b      	adds	r3, r7, r1
 8007dee:	2272      	movs	r2, #114	; 0x72
 8007df0:	18ba      	adds	r2, r7, r2
 8007df2:	881b      	ldrh	r3, [r3, #0]
 8007df4:	8812      	ldrh	r2, [r2, #0]
 8007df6:	4013      	ands	r3, r2
 8007df8:	b29a      	uxth	r2, r3
 8007dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e02:	1c9a      	adds	r2, r3, #2
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	225e      	movs	r2, #94	; 0x5e
 8007e0c:	5a9b      	ldrh	r3, [r3, r2]
 8007e0e:	b29b      	uxth	r3, r3
 8007e10:	3b01      	subs	r3, #1
 8007e12:	b299      	uxth	r1, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	225e      	movs	r2, #94	; 0x5e
 8007e18:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	69db      	ldr	r3, [r3, #28]
 8007e20:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e24:	2207      	movs	r2, #7
 8007e26:	4013      	ands	r3, r2
 8007e28:	d049      	beq.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	4013      	ands	r3, r2
 8007e30:	d010      	beq.n	8007e54 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007e32:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e34:	2380      	movs	r3, #128	; 0x80
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	4013      	ands	r3, r2
 8007e3a:	d00b      	beq.n	8007e54 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2201      	movs	r2, #1
 8007e42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	228c      	movs	r2, #140	; 0x8c
 8007e48:	589b      	ldr	r3, [r3, r2]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	218c      	movs	r1, #140	; 0x8c
 8007e52:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e56:	2202      	movs	r2, #2
 8007e58:	4013      	ands	r3, r2
 8007e5a:	d00f      	beq.n	8007e7c <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007e5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4013      	ands	r3, r2
 8007e62:	d00b      	beq.n	8007e7c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2202      	movs	r2, #2
 8007e6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	228c      	movs	r2, #140	; 0x8c
 8007e70:	589b      	ldr	r3, [r3, r2]
 8007e72:	2204      	movs	r2, #4
 8007e74:	431a      	orrs	r2, r3
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	218c      	movs	r1, #140	; 0x8c
 8007e7a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e7e:	2204      	movs	r2, #4
 8007e80:	4013      	ands	r3, r2
 8007e82:	d00f      	beq.n	8007ea4 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007e84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e86:	2201      	movs	r2, #1
 8007e88:	4013      	ands	r3, r2
 8007e8a:	d00b      	beq.n	8007ea4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2204      	movs	r2, #4
 8007e92:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	228c      	movs	r2, #140	; 0x8c
 8007e98:	589b      	ldr	r3, [r3, r2]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	218c      	movs	r1, #140	; 0x8c
 8007ea2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	228c      	movs	r2, #140	; 0x8c
 8007ea8:	589b      	ldr	r3, [r3, r2]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d007      	beq.n	8007ebe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f7fe ff97 	bl	8006de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	228c      	movs	r2, #140	; 0x8c
 8007eba:	2100      	movs	r1, #0
 8007ebc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	225e      	movs	r2, #94	; 0x5e
 8007ec2:	5a9b      	ldrh	r3, [r3, r2]
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d170      	bne.n	8007fac <UART_RxISR_16BIT_FIFOEN+0x218>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eca:	f3ef 8310 	mrs	r3, PRIMASK
 8007ece:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ed2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eda:	f383 8810 	msr	PRIMASK, r3
}
 8007ede:	46c0      	nop			; (mov r8, r8)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	681a      	ldr	r2, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	495f      	ldr	r1, [pc, #380]	; (8008068 <UART_RxISR_16BIT_FIFOEN+0x2d4>)
 8007eec:	400a      	ands	r2, r1
 8007eee:	601a      	str	r2, [r3, #0]
 8007ef0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ef2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef6:	f383 8810 	msr	PRIMASK, r3
}
 8007efa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007efc:	f3ef 8310 	mrs	r3, PRIMASK
 8007f00:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f04:	65bb      	str	r3, [r7, #88]	; 0x58
 8007f06:	2301      	movs	r3, #1
 8007f08:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f0c:	f383 8810 	msr	PRIMASK, r3
}
 8007f10:	46c0      	nop			; (mov r8, r8)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	689a      	ldr	r2, [r3, #8]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4953      	ldr	r1, [pc, #332]	; (800806c <UART_RxISR_16BIT_FIFOEN+0x2d8>)
 8007f1e:	400a      	ands	r2, r1
 8007f20:	609a      	str	r2, [r3, #8]
 8007f22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f24:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f28:	f383 8810 	msr	PRIMASK, r3
}
 8007f2c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2288      	movs	r2, #136	; 0x88
 8007f32:	2120      	movs	r1, #32
 8007f34:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d12f      	bne.n	8007fa4 <UART_RxISR_16BIT_FIFOEN+0x210>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f4e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f52:	657b      	str	r3, [r7, #84]	; 0x54
 8007f54:	2301      	movs	r3, #1
 8007f56:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f5a:	f383 8810 	msr	PRIMASK, r3
}
 8007f5e:	46c0      	nop			; (mov r8, r8)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681a      	ldr	r2, [r3, #0]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	438a      	bics	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]
 8007f70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f76:	f383 8810 	msr	PRIMASK, r3
}
 8007f7a:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	69db      	ldr	r3, [r3, #28]
 8007f82:	2210      	movs	r2, #16
 8007f84:	4013      	ands	r3, r2
 8007f86:	2b10      	cmp	r3, #16
 8007f88:	d103      	bne.n	8007f92 <UART_RxISR_16BIT_FIFOEN+0x1fe>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2210      	movs	r2, #16
 8007f90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	225c      	movs	r2, #92	; 0x5c
 8007f96:	5a9a      	ldrh	r2, [r3, r2]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f7fe ff29 	bl	8006df4 <HAL_UARTEx_RxEventCallback>
 8007fa2:	e003      	b.n	8007fac <UART_RxISR_16BIT_FIFOEN+0x218>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f7fa fce4 	bl	8002974 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007fac:	2366      	movs	r3, #102	; 0x66
 8007fae:	18fb      	adds	r3, r7, r3
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d004      	beq.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8007fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb8:	2220      	movs	r2, #32
 8007fba:	4013      	ands	r3, r2
 8007fbc:	d000      	beq.n	8007fc0 <UART_RxISR_16BIT_FIFOEN+0x22c>
 8007fbe:	e70c      	b.n	8007dda <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007fc0:	2052      	movs	r0, #82	; 0x52
 8007fc2:	183b      	adds	r3, r7, r0
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	215e      	movs	r1, #94	; 0x5e
 8007fc8:	5a52      	ldrh	r2, [r2, r1]
 8007fca:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007fcc:	0001      	movs	r1, r0
 8007fce:	187b      	adds	r3, r7, r1
 8007fd0:	881b      	ldrh	r3, [r3, #0]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d044      	beq.n	8008060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2268      	movs	r2, #104	; 0x68
 8007fda:	5a9b      	ldrh	r3, [r3, r2]
 8007fdc:	187a      	adds	r2, r7, r1
 8007fde:	8812      	ldrh	r2, [r2, #0]
 8007fe0:	429a      	cmp	r2, r3
 8007fe2:	d23d      	bcs.n	8008060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe8:	60fb      	str	r3, [r7, #12]
  return(result);
 8007fea:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007fec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fee:	2301      	movs	r3, #1
 8007ff0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f383 8810 	msr	PRIMASK, r3
}
 8007ff8:	46c0      	nop			; (mov r8, r8)
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	689a      	ldr	r2, [r3, #8]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	491a      	ldr	r1, [pc, #104]	; (8008070 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008006:	400a      	ands	r2, r1
 8008008:	609a      	str	r2, [r3, #8]
 800800a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800800c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	f383 8810 	msr	PRIMASK, r3
}
 8008014:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	4a16      	ldr	r2, [pc, #88]	; (8008074 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800801a:	671a      	str	r2, [r3, #112]	; 0x70
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801c:	f3ef 8310 	mrs	r3, PRIMASK
 8008020:	61bb      	str	r3, [r7, #24]
  return(result);
 8008022:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008024:	64bb      	str	r3, [r7, #72]	; 0x48
 8008026:	2301      	movs	r3, #1
 8008028:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802a:	69fb      	ldr	r3, [r7, #28]
 800802c:	f383 8810 	msr	PRIMASK, r3
}
 8008030:	46c0      	nop			; (mov r8, r8)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2120      	movs	r1, #32
 800803e:	430a      	orrs	r2, r1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008044:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	f383 8810 	msr	PRIMASK, r3
}
 800804c:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800804e:	e007      	b.n	8008060 <UART_RxISR_16BIT_FIFOEN+0x2cc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	699a      	ldr	r2, [r3, #24]
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2108      	movs	r1, #8
 800805c:	430a      	orrs	r2, r1
 800805e:	619a      	str	r2, [r3, #24]
}
 8008060:	46c0      	nop			; (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	b01e      	add	sp, #120	; 0x78
 8008066:	bd80      	pop	{r7, pc}
 8008068:	fffffeff 	.word	0xfffffeff
 800806c:	effffffe 	.word	0xeffffffe
 8008070:	efffffff 	.word	0xefffffff
 8008074:	08007945 	.word	0x08007945

08008078 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	b082      	sub	sp, #8
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008080:	46c0      	nop			; (mov r8, r8)
 8008082:	46bd      	mov	sp, r7
 8008084:	b002      	add	sp, #8
 8008086:	bd80      	pop	{r7, pc}

08008088 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b082      	sub	sp, #8
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008090:	46c0      	nop			; (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}

08008098 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080a0:	46c0      	nop			; (mov r8, r8)
 80080a2:	46bd      	mov	sp, r7
 80080a4:	b002      	add	sp, #8
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <__errno>:
 80080a8:	4b01      	ldr	r3, [pc, #4]	; (80080b0 <__errno+0x8>)
 80080aa:	6818      	ldr	r0, [r3, #0]
 80080ac:	4770      	bx	lr
 80080ae:	46c0      	nop			; (mov r8, r8)
 80080b0:	2000000c 	.word	0x2000000c

080080b4 <__libc_init_array>:
 80080b4:	b570      	push	{r4, r5, r6, lr}
 80080b6:	2600      	movs	r6, #0
 80080b8:	4d0c      	ldr	r5, [pc, #48]	; (80080ec <__libc_init_array+0x38>)
 80080ba:	4c0d      	ldr	r4, [pc, #52]	; (80080f0 <__libc_init_array+0x3c>)
 80080bc:	1b64      	subs	r4, r4, r5
 80080be:	10a4      	asrs	r4, r4, #2
 80080c0:	42a6      	cmp	r6, r4
 80080c2:	d109      	bne.n	80080d8 <__libc_init_array+0x24>
 80080c4:	2600      	movs	r6, #0
 80080c6:	f001 f83b 	bl	8009140 <_init>
 80080ca:	4d0a      	ldr	r5, [pc, #40]	; (80080f4 <__libc_init_array+0x40>)
 80080cc:	4c0a      	ldr	r4, [pc, #40]	; (80080f8 <__libc_init_array+0x44>)
 80080ce:	1b64      	subs	r4, r4, r5
 80080d0:	10a4      	asrs	r4, r4, #2
 80080d2:	42a6      	cmp	r6, r4
 80080d4:	d105      	bne.n	80080e2 <__libc_init_array+0x2e>
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	00b3      	lsls	r3, r6, #2
 80080da:	58eb      	ldr	r3, [r5, r3]
 80080dc:	4798      	blx	r3
 80080de:	3601      	adds	r6, #1
 80080e0:	e7ee      	b.n	80080c0 <__libc_init_array+0xc>
 80080e2:	00b3      	lsls	r3, r6, #2
 80080e4:	58eb      	ldr	r3, [r5, r3]
 80080e6:	4798      	blx	r3
 80080e8:	3601      	adds	r6, #1
 80080ea:	e7f2      	b.n	80080d2 <__libc_init_array+0x1e>
 80080ec:	080092c8 	.word	0x080092c8
 80080f0:	080092c8 	.word	0x080092c8
 80080f4:	080092c8 	.word	0x080092c8
 80080f8:	080092cc 	.word	0x080092cc

080080fc <memset>:
 80080fc:	0003      	movs	r3, r0
 80080fe:	1882      	adds	r2, r0, r2
 8008100:	4293      	cmp	r3, r2
 8008102:	d100      	bne.n	8008106 <memset+0xa>
 8008104:	4770      	bx	lr
 8008106:	7019      	strb	r1, [r3, #0]
 8008108:	3301      	adds	r3, #1
 800810a:	e7f9      	b.n	8008100 <memset+0x4>

0800810c <iprintf>:
 800810c:	b40f      	push	{r0, r1, r2, r3}
 800810e:	4b0b      	ldr	r3, [pc, #44]	; (800813c <iprintf+0x30>)
 8008110:	b513      	push	{r0, r1, r4, lr}
 8008112:	681c      	ldr	r4, [r3, #0]
 8008114:	2c00      	cmp	r4, #0
 8008116:	d005      	beq.n	8008124 <iprintf+0x18>
 8008118:	69a3      	ldr	r3, [r4, #24]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d102      	bne.n	8008124 <iprintf+0x18>
 800811e:	0020      	movs	r0, r4
 8008120:	f000 fa86 	bl	8008630 <__sinit>
 8008124:	ab05      	add	r3, sp, #20
 8008126:	0020      	movs	r0, r4
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	68a1      	ldr	r1, [r4, #8]
 800812c:	9301      	str	r3, [sp, #4]
 800812e:	f000 fc5f 	bl	80089f0 <_vfiprintf_r>
 8008132:	bc16      	pop	{r1, r2, r4}
 8008134:	bc08      	pop	{r3}
 8008136:	b004      	add	sp, #16
 8008138:	4718      	bx	r3
 800813a:	46c0      	nop			; (mov r8, r8)
 800813c:	2000000c 	.word	0x2000000c

08008140 <_puts_r>:
 8008140:	b570      	push	{r4, r5, r6, lr}
 8008142:	0005      	movs	r5, r0
 8008144:	000e      	movs	r6, r1
 8008146:	2800      	cmp	r0, #0
 8008148:	d004      	beq.n	8008154 <_puts_r+0x14>
 800814a:	6983      	ldr	r3, [r0, #24]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <_puts_r+0x14>
 8008150:	f000 fa6e 	bl	8008630 <__sinit>
 8008154:	69ab      	ldr	r3, [r5, #24]
 8008156:	68ac      	ldr	r4, [r5, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d102      	bne.n	8008162 <_puts_r+0x22>
 800815c:	0028      	movs	r0, r5
 800815e:	f000 fa67 	bl	8008630 <__sinit>
 8008162:	4b2d      	ldr	r3, [pc, #180]	; (8008218 <_puts_r+0xd8>)
 8008164:	429c      	cmp	r4, r3
 8008166:	d122      	bne.n	80081ae <_puts_r+0x6e>
 8008168:	686c      	ldr	r4, [r5, #4]
 800816a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800816c:	07db      	lsls	r3, r3, #31
 800816e:	d405      	bmi.n	800817c <_puts_r+0x3c>
 8008170:	89a3      	ldrh	r3, [r4, #12]
 8008172:	059b      	lsls	r3, r3, #22
 8008174:	d402      	bmi.n	800817c <_puts_r+0x3c>
 8008176:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008178:	f000 fafb 	bl	8008772 <__retarget_lock_acquire_recursive>
 800817c:	89a3      	ldrh	r3, [r4, #12]
 800817e:	071b      	lsls	r3, r3, #28
 8008180:	d502      	bpl.n	8008188 <_puts_r+0x48>
 8008182:	6923      	ldr	r3, [r4, #16]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d129      	bne.n	80081dc <_puts_r+0x9c>
 8008188:	0021      	movs	r1, r4
 800818a:	0028      	movs	r0, r5
 800818c:	f000 f8aa 	bl	80082e4 <__swsetup_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	d023      	beq.n	80081dc <_puts_r+0x9c>
 8008194:	2501      	movs	r5, #1
 8008196:	426d      	negs	r5, r5
 8008198:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800819a:	07db      	lsls	r3, r3, #31
 800819c:	d405      	bmi.n	80081aa <_puts_r+0x6a>
 800819e:	89a3      	ldrh	r3, [r4, #12]
 80081a0:	059b      	lsls	r3, r3, #22
 80081a2:	d402      	bmi.n	80081aa <_puts_r+0x6a>
 80081a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081a6:	f000 fae5 	bl	8008774 <__retarget_lock_release_recursive>
 80081aa:	0028      	movs	r0, r5
 80081ac:	bd70      	pop	{r4, r5, r6, pc}
 80081ae:	4b1b      	ldr	r3, [pc, #108]	; (800821c <_puts_r+0xdc>)
 80081b0:	429c      	cmp	r4, r3
 80081b2:	d101      	bne.n	80081b8 <_puts_r+0x78>
 80081b4:	68ac      	ldr	r4, [r5, #8]
 80081b6:	e7d8      	b.n	800816a <_puts_r+0x2a>
 80081b8:	4b19      	ldr	r3, [pc, #100]	; (8008220 <_puts_r+0xe0>)
 80081ba:	429c      	cmp	r4, r3
 80081bc:	d1d5      	bne.n	800816a <_puts_r+0x2a>
 80081be:	68ec      	ldr	r4, [r5, #12]
 80081c0:	e7d3      	b.n	800816a <_puts_r+0x2a>
 80081c2:	3601      	adds	r6, #1
 80081c4:	60a3      	str	r3, [r4, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	da04      	bge.n	80081d4 <_puts_r+0x94>
 80081ca:	69a2      	ldr	r2, [r4, #24]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	dc16      	bgt.n	80081fe <_puts_r+0xbe>
 80081d0:	290a      	cmp	r1, #10
 80081d2:	d014      	beq.n	80081fe <_puts_r+0xbe>
 80081d4:	6823      	ldr	r3, [r4, #0]
 80081d6:	1c5a      	adds	r2, r3, #1
 80081d8:	6022      	str	r2, [r4, #0]
 80081da:	7019      	strb	r1, [r3, #0]
 80081dc:	68a3      	ldr	r3, [r4, #8]
 80081de:	7831      	ldrb	r1, [r6, #0]
 80081e0:	3b01      	subs	r3, #1
 80081e2:	2900      	cmp	r1, #0
 80081e4:	d1ed      	bne.n	80081c2 <_puts_r+0x82>
 80081e6:	60a3      	str	r3, [r4, #8]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	da0f      	bge.n	800820c <_puts_r+0xcc>
 80081ec:	0028      	movs	r0, r5
 80081ee:	0022      	movs	r2, r4
 80081f0:	310a      	adds	r1, #10
 80081f2:	f000 f821 	bl	8008238 <__swbuf_r>
 80081f6:	250a      	movs	r5, #10
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d1cd      	bne.n	8008198 <_puts_r+0x58>
 80081fc:	e7ca      	b.n	8008194 <_puts_r+0x54>
 80081fe:	0022      	movs	r2, r4
 8008200:	0028      	movs	r0, r5
 8008202:	f000 f819 	bl	8008238 <__swbuf_r>
 8008206:	1c43      	adds	r3, r0, #1
 8008208:	d1e8      	bne.n	80081dc <_puts_r+0x9c>
 800820a:	e7c3      	b.n	8008194 <_puts_r+0x54>
 800820c:	250a      	movs	r5, #10
 800820e:	6823      	ldr	r3, [r4, #0]
 8008210:	1c5a      	adds	r2, r3, #1
 8008212:	6022      	str	r2, [r4, #0]
 8008214:	701d      	strb	r5, [r3, #0]
 8008216:	e7bf      	b.n	8008198 <_puts_r+0x58>
 8008218:	08009254 	.word	0x08009254
 800821c:	08009274 	.word	0x08009274
 8008220:	08009234 	.word	0x08009234

08008224 <puts>:
 8008224:	b510      	push	{r4, lr}
 8008226:	4b03      	ldr	r3, [pc, #12]	; (8008234 <puts+0x10>)
 8008228:	0001      	movs	r1, r0
 800822a:	6818      	ldr	r0, [r3, #0]
 800822c:	f7ff ff88 	bl	8008140 <_puts_r>
 8008230:	bd10      	pop	{r4, pc}
 8008232:	46c0      	nop			; (mov r8, r8)
 8008234:	2000000c 	.word	0x2000000c

08008238 <__swbuf_r>:
 8008238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800823a:	0005      	movs	r5, r0
 800823c:	000e      	movs	r6, r1
 800823e:	0014      	movs	r4, r2
 8008240:	2800      	cmp	r0, #0
 8008242:	d004      	beq.n	800824e <__swbuf_r+0x16>
 8008244:	6983      	ldr	r3, [r0, #24]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <__swbuf_r+0x16>
 800824a:	f000 f9f1 	bl	8008630 <__sinit>
 800824e:	4b22      	ldr	r3, [pc, #136]	; (80082d8 <__swbuf_r+0xa0>)
 8008250:	429c      	cmp	r4, r3
 8008252:	d12e      	bne.n	80082b2 <__swbuf_r+0x7a>
 8008254:	686c      	ldr	r4, [r5, #4]
 8008256:	69a3      	ldr	r3, [r4, #24]
 8008258:	60a3      	str	r3, [r4, #8]
 800825a:	89a3      	ldrh	r3, [r4, #12]
 800825c:	071b      	lsls	r3, r3, #28
 800825e:	d532      	bpl.n	80082c6 <__swbuf_r+0x8e>
 8008260:	6923      	ldr	r3, [r4, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d02f      	beq.n	80082c6 <__swbuf_r+0x8e>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	6922      	ldr	r2, [r4, #16]
 800826a:	b2f7      	uxtb	r7, r6
 800826c:	1a98      	subs	r0, r3, r2
 800826e:	6963      	ldr	r3, [r4, #20]
 8008270:	b2f6      	uxtb	r6, r6
 8008272:	4283      	cmp	r3, r0
 8008274:	dc05      	bgt.n	8008282 <__swbuf_r+0x4a>
 8008276:	0021      	movs	r1, r4
 8008278:	0028      	movs	r0, r5
 800827a:	f000 f937 	bl	80084ec <_fflush_r>
 800827e:	2800      	cmp	r0, #0
 8008280:	d127      	bne.n	80082d2 <__swbuf_r+0x9a>
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	3001      	adds	r0, #1
 8008286:	3b01      	subs	r3, #1
 8008288:	60a3      	str	r3, [r4, #8]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	1c5a      	adds	r2, r3, #1
 800828e:	6022      	str	r2, [r4, #0]
 8008290:	701f      	strb	r7, [r3, #0]
 8008292:	6963      	ldr	r3, [r4, #20]
 8008294:	4283      	cmp	r3, r0
 8008296:	d004      	beq.n	80082a2 <__swbuf_r+0x6a>
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	07db      	lsls	r3, r3, #31
 800829c:	d507      	bpl.n	80082ae <__swbuf_r+0x76>
 800829e:	2e0a      	cmp	r6, #10
 80082a0:	d105      	bne.n	80082ae <__swbuf_r+0x76>
 80082a2:	0021      	movs	r1, r4
 80082a4:	0028      	movs	r0, r5
 80082a6:	f000 f921 	bl	80084ec <_fflush_r>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d111      	bne.n	80082d2 <__swbuf_r+0x9a>
 80082ae:	0030      	movs	r0, r6
 80082b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082b2:	4b0a      	ldr	r3, [pc, #40]	; (80082dc <__swbuf_r+0xa4>)
 80082b4:	429c      	cmp	r4, r3
 80082b6:	d101      	bne.n	80082bc <__swbuf_r+0x84>
 80082b8:	68ac      	ldr	r4, [r5, #8]
 80082ba:	e7cc      	b.n	8008256 <__swbuf_r+0x1e>
 80082bc:	4b08      	ldr	r3, [pc, #32]	; (80082e0 <__swbuf_r+0xa8>)
 80082be:	429c      	cmp	r4, r3
 80082c0:	d1c9      	bne.n	8008256 <__swbuf_r+0x1e>
 80082c2:	68ec      	ldr	r4, [r5, #12]
 80082c4:	e7c7      	b.n	8008256 <__swbuf_r+0x1e>
 80082c6:	0021      	movs	r1, r4
 80082c8:	0028      	movs	r0, r5
 80082ca:	f000 f80b 	bl	80082e4 <__swsetup_r>
 80082ce:	2800      	cmp	r0, #0
 80082d0:	d0c9      	beq.n	8008266 <__swbuf_r+0x2e>
 80082d2:	2601      	movs	r6, #1
 80082d4:	4276      	negs	r6, r6
 80082d6:	e7ea      	b.n	80082ae <__swbuf_r+0x76>
 80082d8:	08009254 	.word	0x08009254
 80082dc:	08009274 	.word	0x08009274
 80082e0:	08009234 	.word	0x08009234

080082e4 <__swsetup_r>:
 80082e4:	4b37      	ldr	r3, [pc, #220]	; (80083c4 <__swsetup_r+0xe0>)
 80082e6:	b570      	push	{r4, r5, r6, lr}
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	0006      	movs	r6, r0
 80082ec:	000c      	movs	r4, r1
 80082ee:	2d00      	cmp	r5, #0
 80082f0:	d005      	beq.n	80082fe <__swsetup_r+0x1a>
 80082f2:	69ab      	ldr	r3, [r5, #24]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d102      	bne.n	80082fe <__swsetup_r+0x1a>
 80082f8:	0028      	movs	r0, r5
 80082fa:	f000 f999 	bl	8008630 <__sinit>
 80082fe:	4b32      	ldr	r3, [pc, #200]	; (80083c8 <__swsetup_r+0xe4>)
 8008300:	429c      	cmp	r4, r3
 8008302:	d10f      	bne.n	8008324 <__swsetup_r+0x40>
 8008304:	686c      	ldr	r4, [r5, #4]
 8008306:	230c      	movs	r3, #12
 8008308:	5ee2      	ldrsh	r2, [r4, r3]
 800830a:	b293      	uxth	r3, r2
 800830c:	0711      	lsls	r1, r2, #28
 800830e:	d42d      	bmi.n	800836c <__swsetup_r+0x88>
 8008310:	06d9      	lsls	r1, r3, #27
 8008312:	d411      	bmi.n	8008338 <__swsetup_r+0x54>
 8008314:	2309      	movs	r3, #9
 8008316:	2001      	movs	r0, #1
 8008318:	6033      	str	r3, [r6, #0]
 800831a:	3337      	adds	r3, #55	; 0x37
 800831c:	4313      	orrs	r3, r2
 800831e:	81a3      	strh	r3, [r4, #12]
 8008320:	4240      	negs	r0, r0
 8008322:	bd70      	pop	{r4, r5, r6, pc}
 8008324:	4b29      	ldr	r3, [pc, #164]	; (80083cc <__swsetup_r+0xe8>)
 8008326:	429c      	cmp	r4, r3
 8008328:	d101      	bne.n	800832e <__swsetup_r+0x4a>
 800832a:	68ac      	ldr	r4, [r5, #8]
 800832c:	e7eb      	b.n	8008306 <__swsetup_r+0x22>
 800832e:	4b28      	ldr	r3, [pc, #160]	; (80083d0 <__swsetup_r+0xec>)
 8008330:	429c      	cmp	r4, r3
 8008332:	d1e8      	bne.n	8008306 <__swsetup_r+0x22>
 8008334:	68ec      	ldr	r4, [r5, #12]
 8008336:	e7e6      	b.n	8008306 <__swsetup_r+0x22>
 8008338:	075b      	lsls	r3, r3, #29
 800833a:	d513      	bpl.n	8008364 <__swsetup_r+0x80>
 800833c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800833e:	2900      	cmp	r1, #0
 8008340:	d008      	beq.n	8008354 <__swsetup_r+0x70>
 8008342:	0023      	movs	r3, r4
 8008344:	3344      	adds	r3, #68	; 0x44
 8008346:	4299      	cmp	r1, r3
 8008348:	d002      	beq.n	8008350 <__swsetup_r+0x6c>
 800834a:	0030      	movs	r0, r6
 800834c:	f000 fa80 	bl	8008850 <_free_r>
 8008350:	2300      	movs	r3, #0
 8008352:	6363      	str	r3, [r4, #52]	; 0x34
 8008354:	2224      	movs	r2, #36	; 0x24
 8008356:	89a3      	ldrh	r3, [r4, #12]
 8008358:	4393      	bics	r3, r2
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	2300      	movs	r3, #0
 800835e:	6063      	str	r3, [r4, #4]
 8008360:	6923      	ldr	r3, [r4, #16]
 8008362:	6023      	str	r3, [r4, #0]
 8008364:	2308      	movs	r3, #8
 8008366:	89a2      	ldrh	r2, [r4, #12]
 8008368:	4313      	orrs	r3, r2
 800836a:	81a3      	strh	r3, [r4, #12]
 800836c:	6923      	ldr	r3, [r4, #16]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10b      	bne.n	800838a <__swsetup_r+0xa6>
 8008372:	21a0      	movs	r1, #160	; 0xa0
 8008374:	2280      	movs	r2, #128	; 0x80
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0089      	lsls	r1, r1, #2
 800837a:	0092      	lsls	r2, r2, #2
 800837c:	400b      	ands	r3, r1
 800837e:	4293      	cmp	r3, r2
 8008380:	d003      	beq.n	800838a <__swsetup_r+0xa6>
 8008382:	0021      	movs	r1, r4
 8008384:	0030      	movs	r0, r6
 8008386:	f000 fa1f 	bl	80087c8 <__smakebuf_r>
 800838a:	220c      	movs	r2, #12
 800838c:	5ea3      	ldrsh	r3, [r4, r2]
 800838e:	2001      	movs	r0, #1
 8008390:	001a      	movs	r2, r3
 8008392:	b299      	uxth	r1, r3
 8008394:	4002      	ands	r2, r0
 8008396:	4203      	tst	r3, r0
 8008398:	d00f      	beq.n	80083ba <__swsetup_r+0xd6>
 800839a:	2200      	movs	r2, #0
 800839c:	60a2      	str	r2, [r4, #8]
 800839e:	6962      	ldr	r2, [r4, #20]
 80083a0:	4252      	negs	r2, r2
 80083a2:	61a2      	str	r2, [r4, #24]
 80083a4:	2000      	movs	r0, #0
 80083a6:	6922      	ldr	r2, [r4, #16]
 80083a8:	4282      	cmp	r2, r0
 80083aa:	d1ba      	bne.n	8008322 <__swsetup_r+0x3e>
 80083ac:	060a      	lsls	r2, r1, #24
 80083ae:	d5b8      	bpl.n	8008322 <__swsetup_r+0x3e>
 80083b0:	2240      	movs	r2, #64	; 0x40
 80083b2:	4313      	orrs	r3, r2
 80083b4:	81a3      	strh	r3, [r4, #12]
 80083b6:	3801      	subs	r0, #1
 80083b8:	e7b3      	b.n	8008322 <__swsetup_r+0x3e>
 80083ba:	0788      	lsls	r0, r1, #30
 80083bc:	d400      	bmi.n	80083c0 <__swsetup_r+0xdc>
 80083be:	6962      	ldr	r2, [r4, #20]
 80083c0:	60a2      	str	r2, [r4, #8]
 80083c2:	e7ef      	b.n	80083a4 <__swsetup_r+0xc0>
 80083c4:	2000000c 	.word	0x2000000c
 80083c8:	08009254 	.word	0x08009254
 80083cc:	08009274 	.word	0x08009274
 80083d0:	08009234 	.word	0x08009234

080083d4 <__sflush_r>:
 80083d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083d6:	898b      	ldrh	r3, [r1, #12]
 80083d8:	0005      	movs	r5, r0
 80083da:	000c      	movs	r4, r1
 80083dc:	071a      	lsls	r2, r3, #28
 80083de:	d45f      	bmi.n	80084a0 <__sflush_r+0xcc>
 80083e0:	684a      	ldr	r2, [r1, #4]
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	dc04      	bgt.n	80083f0 <__sflush_r+0x1c>
 80083e6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80083e8:	2a00      	cmp	r2, #0
 80083ea:	dc01      	bgt.n	80083f0 <__sflush_r+0x1c>
 80083ec:	2000      	movs	r0, #0
 80083ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80083f0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80083f2:	2f00      	cmp	r7, #0
 80083f4:	d0fa      	beq.n	80083ec <__sflush_r+0x18>
 80083f6:	2200      	movs	r2, #0
 80083f8:	2180      	movs	r1, #128	; 0x80
 80083fa:	682e      	ldr	r6, [r5, #0]
 80083fc:	602a      	str	r2, [r5, #0]
 80083fe:	001a      	movs	r2, r3
 8008400:	0149      	lsls	r1, r1, #5
 8008402:	400a      	ands	r2, r1
 8008404:	420b      	tst	r3, r1
 8008406:	d034      	beq.n	8008472 <__sflush_r+0x9e>
 8008408:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	075b      	lsls	r3, r3, #29
 800840e:	d506      	bpl.n	800841e <__sflush_r+0x4a>
 8008410:	6863      	ldr	r3, [r4, #4]
 8008412:	1ac0      	subs	r0, r0, r3
 8008414:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <__sflush_r+0x4a>
 800841a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800841c:	1ac0      	subs	r0, r0, r3
 800841e:	0002      	movs	r2, r0
 8008420:	6a21      	ldr	r1, [r4, #32]
 8008422:	2300      	movs	r3, #0
 8008424:	0028      	movs	r0, r5
 8008426:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008428:	47b8      	blx	r7
 800842a:	89a1      	ldrh	r1, [r4, #12]
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d106      	bne.n	800843e <__sflush_r+0x6a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	2b1d      	cmp	r3, #29
 8008434:	d831      	bhi.n	800849a <__sflush_r+0xc6>
 8008436:	4a2c      	ldr	r2, [pc, #176]	; (80084e8 <__sflush_r+0x114>)
 8008438:	40da      	lsrs	r2, r3
 800843a:	07d3      	lsls	r3, r2, #31
 800843c:	d52d      	bpl.n	800849a <__sflush_r+0xc6>
 800843e:	2300      	movs	r3, #0
 8008440:	6063      	str	r3, [r4, #4]
 8008442:	6923      	ldr	r3, [r4, #16]
 8008444:	6023      	str	r3, [r4, #0]
 8008446:	04cb      	lsls	r3, r1, #19
 8008448:	d505      	bpl.n	8008456 <__sflush_r+0x82>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d102      	bne.n	8008454 <__sflush_r+0x80>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d100      	bne.n	8008456 <__sflush_r+0x82>
 8008454:	6560      	str	r0, [r4, #84]	; 0x54
 8008456:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008458:	602e      	str	r6, [r5, #0]
 800845a:	2900      	cmp	r1, #0
 800845c:	d0c6      	beq.n	80083ec <__sflush_r+0x18>
 800845e:	0023      	movs	r3, r4
 8008460:	3344      	adds	r3, #68	; 0x44
 8008462:	4299      	cmp	r1, r3
 8008464:	d002      	beq.n	800846c <__sflush_r+0x98>
 8008466:	0028      	movs	r0, r5
 8008468:	f000 f9f2 	bl	8008850 <_free_r>
 800846c:	2000      	movs	r0, #0
 800846e:	6360      	str	r0, [r4, #52]	; 0x34
 8008470:	e7bd      	b.n	80083ee <__sflush_r+0x1a>
 8008472:	2301      	movs	r3, #1
 8008474:	0028      	movs	r0, r5
 8008476:	6a21      	ldr	r1, [r4, #32]
 8008478:	47b8      	blx	r7
 800847a:	1c43      	adds	r3, r0, #1
 800847c:	d1c5      	bne.n	800840a <__sflush_r+0x36>
 800847e:	682b      	ldr	r3, [r5, #0]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d0c2      	beq.n	800840a <__sflush_r+0x36>
 8008484:	2b1d      	cmp	r3, #29
 8008486:	d001      	beq.n	800848c <__sflush_r+0xb8>
 8008488:	2b16      	cmp	r3, #22
 800848a:	d101      	bne.n	8008490 <__sflush_r+0xbc>
 800848c:	602e      	str	r6, [r5, #0]
 800848e:	e7ad      	b.n	80083ec <__sflush_r+0x18>
 8008490:	2340      	movs	r3, #64	; 0x40
 8008492:	89a2      	ldrh	r2, [r4, #12]
 8008494:	4313      	orrs	r3, r2
 8008496:	81a3      	strh	r3, [r4, #12]
 8008498:	e7a9      	b.n	80083ee <__sflush_r+0x1a>
 800849a:	2340      	movs	r3, #64	; 0x40
 800849c:	430b      	orrs	r3, r1
 800849e:	e7fa      	b.n	8008496 <__sflush_r+0xc2>
 80084a0:	690f      	ldr	r7, [r1, #16]
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d0a2      	beq.n	80083ec <__sflush_r+0x18>
 80084a6:	680a      	ldr	r2, [r1, #0]
 80084a8:	600f      	str	r7, [r1, #0]
 80084aa:	1bd2      	subs	r2, r2, r7
 80084ac:	9201      	str	r2, [sp, #4]
 80084ae:	2200      	movs	r2, #0
 80084b0:	079b      	lsls	r3, r3, #30
 80084b2:	d100      	bne.n	80084b6 <__sflush_r+0xe2>
 80084b4:	694a      	ldr	r2, [r1, #20]
 80084b6:	60a2      	str	r2, [r4, #8]
 80084b8:	9b01      	ldr	r3, [sp, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dc00      	bgt.n	80084c0 <__sflush_r+0xec>
 80084be:	e795      	b.n	80083ec <__sflush_r+0x18>
 80084c0:	003a      	movs	r2, r7
 80084c2:	0028      	movs	r0, r5
 80084c4:	9b01      	ldr	r3, [sp, #4]
 80084c6:	6a21      	ldr	r1, [r4, #32]
 80084c8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80084ca:	47b0      	blx	r6
 80084cc:	2800      	cmp	r0, #0
 80084ce:	dc06      	bgt.n	80084de <__sflush_r+0x10a>
 80084d0:	2340      	movs	r3, #64	; 0x40
 80084d2:	2001      	movs	r0, #1
 80084d4:	89a2      	ldrh	r2, [r4, #12]
 80084d6:	4240      	negs	r0, r0
 80084d8:	4313      	orrs	r3, r2
 80084da:	81a3      	strh	r3, [r4, #12]
 80084dc:	e787      	b.n	80083ee <__sflush_r+0x1a>
 80084de:	9b01      	ldr	r3, [sp, #4]
 80084e0:	183f      	adds	r7, r7, r0
 80084e2:	1a1b      	subs	r3, r3, r0
 80084e4:	9301      	str	r3, [sp, #4]
 80084e6:	e7e7      	b.n	80084b8 <__sflush_r+0xe4>
 80084e8:	20400001 	.word	0x20400001

080084ec <_fflush_r>:
 80084ec:	690b      	ldr	r3, [r1, #16]
 80084ee:	b570      	push	{r4, r5, r6, lr}
 80084f0:	0005      	movs	r5, r0
 80084f2:	000c      	movs	r4, r1
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d102      	bne.n	80084fe <_fflush_r+0x12>
 80084f8:	2500      	movs	r5, #0
 80084fa:	0028      	movs	r0, r5
 80084fc:	bd70      	pop	{r4, r5, r6, pc}
 80084fe:	2800      	cmp	r0, #0
 8008500:	d004      	beq.n	800850c <_fflush_r+0x20>
 8008502:	6983      	ldr	r3, [r0, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d101      	bne.n	800850c <_fflush_r+0x20>
 8008508:	f000 f892 	bl	8008630 <__sinit>
 800850c:	4b14      	ldr	r3, [pc, #80]	; (8008560 <_fflush_r+0x74>)
 800850e:	429c      	cmp	r4, r3
 8008510:	d11b      	bne.n	800854a <_fflush_r+0x5e>
 8008512:	686c      	ldr	r4, [r5, #4]
 8008514:	220c      	movs	r2, #12
 8008516:	5ea3      	ldrsh	r3, [r4, r2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d0ed      	beq.n	80084f8 <_fflush_r+0xc>
 800851c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800851e:	07d2      	lsls	r2, r2, #31
 8008520:	d404      	bmi.n	800852c <_fflush_r+0x40>
 8008522:	059b      	lsls	r3, r3, #22
 8008524:	d402      	bmi.n	800852c <_fflush_r+0x40>
 8008526:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008528:	f000 f923 	bl	8008772 <__retarget_lock_acquire_recursive>
 800852c:	0028      	movs	r0, r5
 800852e:	0021      	movs	r1, r4
 8008530:	f7ff ff50 	bl	80083d4 <__sflush_r>
 8008534:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008536:	0005      	movs	r5, r0
 8008538:	07db      	lsls	r3, r3, #31
 800853a:	d4de      	bmi.n	80084fa <_fflush_r+0xe>
 800853c:	89a3      	ldrh	r3, [r4, #12]
 800853e:	059b      	lsls	r3, r3, #22
 8008540:	d4db      	bmi.n	80084fa <_fflush_r+0xe>
 8008542:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008544:	f000 f916 	bl	8008774 <__retarget_lock_release_recursive>
 8008548:	e7d7      	b.n	80084fa <_fflush_r+0xe>
 800854a:	4b06      	ldr	r3, [pc, #24]	; (8008564 <_fflush_r+0x78>)
 800854c:	429c      	cmp	r4, r3
 800854e:	d101      	bne.n	8008554 <_fflush_r+0x68>
 8008550:	68ac      	ldr	r4, [r5, #8]
 8008552:	e7df      	b.n	8008514 <_fflush_r+0x28>
 8008554:	4b04      	ldr	r3, [pc, #16]	; (8008568 <_fflush_r+0x7c>)
 8008556:	429c      	cmp	r4, r3
 8008558:	d1dc      	bne.n	8008514 <_fflush_r+0x28>
 800855a:	68ec      	ldr	r4, [r5, #12]
 800855c:	e7da      	b.n	8008514 <_fflush_r+0x28>
 800855e:	46c0      	nop			; (mov r8, r8)
 8008560:	08009254 	.word	0x08009254
 8008564:	08009274 	.word	0x08009274
 8008568:	08009234 	.word	0x08009234

0800856c <std>:
 800856c:	2300      	movs	r3, #0
 800856e:	b510      	push	{r4, lr}
 8008570:	0004      	movs	r4, r0
 8008572:	6003      	str	r3, [r0, #0]
 8008574:	6043      	str	r3, [r0, #4]
 8008576:	6083      	str	r3, [r0, #8]
 8008578:	8181      	strh	r1, [r0, #12]
 800857a:	6643      	str	r3, [r0, #100]	; 0x64
 800857c:	0019      	movs	r1, r3
 800857e:	81c2      	strh	r2, [r0, #14]
 8008580:	6103      	str	r3, [r0, #16]
 8008582:	6143      	str	r3, [r0, #20]
 8008584:	6183      	str	r3, [r0, #24]
 8008586:	2208      	movs	r2, #8
 8008588:	305c      	adds	r0, #92	; 0x5c
 800858a:	f7ff fdb7 	bl	80080fc <memset>
 800858e:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <std+0x38>)
 8008590:	6263      	str	r3, [r4, #36]	; 0x24
 8008592:	4b05      	ldr	r3, [pc, #20]	; (80085a8 <std+0x3c>)
 8008594:	6224      	str	r4, [r4, #32]
 8008596:	62a3      	str	r3, [r4, #40]	; 0x28
 8008598:	4b04      	ldr	r3, [pc, #16]	; (80085ac <std+0x40>)
 800859a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800859c:	4b04      	ldr	r3, [pc, #16]	; (80085b0 <std+0x44>)
 800859e:	6323      	str	r3, [r4, #48]	; 0x30
 80085a0:	bd10      	pop	{r4, pc}
 80085a2:	46c0      	nop			; (mov r8, r8)
 80085a4:	08008f8d 	.word	0x08008f8d
 80085a8:	08008fb5 	.word	0x08008fb5
 80085ac:	08008fed 	.word	0x08008fed
 80085b0:	08009019 	.word	0x08009019

080085b4 <_cleanup_r>:
 80085b4:	b510      	push	{r4, lr}
 80085b6:	4902      	ldr	r1, [pc, #8]	; (80085c0 <_cleanup_r+0xc>)
 80085b8:	f000 f8ba 	bl	8008730 <_fwalk_reent>
 80085bc:	bd10      	pop	{r4, pc}
 80085be:	46c0      	nop			; (mov r8, r8)
 80085c0:	080084ed 	.word	0x080084ed

080085c4 <__sfmoreglue>:
 80085c4:	b570      	push	{r4, r5, r6, lr}
 80085c6:	2568      	movs	r5, #104	; 0x68
 80085c8:	1e4a      	subs	r2, r1, #1
 80085ca:	4355      	muls	r5, r2
 80085cc:	000e      	movs	r6, r1
 80085ce:	0029      	movs	r1, r5
 80085d0:	3174      	adds	r1, #116	; 0x74
 80085d2:	f000 f987 	bl	80088e4 <_malloc_r>
 80085d6:	1e04      	subs	r4, r0, #0
 80085d8:	d008      	beq.n	80085ec <__sfmoreglue+0x28>
 80085da:	2100      	movs	r1, #0
 80085dc:	002a      	movs	r2, r5
 80085de:	6001      	str	r1, [r0, #0]
 80085e0:	6046      	str	r6, [r0, #4]
 80085e2:	300c      	adds	r0, #12
 80085e4:	60a0      	str	r0, [r4, #8]
 80085e6:	3268      	adds	r2, #104	; 0x68
 80085e8:	f7ff fd88 	bl	80080fc <memset>
 80085ec:	0020      	movs	r0, r4
 80085ee:	bd70      	pop	{r4, r5, r6, pc}

080085f0 <__sfp_lock_acquire>:
 80085f0:	b510      	push	{r4, lr}
 80085f2:	4802      	ldr	r0, [pc, #8]	; (80085fc <__sfp_lock_acquire+0xc>)
 80085f4:	f000 f8bd 	bl	8008772 <__retarget_lock_acquire_recursive>
 80085f8:	bd10      	pop	{r4, pc}
 80085fa:	46c0      	nop			; (mov r8, r8)
 80085fc:	20000424 	.word	0x20000424

08008600 <__sfp_lock_release>:
 8008600:	b510      	push	{r4, lr}
 8008602:	4802      	ldr	r0, [pc, #8]	; (800860c <__sfp_lock_release+0xc>)
 8008604:	f000 f8b6 	bl	8008774 <__retarget_lock_release_recursive>
 8008608:	bd10      	pop	{r4, pc}
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	20000424 	.word	0x20000424

08008610 <__sinit_lock_acquire>:
 8008610:	b510      	push	{r4, lr}
 8008612:	4802      	ldr	r0, [pc, #8]	; (800861c <__sinit_lock_acquire+0xc>)
 8008614:	f000 f8ad 	bl	8008772 <__retarget_lock_acquire_recursive>
 8008618:	bd10      	pop	{r4, pc}
 800861a:	46c0      	nop			; (mov r8, r8)
 800861c:	2000041f 	.word	0x2000041f

08008620 <__sinit_lock_release>:
 8008620:	b510      	push	{r4, lr}
 8008622:	4802      	ldr	r0, [pc, #8]	; (800862c <__sinit_lock_release+0xc>)
 8008624:	f000 f8a6 	bl	8008774 <__retarget_lock_release_recursive>
 8008628:	bd10      	pop	{r4, pc}
 800862a:	46c0      	nop			; (mov r8, r8)
 800862c:	2000041f 	.word	0x2000041f

08008630 <__sinit>:
 8008630:	b513      	push	{r0, r1, r4, lr}
 8008632:	0004      	movs	r4, r0
 8008634:	f7ff ffec 	bl	8008610 <__sinit_lock_acquire>
 8008638:	69a3      	ldr	r3, [r4, #24]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d002      	beq.n	8008644 <__sinit+0x14>
 800863e:	f7ff ffef 	bl	8008620 <__sinit_lock_release>
 8008642:	bd13      	pop	{r0, r1, r4, pc}
 8008644:	64a3      	str	r3, [r4, #72]	; 0x48
 8008646:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008648:	6523      	str	r3, [r4, #80]	; 0x50
 800864a:	4b13      	ldr	r3, [pc, #76]	; (8008698 <__sinit+0x68>)
 800864c:	4a13      	ldr	r2, [pc, #76]	; (800869c <__sinit+0x6c>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	62a2      	str	r2, [r4, #40]	; 0x28
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	42a3      	cmp	r3, r4
 8008656:	d101      	bne.n	800865c <__sinit+0x2c>
 8008658:	2301      	movs	r3, #1
 800865a:	61a3      	str	r3, [r4, #24]
 800865c:	0020      	movs	r0, r4
 800865e:	f000 f81f 	bl	80086a0 <__sfp>
 8008662:	6060      	str	r0, [r4, #4]
 8008664:	0020      	movs	r0, r4
 8008666:	f000 f81b 	bl	80086a0 <__sfp>
 800866a:	60a0      	str	r0, [r4, #8]
 800866c:	0020      	movs	r0, r4
 800866e:	f000 f817 	bl	80086a0 <__sfp>
 8008672:	2200      	movs	r2, #0
 8008674:	2104      	movs	r1, #4
 8008676:	60e0      	str	r0, [r4, #12]
 8008678:	6860      	ldr	r0, [r4, #4]
 800867a:	f7ff ff77 	bl	800856c <std>
 800867e:	2201      	movs	r2, #1
 8008680:	2109      	movs	r1, #9
 8008682:	68a0      	ldr	r0, [r4, #8]
 8008684:	f7ff ff72 	bl	800856c <std>
 8008688:	2202      	movs	r2, #2
 800868a:	2112      	movs	r1, #18
 800868c:	68e0      	ldr	r0, [r4, #12]
 800868e:	f7ff ff6d 	bl	800856c <std>
 8008692:	2301      	movs	r3, #1
 8008694:	61a3      	str	r3, [r4, #24]
 8008696:	e7d2      	b.n	800863e <__sinit+0xe>
 8008698:	08009230 	.word	0x08009230
 800869c:	080085b5 	.word	0x080085b5

080086a0 <__sfp>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	0007      	movs	r7, r0
 80086a4:	f7ff ffa4 	bl	80085f0 <__sfp_lock_acquire>
 80086a8:	4b1f      	ldr	r3, [pc, #124]	; (8008728 <__sfp+0x88>)
 80086aa:	681e      	ldr	r6, [r3, #0]
 80086ac:	69b3      	ldr	r3, [r6, #24]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d102      	bne.n	80086b8 <__sfp+0x18>
 80086b2:	0030      	movs	r0, r6
 80086b4:	f7ff ffbc 	bl	8008630 <__sinit>
 80086b8:	3648      	adds	r6, #72	; 0x48
 80086ba:	68b4      	ldr	r4, [r6, #8]
 80086bc:	6873      	ldr	r3, [r6, #4]
 80086be:	3b01      	subs	r3, #1
 80086c0:	d504      	bpl.n	80086cc <__sfp+0x2c>
 80086c2:	6833      	ldr	r3, [r6, #0]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d022      	beq.n	800870e <__sfp+0x6e>
 80086c8:	6836      	ldr	r6, [r6, #0]
 80086ca:	e7f6      	b.n	80086ba <__sfp+0x1a>
 80086cc:	220c      	movs	r2, #12
 80086ce:	5ea5      	ldrsh	r5, [r4, r2]
 80086d0:	2d00      	cmp	r5, #0
 80086d2:	d11a      	bne.n	800870a <__sfp+0x6a>
 80086d4:	0020      	movs	r0, r4
 80086d6:	4b15      	ldr	r3, [pc, #84]	; (800872c <__sfp+0x8c>)
 80086d8:	3058      	adds	r0, #88	; 0x58
 80086da:	60e3      	str	r3, [r4, #12]
 80086dc:	6665      	str	r5, [r4, #100]	; 0x64
 80086de:	f000 f847 	bl	8008770 <__retarget_lock_init_recursive>
 80086e2:	f7ff ff8d 	bl	8008600 <__sfp_lock_release>
 80086e6:	0020      	movs	r0, r4
 80086e8:	2208      	movs	r2, #8
 80086ea:	0029      	movs	r1, r5
 80086ec:	6025      	str	r5, [r4, #0]
 80086ee:	60a5      	str	r5, [r4, #8]
 80086f0:	6065      	str	r5, [r4, #4]
 80086f2:	6125      	str	r5, [r4, #16]
 80086f4:	6165      	str	r5, [r4, #20]
 80086f6:	61a5      	str	r5, [r4, #24]
 80086f8:	305c      	adds	r0, #92	; 0x5c
 80086fa:	f7ff fcff 	bl	80080fc <memset>
 80086fe:	6365      	str	r5, [r4, #52]	; 0x34
 8008700:	63a5      	str	r5, [r4, #56]	; 0x38
 8008702:	64a5      	str	r5, [r4, #72]	; 0x48
 8008704:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008706:	0020      	movs	r0, r4
 8008708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800870a:	3468      	adds	r4, #104	; 0x68
 800870c:	e7d7      	b.n	80086be <__sfp+0x1e>
 800870e:	2104      	movs	r1, #4
 8008710:	0038      	movs	r0, r7
 8008712:	f7ff ff57 	bl	80085c4 <__sfmoreglue>
 8008716:	1e04      	subs	r4, r0, #0
 8008718:	6030      	str	r0, [r6, #0]
 800871a:	d1d5      	bne.n	80086c8 <__sfp+0x28>
 800871c:	f7ff ff70 	bl	8008600 <__sfp_lock_release>
 8008720:	230c      	movs	r3, #12
 8008722:	603b      	str	r3, [r7, #0]
 8008724:	e7ef      	b.n	8008706 <__sfp+0x66>
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	08009230 	.word	0x08009230
 800872c:	ffff0001 	.word	0xffff0001

08008730 <_fwalk_reent>:
 8008730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008732:	0004      	movs	r4, r0
 8008734:	0006      	movs	r6, r0
 8008736:	2700      	movs	r7, #0
 8008738:	9101      	str	r1, [sp, #4]
 800873a:	3448      	adds	r4, #72	; 0x48
 800873c:	6863      	ldr	r3, [r4, #4]
 800873e:	68a5      	ldr	r5, [r4, #8]
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	9b00      	ldr	r3, [sp, #0]
 8008744:	3b01      	subs	r3, #1
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	d504      	bpl.n	8008754 <_fwalk_reent+0x24>
 800874a:	6824      	ldr	r4, [r4, #0]
 800874c:	2c00      	cmp	r4, #0
 800874e:	d1f5      	bne.n	800873c <_fwalk_reent+0xc>
 8008750:	0038      	movs	r0, r7
 8008752:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008754:	89ab      	ldrh	r3, [r5, #12]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d908      	bls.n	800876c <_fwalk_reent+0x3c>
 800875a:	220e      	movs	r2, #14
 800875c:	5eab      	ldrsh	r3, [r5, r2]
 800875e:	3301      	adds	r3, #1
 8008760:	d004      	beq.n	800876c <_fwalk_reent+0x3c>
 8008762:	0029      	movs	r1, r5
 8008764:	0030      	movs	r0, r6
 8008766:	9b01      	ldr	r3, [sp, #4]
 8008768:	4798      	blx	r3
 800876a:	4307      	orrs	r7, r0
 800876c:	3568      	adds	r5, #104	; 0x68
 800876e:	e7e8      	b.n	8008742 <_fwalk_reent+0x12>

08008770 <__retarget_lock_init_recursive>:
 8008770:	4770      	bx	lr

08008772 <__retarget_lock_acquire_recursive>:
 8008772:	4770      	bx	lr

08008774 <__retarget_lock_release_recursive>:
 8008774:	4770      	bx	lr
	...

08008778 <__swhatbuf_r>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	000e      	movs	r6, r1
 800877c:	001d      	movs	r5, r3
 800877e:	230e      	movs	r3, #14
 8008780:	5ec9      	ldrsh	r1, [r1, r3]
 8008782:	0014      	movs	r4, r2
 8008784:	b096      	sub	sp, #88	; 0x58
 8008786:	2900      	cmp	r1, #0
 8008788:	da07      	bge.n	800879a <__swhatbuf_r+0x22>
 800878a:	2300      	movs	r3, #0
 800878c:	602b      	str	r3, [r5, #0]
 800878e:	89b3      	ldrh	r3, [r6, #12]
 8008790:	061b      	lsls	r3, r3, #24
 8008792:	d411      	bmi.n	80087b8 <__swhatbuf_r+0x40>
 8008794:	2380      	movs	r3, #128	; 0x80
 8008796:	00db      	lsls	r3, r3, #3
 8008798:	e00f      	b.n	80087ba <__swhatbuf_r+0x42>
 800879a:	466a      	mov	r2, sp
 800879c:	f000 fc68 	bl	8009070 <_fstat_r>
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dbf2      	blt.n	800878a <__swhatbuf_r+0x12>
 80087a4:	23f0      	movs	r3, #240	; 0xf0
 80087a6:	9901      	ldr	r1, [sp, #4]
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	4019      	ands	r1, r3
 80087ac:	4b05      	ldr	r3, [pc, #20]	; (80087c4 <__swhatbuf_r+0x4c>)
 80087ae:	18c9      	adds	r1, r1, r3
 80087b0:	424b      	negs	r3, r1
 80087b2:	4159      	adcs	r1, r3
 80087b4:	6029      	str	r1, [r5, #0]
 80087b6:	e7ed      	b.n	8008794 <__swhatbuf_r+0x1c>
 80087b8:	2340      	movs	r3, #64	; 0x40
 80087ba:	2000      	movs	r0, #0
 80087bc:	6023      	str	r3, [r4, #0]
 80087be:	b016      	add	sp, #88	; 0x58
 80087c0:	bd70      	pop	{r4, r5, r6, pc}
 80087c2:	46c0      	nop			; (mov r8, r8)
 80087c4:	ffffe000 	.word	0xffffe000

080087c8 <__smakebuf_r>:
 80087c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087ca:	2602      	movs	r6, #2
 80087cc:	898b      	ldrh	r3, [r1, #12]
 80087ce:	0005      	movs	r5, r0
 80087d0:	000c      	movs	r4, r1
 80087d2:	4233      	tst	r3, r6
 80087d4:	d006      	beq.n	80087e4 <__smakebuf_r+0x1c>
 80087d6:	0023      	movs	r3, r4
 80087d8:	3347      	adds	r3, #71	; 0x47
 80087da:	6023      	str	r3, [r4, #0]
 80087dc:	6123      	str	r3, [r4, #16]
 80087de:	2301      	movs	r3, #1
 80087e0:	6163      	str	r3, [r4, #20]
 80087e2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80087e4:	466a      	mov	r2, sp
 80087e6:	ab01      	add	r3, sp, #4
 80087e8:	f7ff ffc6 	bl	8008778 <__swhatbuf_r>
 80087ec:	9900      	ldr	r1, [sp, #0]
 80087ee:	0007      	movs	r7, r0
 80087f0:	0028      	movs	r0, r5
 80087f2:	f000 f877 	bl	80088e4 <_malloc_r>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	d108      	bne.n	800880c <__smakebuf_r+0x44>
 80087fa:	220c      	movs	r2, #12
 80087fc:	5ea3      	ldrsh	r3, [r4, r2]
 80087fe:	059a      	lsls	r2, r3, #22
 8008800:	d4ef      	bmi.n	80087e2 <__smakebuf_r+0x1a>
 8008802:	2203      	movs	r2, #3
 8008804:	4393      	bics	r3, r2
 8008806:	431e      	orrs	r6, r3
 8008808:	81a6      	strh	r6, [r4, #12]
 800880a:	e7e4      	b.n	80087d6 <__smakebuf_r+0xe>
 800880c:	4b0f      	ldr	r3, [pc, #60]	; (800884c <__smakebuf_r+0x84>)
 800880e:	62ab      	str	r3, [r5, #40]	; 0x28
 8008810:	2380      	movs	r3, #128	; 0x80
 8008812:	89a2      	ldrh	r2, [r4, #12]
 8008814:	6020      	str	r0, [r4, #0]
 8008816:	4313      	orrs	r3, r2
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	9b00      	ldr	r3, [sp, #0]
 800881c:	6120      	str	r0, [r4, #16]
 800881e:	6163      	str	r3, [r4, #20]
 8008820:	9b01      	ldr	r3, [sp, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d00d      	beq.n	8008842 <__smakebuf_r+0x7a>
 8008826:	0028      	movs	r0, r5
 8008828:	230e      	movs	r3, #14
 800882a:	5ee1      	ldrsh	r1, [r4, r3]
 800882c:	f000 fc32 	bl	8009094 <_isatty_r>
 8008830:	2800      	cmp	r0, #0
 8008832:	d006      	beq.n	8008842 <__smakebuf_r+0x7a>
 8008834:	2203      	movs	r2, #3
 8008836:	89a3      	ldrh	r3, [r4, #12]
 8008838:	4393      	bics	r3, r2
 800883a:	001a      	movs	r2, r3
 800883c:	2301      	movs	r3, #1
 800883e:	4313      	orrs	r3, r2
 8008840:	81a3      	strh	r3, [r4, #12]
 8008842:	89a0      	ldrh	r0, [r4, #12]
 8008844:	4307      	orrs	r7, r0
 8008846:	81a7      	strh	r7, [r4, #12]
 8008848:	e7cb      	b.n	80087e2 <__smakebuf_r+0x1a>
 800884a:	46c0      	nop			; (mov r8, r8)
 800884c:	080085b5 	.word	0x080085b5

08008850 <_free_r>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	0005      	movs	r5, r0
 8008854:	2900      	cmp	r1, #0
 8008856:	d010      	beq.n	800887a <_free_r+0x2a>
 8008858:	1f0c      	subs	r4, r1, #4
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	da00      	bge.n	8008862 <_free_r+0x12>
 8008860:	18e4      	adds	r4, r4, r3
 8008862:	0028      	movs	r0, r5
 8008864:	f000 fc48 	bl	80090f8 <__malloc_lock>
 8008868:	4a1d      	ldr	r2, [pc, #116]	; (80088e0 <_free_r+0x90>)
 800886a:	6813      	ldr	r3, [r2, #0]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d105      	bne.n	800887c <_free_r+0x2c>
 8008870:	6063      	str	r3, [r4, #4]
 8008872:	6014      	str	r4, [r2, #0]
 8008874:	0028      	movs	r0, r5
 8008876:	f000 fc47 	bl	8009108 <__malloc_unlock>
 800887a:	bd70      	pop	{r4, r5, r6, pc}
 800887c:	42a3      	cmp	r3, r4
 800887e:	d908      	bls.n	8008892 <_free_r+0x42>
 8008880:	6821      	ldr	r1, [r4, #0]
 8008882:	1860      	adds	r0, r4, r1
 8008884:	4283      	cmp	r3, r0
 8008886:	d1f3      	bne.n	8008870 <_free_r+0x20>
 8008888:	6818      	ldr	r0, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	1841      	adds	r1, r0, r1
 800888e:	6021      	str	r1, [r4, #0]
 8008890:	e7ee      	b.n	8008870 <_free_r+0x20>
 8008892:	001a      	movs	r2, r3
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d001      	beq.n	800889e <_free_r+0x4e>
 800889a:	42a3      	cmp	r3, r4
 800889c:	d9f9      	bls.n	8008892 <_free_r+0x42>
 800889e:	6811      	ldr	r1, [r2, #0]
 80088a0:	1850      	adds	r0, r2, r1
 80088a2:	42a0      	cmp	r0, r4
 80088a4:	d10b      	bne.n	80088be <_free_r+0x6e>
 80088a6:	6820      	ldr	r0, [r4, #0]
 80088a8:	1809      	adds	r1, r1, r0
 80088aa:	1850      	adds	r0, r2, r1
 80088ac:	6011      	str	r1, [r2, #0]
 80088ae:	4283      	cmp	r3, r0
 80088b0:	d1e0      	bne.n	8008874 <_free_r+0x24>
 80088b2:	6818      	ldr	r0, [r3, #0]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	1841      	adds	r1, r0, r1
 80088b8:	6011      	str	r1, [r2, #0]
 80088ba:	6053      	str	r3, [r2, #4]
 80088bc:	e7da      	b.n	8008874 <_free_r+0x24>
 80088be:	42a0      	cmp	r0, r4
 80088c0:	d902      	bls.n	80088c8 <_free_r+0x78>
 80088c2:	230c      	movs	r3, #12
 80088c4:	602b      	str	r3, [r5, #0]
 80088c6:	e7d5      	b.n	8008874 <_free_r+0x24>
 80088c8:	6821      	ldr	r1, [r4, #0]
 80088ca:	1860      	adds	r0, r4, r1
 80088cc:	4283      	cmp	r3, r0
 80088ce:	d103      	bne.n	80088d8 <_free_r+0x88>
 80088d0:	6818      	ldr	r0, [r3, #0]
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	1841      	adds	r1, r0, r1
 80088d6:	6021      	str	r1, [r4, #0]
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	6054      	str	r4, [r2, #4]
 80088dc:	e7ca      	b.n	8008874 <_free_r+0x24>
 80088de:	46c0      	nop			; (mov r8, r8)
 80088e0:	20000224 	.word	0x20000224

080088e4 <_malloc_r>:
 80088e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088e6:	2303      	movs	r3, #3
 80088e8:	1ccd      	adds	r5, r1, #3
 80088ea:	439d      	bics	r5, r3
 80088ec:	3508      	adds	r5, #8
 80088ee:	0006      	movs	r6, r0
 80088f0:	2d0c      	cmp	r5, #12
 80088f2:	d21f      	bcs.n	8008934 <_malloc_r+0x50>
 80088f4:	250c      	movs	r5, #12
 80088f6:	42a9      	cmp	r1, r5
 80088f8:	d81e      	bhi.n	8008938 <_malloc_r+0x54>
 80088fa:	0030      	movs	r0, r6
 80088fc:	f000 fbfc 	bl	80090f8 <__malloc_lock>
 8008900:	4925      	ldr	r1, [pc, #148]	; (8008998 <_malloc_r+0xb4>)
 8008902:	680a      	ldr	r2, [r1, #0]
 8008904:	0014      	movs	r4, r2
 8008906:	2c00      	cmp	r4, #0
 8008908:	d11a      	bne.n	8008940 <_malloc_r+0x5c>
 800890a:	4f24      	ldr	r7, [pc, #144]	; (800899c <_malloc_r+0xb8>)
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d104      	bne.n	800891c <_malloc_r+0x38>
 8008912:	0021      	movs	r1, r4
 8008914:	0030      	movs	r0, r6
 8008916:	f000 fb27 	bl	8008f68 <_sbrk_r>
 800891a:	6038      	str	r0, [r7, #0]
 800891c:	0029      	movs	r1, r5
 800891e:	0030      	movs	r0, r6
 8008920:	f000 fb22 	bl	8008f68 <_sbrk_r>
 8008924:	1c43      	adds	r3, r0, #1
 8008926:	d12b      	bne.n	8008980 <_malloc_r+0x9c>
 8008928:	230c      	movs	r3, #12
 800892a:	0030      	movs	r0, r6
 800892c:	6033      	str	r3, [r6, #0]
 800892e:	f000 fbeb 	bl	8009108 <__malloc_unlock>
 8008932:	e003      	b.n	800893c <_malloc_r+0x58>
 8008934:	2d00      	cmp	r5, #0
 8008936:	dade      	bge.n	80088f6 <_malloc_r+0x12>
 8008938:	230c      	movs	r3, #12
 800893a:	6033      	str	r3, [r6, #0]
 800893c:	2000      	movs	r0, #0
 800893e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008940:	6823      	ldr	r3, [r4, #0]
 8008942:	1b5b      	subs	r3, r3, r5
 8008944:	d419      	bmi.n	800897a <_malloc_r+0x96>
 8008946:	2b0b      	cmp	r3, #11
 8008948:	d903      	bls.n	8008952 <_malloc_r+0x6e>
 800894a:	6023      	str	r3, [r4, #0]
 800894c:	18e4      	adds	r4, r4, r3
 800894e:	6025      	str	r5, [r4, #0]
 8008950:	e003      	b.n	800895a <_malloc_r+0x76>
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	42a2      	cmp	r2, r4
 8008956:	d10e      	bne.n	8008976 <_malloc_r+0x92>
 8008958:	600b      	str	r3, [r1, #0]
 800895a:	0030      	movs	r0, r6
 800895c:	f000 fbd4 	bl	8009108 <__malloc_unlock>
 8008960:	0020      	movs	r0, r4
 8008962:	2207      	movs	r2, #7
 8008964:	300b      	adds	r0, #11
 8008966:	1d23      	adds	r3, r4, #4
 8008968:	4390      	bics	r0, r2
 800896a:	1ac2      	subs	r2, r0, r3
 800896c:	4298      	cmp	r0, r3
 800896e:	d0e6      	beq.n	800893e <_malloc_r+0x5a>
 8008970:	1a1b      	subs	r3, r3, r0
 8008972:	50a3      	str	r3, [r4, r2]
 8008974:	e7e3      	b.n	800893e <_malloc_r+0x5a>
 8008976:	6053      	str	r3, [r2, #4]
 8008978:	e7ef      	b.n	800895a <_malloc_r+0x76>
 800897a:	0022      	movs	r2, r4
 800897c:	6864      	ldr	r4, [r4, #4]
 800897e:	e7c2      	b.n	8008906 <_malloc_r+0x22>
 8008980:	2303      	movs	r3, #3
 8008982:	1cc4      	adds	r4, r0, #3
 8008984:	439c      	bics	r4, r3
 8008986:	42a0      	cmp	r0, r4
 8008988:	d0e1      	beq.n	800894e <_malloc_r+0x6a>
 800898a:	1a21      	subs	r1, r4, r0
 800898c:	0030      	movs	r0, r6
 800898e:	f000 faeb 	bl	8008f68 <_sbrk_r>
 8008992:	1c43      	adds	r3, r0, #1
 8008994:	d1db      	bne.n	800894e <_malloc_r+0x6a>
 8008996:	e7c7      	b.n	8008928 <_malloc_r+0x44>
 8008998:	20000224 	.word	0x20000224
 800899c:	20000228 	.word	0x20000228

080089a0 <__sfputc_r>:
 80089a0:	6893      	ldr	r3, [r2, #8]
 80089a2:	b510      	push	{r4, lr}
 80089a4:	3b01      	subs	r3, #1
 80089a6:	6093      	str	r3, [r2, #8]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	da04      	bge.n	80089b6 <__sfputc_r+0x16>
 80089ac:	6994      	ldr	r4, [r2, #24]
 80089ae:	42a3      	cmp	r3, r4
 80089b0:	db07      	blt.n	80089c2 <__sfputc_r+0x22>
 80089b2:	290a      	cmp	r1, #10
 80089b4:	d005      	beq.n	80089c2 <__sfputc_r+0x22>
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	1c58      	adds	r0, r3, #1
 80089ba:	6010      	str	r0, [r2, #0]
 80089bc:	7019      	strb	r1, [r3, #0]
 80089be:	0008      	movs	r0, r1
 80089c0:	bd10      	pop	{r4, pc}
 80089c2:	f7ff fc39 	bl	8008238 <__swbuf_r>
 80089c6:	0001      	movs	r1, r0
 80089c8:	e7f9      	b.n	80089be <__sfputc_r+0x1e>

080089ca <__sfputs_r>:
 80089ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089cc:	0006      	movs	r6, r0
 80089ce:	000f      	movs	r7, r1
 80089d0:	0014      	movs	r4, r2
 80089d2:	18d5      	adds	r5, r2, r3
 80089d4:	42ac      	cmp	r4, r5
 80089d6:	d101      	bne.n	80089dc <__sfputs_r+0x12>
 80089d8:	2000      	movs	r0, #0
 80089da:	e007      	b.n	80089ec <__sfputs_r+0x22>
 80089dc:	7821      	ldrb	r1, [r4, #0]
 80089de:	003a      	movs	r2, r7
 80089e0:	0030      	movs	r0, r6
 80089e2:	f7ff ffdd 	bl	80089a0 <__sfputc_r>
 80089e6:	3401      	adds	r4, #1
 80089e8:	1c43      	adds	r3, r0, #1
 80089ea:	d1f3      	bne.n	80089d4 <__sfputs_r+0xa>
 80089ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080089f0 <_vfiprintf_r>:
 80089f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089f2:	b0a1      	sub	sp, #132	; 0x84
 80089f4:	0006      	movs	r6, r0
 80089f6:	000c      	movs	r4, r1
 80089f8:	001f      	movs	r7, r3
 80089fa:	9203      	str	r2, [sp, #12]
 80089fc:	2800      	cmp	r0, #0
 80089fe:	d004      	beq.n	8008a0a <_vfiprintf_r+0x1a>
 8008a00:	6983      	ldr	r3, [r0, #24]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d101      	bne.n	8008a0a <_vfiprintf_r+0x1a>
 8008a06:	f7ff fe13 	bl	8008630 <__sinit>
 8008a0a:	4b8e      	ldr	r3, [pc, #568]	; (8008c44 <_vfiprintf_r+0x254>)
 8008a0c:	429c      	cmp	r4, r3
 8008a0e:	d11c      	bne.n	8008a4a <_vfiprintf_r+0x5a>
 8008a10:	6874      	ldr	r4, [r6, #4]
 8008a12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a14:	07db      	lsls	r3, r3, #31
 8008a16:	d405      	bmi.n	8008a24 <_vfiprintf_r+0x34>
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	059b      	lsls	r3, r3, #22
 8008a1c:	d402      	bmi.n	8008a24 <_vfiprintf_r+0x34>
 8008a1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a20:	f7ff fea7 	bl	8008772 <__retarget_lock_acquire_recursive>
 8008a24:	89a3      	ldrh	r3, [r4, #12]
 8008a26:	071b      	lsls	r3, r3, #28
 8008a28:	d502      	bpl.n	8008a30 <_vfiprintf_r+0x40>
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d11d      	bne.n	8008a6c <_vfiprintf_r+0x7c>
 8008a30:	0021      	movs	r1, r4
 8008a32:	0030      	movs	r0, r6
 8008a34:	f7ff fc56 	bl	80082e4 <__swsetup_r>
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d017      	beq.n	8008a6c <_vfiprintf_r+0x7c>
 8008a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a3e:	07db      	lsls	r3, r3, #31
 8008a40:	d50d      	bpl.n	8008a5e <_vfiprintf_r+0x6e>
 8008a42:	2001      	movs	r0, #1
 8008a44:	4240      	negs	r0, r0
 8008a46:	b021      	add	sp, #132	; 0x84
 8008a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a4a:	4b7f      	ldr	r3, [pc, #508]	; (8008c48 <_vfiprintf_r+0x258>)
 8008a4c:	429c      	cmp	r4, r3
 8008a4e:	d101      	bne.n	8008a54 <_vfiprintf_r+0x64>
 8008a50:	68b4      	ldr	r4, [r6, #8]
 8008a52:	e7de      	b.n	8008a12 <_vfiprintf_r+0x22>
 8008a54:	4b7d      	ldr	r3, [pc, #500]	; (8008c4c <_vfiprintf_r+0x25c>)
 8008a56:	429c      	cmp	r4, r3
 8008a58:	d1db      	bne.n	8008a12 <_vfiprintf_r+0x22>
 8008a5a:	68f4      	ldr	r4, [r6, #12]
 8008a5c:	e7d9      	b.n	8008a12 <_vfiprintf_r+0x22>
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	059b      	lsls	r3, r3, #22
 8008a62:	d4ee      	bmi.n	8008a42 <_vfiprintf_r+0x52>
 8008a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a66:	f7ff fe85 	bl	8008774 <__retarget_lock_release_recursive>
 8008a6a:	e7ea      	b.n	8008a42 <_vfiprintf_r+0x52>
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	ad08      	add	r5, sp, #32
 8008a70:	616b      	str	r3, [r5, #20]
 8008a72:	3320      	adds	r3, #32
 8008a74:	766b      	strb	r3, [r5, #25]
 8008a76:	3310      	adds	r3, #16
 8008a78:	76ab      	strb	r3, [r5, #26]
 8008a7a:	9707      	str	r7, [sp, #28]
 8008a7c:	9f03      	ldr	r7, [sp, #12]
 8008a7e:	783b      	ldrb	r3, [r7, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d001      	beq.n	8008a88 <_vfiprintf_r+0x98>
 8008a84:	2b25      	cmp	r3, #37	; 0x25
 8008a86:	d14e      	bne.n	8008b26 <_vfiprintf_r+0x136>
 8008a88:	9b03      	ldr	r3, [sp, #12]
 8008a8a:	1afb      	subs	r3, r7, r3
 8008a8c:	9305      	str	r3, [sp, #20]
 8008a8e:	9b03      	ldr	r3, [sp, #12]
 8008a90:	429f      	cmp	r7, r3
 8008a92:	d00d      	beq.n	8008ab0 <_vfiprintf_r+0xc0>
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	0021      	movs	r1, r4
 8008a98:	0030      	movs	r0, r6
 8008a9a:	9a03      	ldr	r2, [sp, #12]
 8008a9c:	f7ff ff95 	bl	80089ca <__sfputs_r>
 8008aa0:	1c43      	adds	r3, r0, #1
 8008aa2:	d100      	bne.n	8008aa6 <_vfiprintf_r+0xb6>
 8008aa4:	e0b5      	b.n	8008c12 <_vfiprintf_r+0x222>
 8008aa6:	696a      	ldr	r2, [r5, #20]
 8008aa8:	9b05      	ldr	r3, [sp, #20]
 8008aaa:	4694      	mov	ip, r2
 8008aac:	4463      	add	r3, ip
 8008aae:	616b      	str	r3, [r5, #20]
 8008ab0:	783b      	ldrb	r3, [r7, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d100      	bne.n	8008ab8 <_vfiprintf_r+0xc8>
 8008ab6:	e0ac      	b.n	8008c12 <_vfiprintf_r+0x222>
 8008ab8:	2201      	movs	r2, #1
 8008aba:	1c7b      	adds	r3, r7, #1
 8008abc:	9303      	str	r3, [sp, #12]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4252      	negs	r2, r2
 8008ac2:	606a      	str	r2, [r5, #4]
 8008ac4:	a904      	add	r1, sp, #16
 8008ac6:	3254      	adds	r2, #84	; 0x54
 8008ac8:	1852      	adds	r2, r2, r1
 8008aca:	602b      	str	r3, [r5, #0]
 8008acc:	60eb      	str	r3, [r5, #12]
 8008ace:	60ab      	str	r3, [r5, #8]
 8008ad0:	7013      	strb	r3, [r2, #0]
 8008ad2:	65ab      	str	r3, [r5, #88]	; 0x58
 8008ad4:	9b03      	ldr	r3, [sp, #12]
 8008ad6:	2205      	movs	r2, #5
 8008ad8:	7819      	ldrb	r1, [r3, #0]
 8008ada:	485d      	ldr	r0, [pc, #372]	; (8008c50 <_vfiprintf_r+0x260>)
 8008adc:	f000 fb00 	bl	80090e0 <memchr>
 8008ae0:	9b03      	ldr	r3, [sp, #12]
 8008ae2:	1c5f      	adds	r7, r3, #1
 8008ae4:	2800      	cmp	r0, #0
 8008ae6:	d120      	bne.n	8008b2a <_vfiprintf_r+0x13a>
 8008ae8:	682a      	ldr	r2, [r5, #0]
 8008aea:	06d3      	lsls	r3, r2, #27
 8008aec:	d504      	bpl.n	8008af8 <_vfiprintf_r+0x108>
 8008aee:	2353      	movs	r3, #83	; 0x53
 8008af0:	a904      	add	r1, sp, #16
 8008af2:	185b      	adds	r3, r3, r1
 8008af4:	2120      	movs	r1, #32
 8008af6:	7019      	strb	r1, [r3, #0]
 8008af8:	0713      	lsls	r3, r2, #28
 8008afa:	d504      	bpl.n	8008b06 <_vfiprintf_r+0x116>
 8008afc:	2353      	movs	r3, #83	; 0x53
 8008afe:	a904      	add	r1, sp, #16
 8008b00:	185b      	adds	r3, r3, r1
 8008b02:	212b      	movs	r1, #43	; 0x2b
 8008b04:	7019      	strb	r1, [r3, #0]
 8008b06:	9b03      	ldr	r3, [sp, #12]
 8008b08:	781b      	ldrb	r3, [r3, #0]
 8008b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b0c:	d016      	beq.n	8008b3c <_vfiprintf_r+0x14c>
 8008b0e:	2100      	movs	r1, #0
 8008b10:	68eb      	ldr	r3, [r5, #12]
 8008b12:	9f03      	ldr	r7, [sp, #12]
 8008b14:	783a      	ldrb	r2, [r7, #0]
 8008b16:	1c78      	adds	r0, r7, #1
 8008b18:	3a30      	subs	r2, #48	; 0x30
 8008b1a:	4684      	mov	ip, r0
 8008b1c:	2a09      	cmp	r2, #9
 8008b1e:	d94f      	bls.n	8008bc0 <_vfiprintf_r+0x1d0>
 8008b20:	2900      	cmp	r1, #0
 8008b22:	d111      	bne.n	8008b48 <_vfiprintf_r+0x158>
 8008b24:	e017      	b.n	8008b56 <_vfiprintf_r+0x166>
 8008b26:	3701      	adds	r7, #1
 8008b28:	e7a9      	b.n	8008a7e <_vfiprintf_r+0x8e>
 8008b2a:	4b49      	ldr	r3, [pc, #292]	; (8008c50 <_vfiprintf_r+0x260>)
 8008b2c:	682a      	ldr	r2, [r5, #0]
 8008b2e:	1ac0      	subs	r0, r0, r3
 8008b30:	2301      	movs	r3, #1
 8008b32:	4083      	lsls	r3, r0
 8008b34:	4313      	orrs	r3, r2
 8008b36:	602b      	str	r3, [r5, #0]
 8008b38:	9703      	str	r7, [sp, #12]
 8008b3a:	e7cb      	b.n	8008ad4 <_vfiprintf_r+0xe4>
 8008b3c:	9b07      	ldr	r3, [sp, #28]
 8008b3e:	1d19      	adds	r1, r3, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	9107      	str	r1, [sp, #28]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	db01      	blt.n	8008b4c <_vfiprintf_r+0x15c>
 8008b48:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b4a:	e004      	b.n	8008b56 <_vfiprintf_r+0x166>
 8008b4c:	425b      	negs	r3, r3
 8008b4e:	60eb      	str	r3, [r5, #12]
 8008b50:	2302      	movs	r3, #2
 8008b52:	4313      	orrs	r3, r2
 8008b54:	602b      	str	r3, [r5, #0]
 8008b56:	783b      	ldrb	r3, [r7, #0]
 8008b58:	2b2e      	cmp	r3, #46	; 0x2e
 8008b5a:	d10a      	bne.n	8008b72 <_vfiprintf_r+0x182>
 8008b5c:	787b      	ldrb	r3, [r7, #1]
 8008b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008b60:	d137      	bne.n	8008bd2 <_vfiprintf_r+0x1e2>
 8008b62:	9b07      	ldr	r3, [sp, #28]
 8008b64:	3702      	adds	r7, #2
 8008b66:	1d1a      	adds	r2, r3, #4
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	9207      	str	r2, [sp, #28]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	db2d      	blt.n	8008bcc <_vfiprintf_r+0x1dc>
 8008b70:	9309      	str	r3, [sp, #36]	; 0x24
 8008b72:	2203      	movs	r2, #3
 8008b74:	7839      	ldrb	r1, [r7, #0]
 8008b76:	4837      	ldr	r0, [pc, #220]	; (8008c54 <_vfiprintf_r+0x264>)
 8008b78:	f000 fab2 	bl	80090e0 <memchr>
 8008b7c:	2800      	cmp	r0, #0
 8008b7e:	d007      	beq.n	8008b90 <_vfiprintf_r+0x1a0>
 8008b80:	4b34      	ldr	r3, [pc, #208]	; (8008c54 <_vfiprintf_r+0x264>)
 8008b82:	682a      	ldr	r2, [r5, #0]
 8008b84:	1ac0      	subs	r0, r0, r3
 8008b86:	2340      	movs	r3, #64	; 0x40
 8008b88:	4083      	lsls	r3, r0
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	3701      	adds	r7, #1
 8008b8e:	602b      	str	r3, [r5, #0]
 8008b90:	7839      	ldrb	r1, [r7, #0]
 8008b92:	1c7b      	adds	r3, r7, #1
 8008b94:	2206      	movs	r2, #6
 8008b96:	4830      	ldr	r0, [pc, #192]	; (8008c58 <_vfiprintf_r+0x268>)
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	7629      	strb	r1, [r5, #24]
 8008b9c:	f000 faa0 	bl	80090e0 <memchr>
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d045      	beq.n	8008c30 <_vfiprintf_r+0x240>
 8008ba4:	4b2d      	ldr	r3, [pc, #180]	; (8008c5c <_vfiprintf_r+0x26c>)
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d127      	bne.n	8008bfa <_vfiprintf_r+0x20a>
 8008baa:	2207      	movs	r2, #7
 8008bac:	9b07      	ldr	r3, [sp, #28]
 8008bae:	3307      	adds	r3, #7
 8008bb0:	4393      	bics	r3, r2
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	9307      	str	r3, [sp, #28]
 8008bb6:	696b      	ldr	r3, [r5, #20]
 8008bb8:	9a04      	ldr	r2, [sp, #16]
 8008bba:	189b      	adds	r3, r3, r2
 8008bbc:	616b      	str	r3, [r5, #20]
 8008bbe:	e75d      	b.n	8008a7c <_vfiprintf_r+0x8c>
 8008bc0:	210a      	movs	r1, #10
 8008bc2:	434b      	muls	r3, r1
 8008bc4:	4667      	mov	r7, ip
 8008bc6:	189b      	adds	r3, r3, r2
 8008bc8:	3909      	subs	r1, #9
 8008bca:	e7a3      	b.n	8008b14 <_vfiprintf_r+0x124>
 8008bcc:	2301      	movs	r3, #1
 8008bce:	425b      	negs	r3, r3
 8008bd0:	e7ce      	b.n	8008b70 <_vfiprintf_r+0x180>
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	001a      	movs	r2, r3
 8008bd6:	3701      	adds	r7, #1
 8008bd8:	606b      	str	r3, [r5, #4]
 8008bda:	7839      	ldrb	r1, [r7, #0]
 8008bdc:	1c78      	adds	r0, r7, #1
 8008bde:	3930      	subs	r1, #48	; 0x30
 8008be0:	4684      	mov	ip, r0
 8008be2:	2909      	cmp	r1, #9
 8008be4:	d903      	bls.n	8008bee <_vfiprintf_r+0x1fe>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d0c3      	beq.n	8008b72 <_vfiprintf_r+0x182>
 8008bea:	9209      	str	r2, [sp, #36]	; 0x24
 8008bec:	e7c1      	b.n	8008b72 <_vfiprintf_r+0x182>
 8008bee:	230a      	movs	r3, #10
 8008bf0:	435a      	muls	r2, r3
 8008bf2:	4667      	mov	r7, ip
 8008bf4:	1852      	adds	r2, r2, r1
 8008bf6:	3b09      	subs	r3, #9
 8008bf8:	e7ef      	b.n	8008bda <_vfiprintf_r+0x1ea>
 8008bfa:	ab07      	add	r3, sp, #28
 8008bfc:	9300      	str	r3, [sp, #0]
 8008bfe:	0022      	movs	r2, r4
 8008c00:	0029      	movs	r1, r5
 8008c02:	0030      	movs	r0, r6
 8008c04:	4b16      	ldr	r3, [pc, #88]	; (8008c60 <_vfiprintf_r+0x270>)
 8008c06:	e000      	b.n	8008c0a <_vfiprintf_r+0x21a>
 8008c08:	bf00      	nop
 8008c0a:	9004      	str	r0, [sp, #16]
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	d1d1      	bne.n	8008bb6 <_vfiprintf_r+0x1c6>
 8008c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c14:	07db      	lsls	r3, r3, #31
 8008c16:	d405      	bmi.n	8008c24 <_vfiprintf_r+0x234>
 8008c18:	89a3      	ldrh	r3, [r4, #12]
 8008c1a:	059b      	lsls	r3, r3, #22
 8008c1c:	d402      	bmi.n	8008c24 <_vfiprintf_r+0x234>
 8008c1e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c20:	f7ff fda8 	bl	8008774 <__retarget_lock_release_recursive>
 8008c24:	89a3      	ldrh	r3, [r4, #12]
 8008c26:	065b      	lsls	r3, r3, #25
 8008c28:	d500      	bpl.n	8008c2c <_vfiprintf_r+0x23c>
 8008c2a:	e70a      	b.n	8008a42 <_vfiprintf_r+0x52>
 8008c2c:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c2e:	e70a      	b.n	8008a46 <_vfiprintf_r+0x56>
 8008c30:	ab07      	add	r3, sp, #28
 8008c32:	9300      	str	r3, [sp, #0]
 8008c34:	0022      	movs	r2, r4
 8008c36:	0029      	movs	r1, r5
 8008c38:	0030      	movs	r0, r6
 8008c3a:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <_vfiprintf_r+0x270>)
 8008c3c:	f000 f882 	bl	8008d44 <_printf_i>
 8008c40:	e7e3      	b.n	8008c0a <_vfiprintf_r+0x21a>
 8008c42:	46c0      	nop			; (mov r8, r8)
 8008c44:	08009254 	.word	0x08009254
 8008c48:	08009274 	.word	0x08009274
 8008c4c:	08009234 	.word	0x08009234
 8008c50:	08009294 	.word	0x08009294
 8008c54:	0800929a 	.word	0x0800929a
 8008c58:	0800929e 	.word	0x0800929e
 8008c5c:	00000000 	.word	0x00000000
 8008c60:	080089cb 	.word	0x080089cb

08008c64 <_printf_common>:
 8008c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c66:	0015      	movs	r5, r2
 8008c68:	9301      	str	r3, [sp, #4]
 8008c6a:	688a      	ldr	r2, [r1, #8]
 8008c6c:	690b      	ldr	r3, [r1, #16]
 8008c6e:	000c      	movs	r4, r1
 8008c70:	9000      	str	r0, [sp, #0]
 8008c72:	4293      	cmp	r3, r2
 8008c74:	da00      	bge.n	8008c78 <_printf_common+0x14>
 8008c76:	0013      	movs	r3, r2
 8008c78:	0022      	movs	r2, r4
 8008c7a:	602b      	str	r3, [r5, #0]
 8008c7c:	3243      	adds	r2, #67	; 0x43
 8008c7e:	7812      	ldrb	r2, [r2, #0]
 8008c80:	2a00      	cmp	r2, #0
 8008c82:	d001      	beq.n	8008c88 <_printf_common+0x24>
 8008c84:	3301      	adds	r3, #1
 8008c86:	602b      	str	r3, [r5, #0]
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	069b      	lsls	r3, r3, #26
 8008c8c:	d502      	bpl.n	8008c94 <_printf_common+0x30>
 8008c8e:	682b      	ldr	r3, [r5, #0]
 8008c90:	3302      	adds	r3, #2
 8008c92:	602b      	str	r3, [r5, #0]
 8008c94:	6822      	ldr	r2, [r4, #0]
 8008c96:	2306      	movs	r3, #6
 8008c98:	0017      	movs	r7, r2
 8008c9a:	401f      	ands	r7, r3
 8008c9c:	421a      	tst	r2, r3
 8008c9e:	d027      	beq.n	8008cf0 <_printf_common+0x8c>
 8008ca0:	0023      	movs	r3, r4
 8008ca2:	3343      	adds	r3, #67	; 0x43
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	1e5a      	subs	r2, r3, #1
 8008ca8:	4193      	sbcs	r3, r2
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	0692      	lsls	r2, r2, #26
 8008cae:	d430      	bmi.n	8008d12 <_printf_common+0xae>
 8008cb0:	0022      	movs	r2, r4
 8008cb2:	9901      	ldr	r1, [sp, #4]
 8008cb4:	9800      	ldr	r0, [sp, #0]
 8008cb6:	9e08      	ldr	r6, [sp, #32]
 8008cb8:	3243      	adds	r2, #67	; 0x43
 8008cba:	47b0      	blx	r6
 8008cbc:	1c43      	adds	r3, r0, #1
 8008cbe:	d025      	beq.n	8008d0c <_printf_common+0xa8>
 8008cc0:	2306      	movs	r3, #6
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	682a      	ldr	r2, [r5, #0]
 8008cc6:	68e1      	ldr	r1, [r4, #12]
 8008cc8:	2500      	movs	r5, #0
 8008cca:	4003      	ands	r3, r0
 8008ccc:	2b04      	cmp	r3, #4
 8008cce:	d103      	bne.n	8008cd8 <_printf_common+0x74>
 8008cd0:	1a8d      	subs	r5, r1, r2
 8008cd2:	43eb      	mvns	r3, r5
 8008cd4:	17db      	asrs	r3, r3, #31
 8008cd6:	401d      	ands	r5, r3
 8008cd8:	68a3      	ldr	r3, [r4, #8]
 8008cda:	6922      	ldr	r2, [r4, #16]
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	dd01      	ble.n	8008ce4 <_printf_common+0x80>
 8008ce0:	1a9b      	subs	r3, r3, r2
 8008ce2:	18ed      	adds	r5, r5, r3
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	42bd      	cmp	r5, r7
 8008ce8:	d120      	bne.n	8008d2c <_printf_common+0xc8>
 8008cea:	2000      	movs	r0, #0
 8008cec:	e010      	b.n	8008d10 <_printf_common+0xac>
 8008cee:	3701      	adds	r7, #1
 8008cf0:	68e3      	ldr	r3, [r4, #12]
 8008cf2:	682a      	ldr	r2, [r5, #0]
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	42bb      	cmp	r3, r7
 8008cf8:	ddd2      	ble.n	8008ca0 <_printf_common+0x3c>
 8008cfa:	0022      	movs	r2, r4
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	9901      	ldr	r1, [sp, #4]
 8008d00:	9800      	ldr	r0, [sp, #0]
 8008d02:	9e08      	ldr	r6, [sp, #32]
 8008d04:	3219      	adds	r2, #25
 8008d06:	47b0      	blx	r6
 8008d08:	1c43      	adds	r3, r0, #1
 8008d0a:	d1f0      	bne.n	8008cee <_printf_common+0x8a>
 8008d0c:	2001      	movs	r0, #1
 8008d0e:	4240      	negs	r0, r0
 8008d10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d12:	2030      	movs	r0, #48	; 0x30
 8008d14:	18e1      	adds	r1, r4, r3
 8008d16:	3143      	adds	r1, #67	; 0x43
 8008d18:	7008      	strb	r0, [r1, #0]
 8008d1a:	0021      	movs	r1, r4
 8008d1c:	1c5a      	adds	r2, r3, #1
 8008d1e:	3145      	adds	r1, #69	; 0x45
 8008d20:	7809      	ldrb	r1, [r1, #0]
 8008d22:	18a2      	adds	r2, r4, r2
 8008d24:	3243      	adds	r2, #67	; 0x43
 8008d26:	3302      	adds	r3, #2
 8008d28:	7011      	strb	r1, [r2, #0]
 8008d2a:	e7c1      	b.n	8008cb0 <_printf_common+0x4c>
 8008d2c:	0022      	movs	r2, r4
 8008d2e:	2301      	movs	r3, #1
 8008d30:	9901      	ldr	r1, [sp, #4]
 8008d32:	9800      	ldr	r0, [sp, #0]
 8008d34:	9e08      	ldr	r6, [sp, #32]
 8008d36:	321a      	adds	r2, #26
 8008d38:	47b0      	blx	r6
 8008d3a:	1c43      	adds	r3, r0, #1
 8008d3c:	d0e6      	beq.n	8008d0c <_printf_common+0xa8>
 8008d3e:	3701      	adds	r7, #1
 8008d40:	e7d1      	b.n	8008ce6 <_printf_common+0x82>
	...

08008d44 <_printf_i>:
 8008d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d46:	b08b      	sub	sp, #44	; 0x2c
 8008d48:	9206      	str	r2, [sp, #24]
 8008d4a:	000a      	movs	r2, r1
 8008d4c:	3243      	adds	r2, #67	; 0x43
 8008d4e:	9307      	str	r3, [sp, #28]
 8008d50:	9005      	str	r0, [sp, #20]
 8008d52:	9204      	str	r2, [sp, #16]
 8008d54:	7e0a      	ldrb	r2, [r1, #24]
 8008d56:	000c      	movs	r4, r1
 8008d58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d5a:	2a78      	cmp	r2, #120	; 0x78
 8008d5c:	d806      	bhi.n	8008d6c <_printf_i+0x28>
 8008d5e:	2a62      	cmp	r2, #98	; 0x62
 8008d60:	d808      	bhi.n	8008d74 <_printf_i+0x30>
 8008d62:	2a00      	cmp	r2, #0
 8008d64:	d100      	bne.n	8008d68 <_printf_i+0x24>
 8008d66:	e0c0      	b.n	8008eea <_printf_i+0x1a6>
 8008d68:	2a58      	cmp	r2, #88	; 0x58
 8008d6a:	d052      	beq.n	8008e12 <_printf_i+0xce>
 8008d6c:	0026      	movs	r6, r4
 8008d6e:	3642      	adds	r6, #66	; 0x42
 8008d70:	7032      	strb	r2, [r6, #0]
 8008d72:	e022      	b.n	8008dba <_printf_i+0x76>
 8008d74:	0010      	movs	r0, r2
 8008d76:	3863      	subs	r0, #99	; 0x63
 8008d78:	2815      	cmp	r0, #21
 8008d7a:	d8f7      	bhi.n	8008d6c <_printf_i+0x28>
 8008d7c:	f7f7 f9c0 	bl	8000100 <__gnu_thumb1_case_shi>
 8008d80:	001f0016 	.word	0x001f0016
 8008d84:	fff6fff6 	.word	0xfff6fff6
 8008d88:	fff6fff6 	.word	0xfff6fff6
 8008d8c:	fff6001f 	.word	0xfff6001f
 8008d90:	fff6fff6 	.word	0xfff6fff6
 8008d94:	00a8fff6 	.word	0x00a8fff6
 8008d98:	009a0036 	.word	0x009a0036
 8008d9c:	fff6fff6 	.word	0xfff6fff6
 8008da0:	fff600b9 	.word	0xfff600b9
 8008da4:	fff60036 	.word	0xfff60036
 8008da8:	009efff6 	.word	0x009efff6
 8008dac:	0026      	movs	r6, r4
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	3642      	adds	r6, #66	; 0x42
 8008db2:	1d11      	adds	r1, r2, #4
 8008db4:	6019      	str	r1, [r3, #0]
 8008db6:	6813      	ldr	r3, [r2, #0]
 8008db8:	7033      	strb	r3, [r6, #0]
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e0a7      	b.n	8008f0e <_printf_i+0x1ca>
 8008dbe:	6808      	ldr	r0, [r1, #0]
 8008dc0:	6819      	ldr	r1, [r3, #0]
 8008dc2:	1d0a      	adds	r2, r1, #4
 8008dc4:	0605      	lsls	r5, r0, #24
 8008dc6:	d50b      	bpl.n	8008de0 <_printf_i+0x9c>
 8008dc8:	680d      	ldr	r5, [r1, #0]
 8008dca:	601a      	str	r2, [r3, #0]
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	da03      	bge.n	8008dd8 <_printf_i+0x94>
 8008dd0:	232d      	movs	r3, #45	; 0x2d
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	426d      	negs	r5, r5
 8008dd6:	7013      	strb	r3, [r2, #0]
 8008dd8:	4b61      	ldr	r3, [pc, #388]	; (8008f60 <_printf_i+0x21c>)
 8008dda:	270a      	movs	r7, #10
 8008ddc:	9303      	str	r3, [sp, #12]
 8008dde:	e032      	b.n	8008e46 <_printf_i+0x102>
 8008de0:	680d      	ldr	r5, [r1, #0]
 8008de2:	601a      	str	r2, [r3, #0]
 8008de4:	0641      	lsls	r1, r0, #25
 8008de6:	d5f1      	bpl.n	8008dcc <_printf_i+0x88>
 8008de8:	b22d      	sxth	r5, r5
 8008dea:	e7ef      	b.n	8008dcc <_printf_i+0x88>
 8008dec:	680d      	ldr	r5, [r1, #0]
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	1d08      	adds	r0, r1, #4
 8008df2:	6018      	str	r0, [r3, #0]
 8008df4:	062e      	lsls	r6, r5, #24
 8008df6:	d501      	bpl.n	8008dfc <_printf_i+0xb8>
 8008df8:	680d      	ldr	r5, [r1, #0]
 8008dfa:	e003      	b.n	8008e04 <_printf_i+0xc0>
 8008dfc:	066d      	lsls	r5, r5, #25
 8008dfe:	d5fb      	bpl.n	8008df8 <_printf_i+0xb4>
 8008e00:	680d      	ldr	r5, [r1, #0]
 8008e02:	b2ad      	uxth	r5, r5
 8008e04:	4b56      	ldr	r3, [pc, #344]	; (8008f60 <_printf_i+0x21c>)
 8008e06:	270a      	movs	r7, #10
 8008e08:	9303      	str	r3, [sp, #12]
 8008e0a:	2a6f      	cmp	r2, #111	; 0x6f
 8008e0c:	d117      	bne.n	8008e3e <_printf_i+0xfa>
 8008e0e:	2708      	movs	r7, #8
 8008e10:	e015      	b.n	8008e3e <_printf_i+0xfa>
 8008e12:	3145      	adds	r1, #69	; 0x45
 8008e14:	700a      	strb	r2, [r1, #0]
 8008e16:	4a52      	ldr	r2, [pc, #328]	; (8008f60 <_printf_i+0x21c>)
 8008e18:	9203      	str	r2, [sp, #12]
 8008e1a:	681a      	ldr	r2, [r3, #0]
 8008e1c:	6821      	ldr	r1, [r4, #0]
 8008e1e:	ca20      	ldmia	r2!, {r5}
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	0608      	lsls	r0, r1, #24
 8008e24:	d550      	bpl.n	8008ec8 <_printf_i+0x184>
 8008e26:	07cb      	lsls	r3, r1, #31
 8008e28:	d502      	bpl.n	8008e30 <_printf_i+0xec>
 8008e2a:	2320      	movs	r3, #32
 8008e2c:	4319      	orrs	r1, r3
 8008e2e:	6021      	str	r1, [r4, #0]
 8008e30:	2710      	movs	r7, #16
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	d103      	bne.n	8008e3e <_printf_i+0xfa>
 8008e36:	2320      	movs	r3, #32
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	439a      	bics	r2, r3
 8008e3c:	6022      	str	r2, [r4, #0]
 8008e3e:	0023      	movs	r3, r4
 8008e40:	2200      	movs	r2, #0
 8008e42:	3343      	adds	r3, #67	; 0x43
 8008e44:	701a      	strb	r2, [r3, #0]
 8008e46:	6863      	ldr	r3, [r4, #4]
 8008e48:	60a3      	str	r3, [r4, #8]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	db03      	blt.n	8008e56 <_printf_i+0x112>
 8008e4e:	2204      	movs	r2, #4
 8008e50:	6821      	ldr	r1, [r4, #0]
 8008e52:	4391      	bics	r1, r2
 8008e54:	6021      	str	r1, [r4, #0]
 8008e56:	2d00      	cmp	r5, #0
 8008e58:	d102      	bne.n	8008e60 <_printf_i+0x11c>
 8008e5a:	9e04      	ldr	r6, [sp, #16]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d00c      	beq.n	8008e7a <_printf_i+0x136>
 8008e60:	9e04      	ldr	r6, [sp, #16]
 8008e62:	0028      	movs	r0, r5
 8008e64:	0039      	movs	r1, r7
 8008e66:	f7f7 f9db 	bl	8000220 <__aeabi_uidivmod>
 8008e6a:	9b03      	ldr	r3, [sp, #12]
 8008e6c:	3e01      	subs	r6, #1
 8008e6e:	5c5b      	ldrb	r3, [r3, r1]
 8008e70:	7033      	strb	r3, [r6, #0]
 8008e72:	002b      	movs	r3, r5
 8008e74:	0005      	movs	r5, r0
 8008e76:	429f      	cmp	r7, r3
 8008e78:	d9f3      	bls.n	8008e62 <_printf_i+0x11e>
 8008e7a:	2f08      	cmp	r7, #8
 8008e7c:	d109      	bne.n	8008e92 <_printf_i+0x14e>
 8008e7e:	6823      	ldr	r3, [r4, #0]
 8008e80:	07db      	lsls	r3, r3, #31
 8008e82:	d506      	bpl.n	8008e92 <_printf_i+0x14e>
 8008e84:	6863      	ldr	r3, [r4, #4]
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	dc02      	bgt.n	8008e92 <_printf_i+0x14e>
 8008e8c:	2330      	movs	r3, #48	; 0x30
 8008e8e:	3e01      	subs	r6, #1
 8008e90:	7033      	strb	r3, [r6, #0]
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	1b9b      	subs	r3, r3, r6
 8008e96:	6123      	str	r3, [r4, #16]
 8008e98:	9b07      	ldr	r3, [sp, #28]
 8008e9a:	0021      	movs	r1, r4
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	9805      	ldr	r0, [sp, #20]
 8008ea0:	9b06      	ldr	r3, [sp, #24]
 8008ea2:	aa09      	add	r2, sp, #36	; 0x24
 8008ea4:	f7ff fede 	bl	8008c64 <_printf_common>
 8008ea8:	1c43      	adds	r3, r0, #1
 8008eaa:	d135      	bne.n	8008f18 <_printf_i+0x1d4>
 8008eac:	2001      	movs	r0, #1
 8008eae:	4240      	negs	r0, r0
 8008eb0:	b00b      	add	sp, #44	; 0x2c
 8008eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	6809      	ldr	r1, [r1, #0]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	6022      	str	r2, [r4, #0]
 8008ebc:	0022      	movs	r2, r4
 8008ebe:	2178      	movs	r1, #120	; 0x78
 8008ec0:	3245      	adds	r2, #69	; 0x45
 8008ec2:	7011      	strb	r1, [r2, #0]
 8008ec4:	4a27      	ldr	r2, [pc, #156]	; (8008f64 <_printf_i+0x220>)
 8008ec6:	e7a7      	b.n	8008e18 <_printf_i+0xd4>
 8008ec8:	0648      	lsls	r0, r1, #25
 8008eca:	d5ac      	bpl.n	8008e26 <_printf_i+0xe2>
 8008ecc:	b2ad      	uxth	r5, r5
 8008ece:	e7aa      	b.n	8008e26 <_printf_i+0xe2>
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	680d      	ldr	r5, [r1, #0]
 8008ed4:	1d10      	adds	r0, r2, #4
 8008ed6:	6949      	ldr	r1, [r1, #20]
 8008ed8:	6018      	str	r0, [r3, #0]
 8008eda:	6813      	ldr	r3, [r2, #0]
 8008edc:	062e      	lsls	r6, r5, #24
 8008ede:	d501      	bpl.n	8008ee4 <_printf_i+0x1a0>
 8008ee0:	6019      	str	r1, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <_printf_i+0x1a6>
 8008ee4:	066d      	lsls	r5, r5, #25
 8008ee6:	d5fb      	bpl.n	8008ee0 <_printf_i+0x19c>
 8008ee8:	8019      	strh	r1, [r3, #0]
 8008eea:	2300      	movs	r3, #0
 8008eec:	9e04      	ldr	r6, [sp, #16]
 8008eee:	6123      	str	r3, [r4, #16]
 8008ef0:	e7d2      	b.n	8008e98 <_printf_i+0x154>
 8008ef2:	681a      	ldr	r2, [r3, #0]
 8008ef4:	1d11      	adds	r1, r2, #4
 8008ef6:	6019      	str	r1, [r3, #0]
 8008ef8:	6816      	ldr	r6, [r2, #0]
 8008efa:	2100      	movs	r1, #0
 8008efc:	0030      	movs	r0, r6
 8008efe:	6862      	ldr	r2, [r4, #4]
 8008f00:	f000 f8ee 	bl	80090e0 <memchr>
 8008f04:	2800      	cmp	r0, #0
 8008f06:	d001      	beq.n	8008f0c <_printf_i+0x1c8>
 8008f08:	1b80      	subs	r0, r0, r6
 8008f0a:	6060      	str	r0, [r4, #4]
 8008f0c:	6863      	ldr	r3, [r4, #4]
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	2300      	movs	r3, #0
 8008f12:	9a04      	ldr	r2, [sp, #16]
 8008f14:	7013      	strb	r3, [r2, #0]
 8008f16:	e7bf      	b.n	8008e98 <_printf_i+0x154>
 8008f18:	6923      	ldr	r3, [r4, #16]
 8008f1a:	0032      	movs	r2, r6
 8008f1c:	9906      	ldr	r1, [sp, #24]
 8008f1e:	9805      	ldr	r0, [sp, #20]
 8008f20:	9d07      	ldr	r5, [sp, #28]
 8008f22:	47a8      	blx	r5
 8008f24:	1c43      	adds	r3, r0, #1
 8008f26:	d0c1      	beq.n	8008eac <_printf_i+0x168>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	079b      	lsls	r3, r3, #30
 8008f2c:	d415      	bmi.n	8008f5a <_printf_i+0x216>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f30:	68e0      	ldr	r0, [r4, #12]
 8008f32:	4298      	cmp	r0, r3
 8008f34:	dabc      	bge.n	8008eb0 <_printf_i+0x16c>
 8008f36:	0018      	movs	r0, r3
 8008f38:	e7ba      	b.n	8008eb0 <_printf_i+0x16c>
 8008f3a:	0022      	movs	r2, r4
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	9906      	ldr	r1, [sp, #24]
 8008f40:	9805      	ldr	r0, [sp, #20]
 8008f42:	9e07      	ldr	r6, [sp, #28]
 8008f44:	3219      	adds	r2, #25
 8008f46:	47b0      	blx	r6
 8008f48:	1c43      	adds	r3, r0, #1
 8008f4a:	d0af      	beq.n	8008eac <_printf_i+0x168>
 8008f4c:	3501      	adds	r5, #1
 8008f4e:	68e3      	ldr	r3, [r4, #12]
 8008f50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f52:	1a9b      	subs	r3, r3, r2
 8008f54:	42ab      	cmp	r3, r5
 8008f56:	dcf0      	bgt.n	8008f3a <_printf_i+0x1f6>
 8008f58:	e7e9      	b.n	8008f2e <_printf_i+0x1ea>
 8008f5a:	2500      	movs	r5, #0
 8008f5c:	e7f7      	b.n	8008f4e <_printf_i+0x20a>
 8008f5e:	46c0      	nop			; (mov r8, r8)
 8008f60:	080092a5 	.word	0x080092a5
 8008f64:	080092b6 	.word	0x080092b6

08008f68 <_sbrk_r>:
 8008f68:	2300      	movs	r3, #0
 8008f6a:	b570      	push	{r4, r5, r6, lr}
 8008f6c:	4d06      	ldr	r5, [pc, #24]	; (8008f88 <_sbrk_r+0x20>)
 8008f6e:	0004      	movs	r4, r0
 8008f70:	0008      	movs	r0, r1
 8008f72:	602b      	str	r3, [r5, #0]
 8008f74:	f7f9 ff50 	bl	8002e18 <_sbrk>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d103      	bne.n	8008f84 <_sbrk_r+0x1c>
 8008f7c:	682b      	ldr	r3, [r5, #0]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d000      	beq.n	8008f84 <_sbrk_r+0x1c>
 8008f82:	6023      	str	r3, [r4, #0]
 8008f84:	bd70      	pop	{r4, r5, r6, pc}
 8008f86:	46c0      	nop			; (mov r8, r8)
 8008f88:	20000428 	.word	0x20000428

08008f8c <__sread>:
 8008f8c:	b570      	push	{r4, r5, r6, lr}
 8008f8e:	000c      	movs	r4, r1
 8008f90:	250e      	movs	r5, #14
 8008f92:	5f49      	ldrsh	r1, [r1, r5]
 8008f94:	f000 f8c0 	bl	8009118 <_read_r>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	db03      	blt.n	8008fa4 <__sread+0x18>
 8008f9c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8008f9e:	181b      	adds	r3, r3, r0
 8008fa0:	6563      	str	r3, [r4, #84]	; 0x54
 8008fa2:	bd70      	pop	{r4, r5, r6, pc}
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	4a02      	ldr	r2, [pc, #8]	; (8008fb0 <__sread+0x24>)
 8008fa8:	4013      	ands	r3, r2
 8008faa:	81a3      	strh	r3, [r4, #12]
 8008fac:	e7f9      	b.n	8008fa2 <__sread+0x16>
 8008fae:	46c0      	nop			; (mov r8, r8)
 8008fb0:	ffffefff 	.word	0xffffefff

08008fb4 <__swrite>:
 8008fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb6:	001f      	movs	r7, r3
 8008fb8:	898b      	ldrh	r3, [r1, #12]
 8008fba:	0005      	movs	r5, r0
 8008fbc:	000c      	movs	r4, r1
 8008fbe:	0016      	movs	r6, r2
 8008fc0:	05db      	lsls	r3, r3, #23
 8008fc2:	d505      	bpl.n	8008fd0 <__swrite+0x1c>
 8008fc4:	230e      	movs	r3, #14
 8008fc6:	5ec9      	ldrsh	r1, [r1, r3]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2302      	movs	r3, #2
 8008fcc:	f000 f874 	bl	80090b8 <_lseek_r>
 8008fd0:	89a3      	ldrh	r3, [r4, #12]
 8008fd2:	4a05      	ldr	r2, [pc, #20]	; (8008fe8 <__swrite+0x34>)
 8008fd4:	0028      	movs	r0, r5
 8008fd6:	4013      	ands	r3, r2
 8008fd8:	81a3      	strh	r3, [r4, #12]
 8008fda:	0032      	movs	r2, r6
 8008fdc:	230e      	movs	r3, #14
 8008fde:	5ee1      	ldrsh	r1, [r4, r3]
 8008fe0:	003b      	movs	r3, r7
 8008fe2:	f000 f81f 	bl	8009024 <_write_r>
 8008fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fe8:	ffffefff 	.word	0xffffefff

08008fec <__sseek>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	000c      	movs	r4, r1
 8008ff0:	250e      	movs	r5, #14
 8008ff2:	5f49      	ldrsh	r1, [r1, r5]
 8008ff4:	f000 f860 	bl	80090b8 <_lseek_r>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	1c42      	adds	r2, r0, #1
 8008ffc:	d103      	bne.n	8009006 <__sseek+0x1a>
 8008ffe:	4a05      	ldr	r2, [pc, #20]	; (8009014 <__sseek+0x28>)
 8009000:	4013      	ands	r3, r2
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	bd70      	pop	{r4, r5, r6, pc}
 8009006:	2280      	movs	r2, #128	; 0x80
 8009008:	0152      	lsls	r2, r2, #5
 800900a:	4313      	orrs	r3, r2
 800900c:	81a3      	strh	r3, [r4, #12]
 800900e:	6560      	str	r0, [r4, #84]	; 0x54
 8009010:	e7f8      	b.n	8009004 <__sseek+0x18>
 8009012:	46c0      	nop			; (mov r8, r8)
 8009014:	ffffefff 	.word	0xffffefff

08009018 <__sclose>:
 8009018:	b510      	push	{r4, lr}
 800901a:	230e      	movs	r3, #14
 800901c:	5ec9      	ldrsh	r1, [r1, r3]
 800901e:	f000 f815 	bl	800904c <_close_r>
 8009022:	bd10      	pop	{r4, pc}

08009024 <_write_r>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	0004      	movs	r4, r0
 8009028:	0008      	movs	r0, r1
 800902a:	0011      	movs	r1, r2
 800902c:	001a      	movs	r2, r3
 800902e:	2300      	movs	r3, #0
 8009030:	4d05      	ldr	r5, [pc, #20]	; (8009048 <_write_r+0x24>)
 8009032:	602b      	str	r3, [r5, #0]
 8009034:	f7f9 fea7 	bl	8002d86 <_write>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d103      	bne.n	8009044 <_write_r+0x20>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d000      	beq.n	8009044 <_write_r+0x20>
 8009042:	6023      	str	r3, [r4, #0]
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	46c0      	nop			; (mov r8, r8)
 8009048:	20000428 	.word	0x20000428

0800904c <_close_r>:
 800904c:	2300      	movs	r3, #0
 800904e:	b570      	push	{r4, r5, r6, lr}
 8009050:	4d06      	ldr	r5, [pc, #24]	; (800906c <_close_r+0x20>)
 8009052:	0004      	movs	r4, r0
 8009054:	0008      	movs	r0, r1
 8009056:	602b      	str	r3, [r5, #0]
 8009058:	f7f9 feb1 	bl	8002dbe <_close>
 800905c:	1c43      	adds	r3, r0, #1
 800905e:	d103      	bne.n	8009068 <_close_r+0x1c>
 8009060:	682b      	ldr	r3, [r5, #0]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d000      	beq.n	8009068 <_close_r+0x1c>
 8009066:	6023      	str	r3, [r4, #0]
 8009068:	bd70      	pop	{r4, r5, r6, pc}
 800906a:	46c0      	nop			; (mov r8, r8)
 800906c:	20000428 	.word	0x20000428

08009070 <_fstat_r>:
 8009070:	2300      	movs	r3, #0
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	4d06      	ldr	r5, [pc, #24]	; (8009090 <_fstat_r+0x20>)
 8009076:	0004      	movs	r4, r0
 8009078:	0008      	movs	r0, r1
 800907a:	0011      	movs	r1, r2
 800907c:	602b      	str	r3, [r5, #0]
 800907e:	f7f9 fea8 	bl	8002dd2 <_fstat>
 8009082:	1c43      	adds	r3, r0, #1
 8009084:	d103      	bne.n	800908e <_fstat_r+0x1e>
 8009086:	682b      	ldr	r3, [r5, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d000      	beq.n	800908e <_fstat_r+0x1e>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd70      	pop	{r4, r5, r6, pc}
 8009090:	20000428 	.word	0x20000428

08009094 <_isatty_r>:
 8009094:	2300      	movs	r3, #0
 8009096:	b570      	push	{r4, r5, r6, lr}
 8009098:	4d06      	ldr	r5, [pc, #24]	; (80090b4 <_isatty_r+0x20>)
 800909a:	0004      	movs	r4, r0
 800909c:	0008      	movs	r0, r1
 800909e:	602b      	str	r3, [r5, #0]
 80090a0:	f7f9 fea5 	bl	8002dee <_isatty>
 80090a4:	1c43      	adds	r3, r0, #1
 80090a6:	d103      	bne.n	80090b0 <_isatty_r+0x1c>
 80090a8:	682b      	ldr	r3, [r5, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d000      	beq.n	80090b0 <_isatty_r+0x1c>
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	bd70      	pop	{r4, r5, r6, pc}
 80090b2:	46c0      	nop			; (mov r8, r8)
 80090b4:	20000428 	.word	0x20000428

080090b8 <_lseek_r>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	0004      	movs	r4, r0
 80090bc:	0008      	movs	r0, r1
 80090be:	0011      	movs	r1, r2
 80090c0:	001a      	movs	r2, r3
 80090c2:	2300      	movs	r3, #0
 80090c4:	4d05      	ldr	r5, [pc, #20]	; (80090dc <_lseek_r+0x24>)
 80090c6:	602b      	str	r3, [r5, #0]
 80090c8:	f7f9 fe9a 	bl	8002e00 <_lseek>
 80090cc:	1c43      	adds	r3, r0, #1
 80090ce:	d103      	bne.n	80090d8 <_lseek_r+0x20>
 80090d0:	682b      	ldr	r3, [r5, #0]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d000      	beq.n	80090d8 <_lseek_r+0x20>
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	bd70      	pop	{r4, r5, r6, pc}
 80090da:	46c0      	nop			; (mov r8, r8)
 80090dc:	20000428 	.word	0x20000428

080090e0 <memchr>:
 80090e0:	b2c9      	uxtb	r1, r1
 80090e2:	1882      	adds	r2, r0, r2
 80090e4:	4290      	cmp	r0, r2
 80090e6:	d101      	bne.n	80090ec <memchr+0xc>
 80090e8:	2000      	movs	r0, #0
 80090ea:	4770      	bx	lr
 80090ec:	7803      	ldrb	r3, [r0, #0]
 80090ee:	428b      	cmp	r3, r1
 80090f0:	d0fb      	beq.n	80090ea <memchr+0xa>
 80090f2:	3001      	adds	r0, #1
 80090f4:	e7f6      	b.n	80090e4 <memchr+0x4>
	...

080090f8 <__malloc_lock>:
 80090f8:	b510      	push	{r4, lr}
 80090fa:	4802      	ldr	r0, [pc, #8]	; (8009104 <__malloc_lock+0xc>)
 80090fc:	f7ff fb39 	bl	8008772 <__retarget_lock_acquire_recursive>
 8009100:	bd10      	pop	{r4, pc}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	20000420 	.word	0x20000420

08009108 <__malloc_unlock>:
 8009108:	b510      	push	{r4, lr}
 800910a:	4802      	ldr	r0, [pc, #8]	; (8009114 <__malloc_unlock+0xc>)
 800910c:	f7ff fb32 	bl	8008774 <__retarget_lock_release_recursive>
 8009110:	bd10      	pop	{r4, pc}
 8009112:	46c0      	nop			; (mov r8, r8)
 8009114:	20000420 	.word	0x20000420

08009118 <_read_r>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	0004      	movs	r4, r0
 800911c:	0008      	movs	r0, r1
 800911e:	0011      	movs	r1, r2
 8009120:	001a      	movs	r2, r3
 8009122:	2300      	movs	r3, #0
 8009124:	4d05      	ldr	r5, [pc, #20]	; (800913c <_read_r+0x24>)
 8009126:	602b      	str	r3, [r5, #0]
 8009128:	f7f9 fe10 	bl	8002d4c <_read>
 800912c:	1c43      	adds	r3, r0, #1
 800912e:	d103      	bne.n	8009138 <_read_r+0x20>
 8009130:	682b      	ldr	r3, [r5, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d000      	beq.n	8009138 <_read_r+0x20>
 8009136:	6023      	str	r3, [r4, #0]
 8009138:	bd70      	pop	{r4, r5, r6, pc}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	20000428 	.word	0x20000428

08009140 <_init>:
 8009140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009146:	bc08      	pop	{r3}
 8009148:	469e      	mov	lr, r3
 800914a:	4770      	bx	lr

0800914c <_fini>:
 800914c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800914e:	46c0      	nop			; (mov r8, r8)
 8009150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009152:	bc08      	pop	{r3}
 8009154:	469e      	mov	lr, r3
 8009156:	4770      	bx	lr
